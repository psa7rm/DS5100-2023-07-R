[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 5100: Programming for Data Science",
    "section": "",
    "text": "Welcome\nWelcome to website for DS 5100 Programming for Data Science, Spring 2023.\n\n\n\n\n\n\nNote\n\n\n\nThis site contains all the content needed to complete the course. All graded coursework is hosted on the Canvas website.\n\n\nIn this course, you will develop skills in Python and R Programming, as well as how to use the command line and GitHub.\nThe objective of this course is to introduce essential programming concepts, structures, and techniques.\nYou will gain confidence in not only reading code, but learning what it means to write good quality code.\nAdditionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization."
  },
  {
    "objectID": "modules/m00/syllabus.html#welcome",
    "href": "modules/m00/syllabus.html#welcome",
    "title": "Syllabus",
    "section": "Welcome",
    "text": "Welcome\nWelcome to DS 5100 Programming for Data Science! In this course, we will develop skills in Python and R Programming, as well as the command line and GitHub. The objective of the course is to introduce essential programming concepts, structures, and techniques from a data science perspective. You will gain confidence in not only reading code, but learning what it means to write good quality code. Additionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization.\n\nThe Data Science Perspective\nLearning to code from the data science perspective means that we will emphasize the role that code plays in working with the data pipeline that underlies nearly everything that a data scientist does, from acquiring data from a variety of sources to cleaning and reshaping it for exploration, analysis, and modeling, to visualizing and interpreting it for the world to understand. At each phase of this process, data are transformed through the medium of code, and so we will always being thinking of a programming language as a data processing language. The meaning of this will become clearer as the course progresses.\n\n\nCode Fluency\nThis course is designed to teach the programming knowledge and skills necessary to become an effective data scientist. The focus will be on code fluency – the ability to both write and read code, as well as to understand the nature of high quality code. Code fluency encompasses a variety of skills, from the ability to write functions and classes to testing and debugging to packaging and visualizing the results of coding.\nCode fluency is important because code is the primary medium through which we represent and express our most basic and complex ideas in data science. These ideas include everything from the structure of web pages to the process of back propagation in a neural network. Code is the language with which we represent data and the models that process and interpret data, as well as the data products that make use of our data and the analytical results from it.\n\n\nPython and R\nThis course is specifically focused on your ability to read and write code in Python and R. It is not a course in computer science or in data wrangling or in software development. Each of those elements will obviously play into our work, but our focus is on the fundamental knowledge of programming – the building blocks from which you can build complex (but not complicated) code to solve real world problems. \n\n\nPractice Makes Perfect\nThe guiding philosophy of the course is that coding is a practice like many other practices – such as the ability to speak a non-native human language, or to play a musical instrument, or to play a sport, or to perform such as in singing, acting, or dancing. These are all complex practices that involve higher forms of cognitive representation but are also embodied practices. This means that they have to be practiced, physically and repetitively, in order for you to be successful at them. Programming languages are like that.\nPut another way, programming is like cooking, carpentry, and other forms of material creation. Again, in each case high level cognition is involved, but so are the hands and eyes, and an appreciation of the subtle qualities of materials and ingredients is essential to successfully using them to create effective work – a sturdy and beautiful building or a satisfying and exquisite meal.\nAll of these practices, some of which I am sure each of you has had experience in, are based on the ideas of imitation and drilling which develop into generalization and integration and finally into excellence and mastery of design and execution. Therefore, this course will require the student to observe principles and imitate examples (though writing) on the path to generalization and fluency."
  },
  {
    "objectID": "modules/m00/syllabus.html#learning-goals",
    "href": "modules/m00/syllabus.html#learning-goals",
    "title": "Syllabus",
    "section": "Learning Goals",
    "text": "Learning Goals\nUpon completion of this course, you are expected to be able to do the following. In all cases, unless specified, both Python and R are included. In truth, you’ll probably learn more than this. :-)\nUnderstand the importance of data and programming for data science\n\nUnderstand the relationship between between data and data science.\nUnderstand how data is related to programming.\nKnow broadly what kinds of data exist.\n\nConfidently work in an appropriate programming environment\n\nBasic operations with Git and GitHub to manage and share your code.\nConfidently write code in Jupyter Lab, Visual Studio Code, and RStudio.\nUnderstand which editor is appropriate to which task.\nFind and use documents, data, and code online.\n\nIdentify and use data types and data structures\n\nKnow the elementary data types for each language: booleans, integers, floats, strings, etc.\nKnow the elementary data structures for each language:\n\nPython: set, list, dictionary, and tuple.\nR: vectors, list, matrix, factor.\n\nKnow some of the advanced data structures for each language:\n\nPython: Numpy arrays and Pandas series and dataframes.\nR: dataframes and Tidy tibbles.\n\nKnow and perform basic operations for each data type and structure.\nSelect and apply an appropriate data structure based on the problem requirements.\n\nRead and Write to and from various data formats\n\nRead text and data files from disc.\nImport data into a Pandas and R dataframes\n\nConfidently call and write functions and methods\n\nUnderstand the structure and use of functions for programming.\nUse built-in and import functions to perform fundamental tasks.\nCorrectly pass parameters and retrieve function output(s).\nUse built-in object methods for data types and structures, e.g. string methods and dataframe methods.\nKnow what vectorized functions and methods are.\n\nConfidently write a class and call its methods\n\nUnderstand role of classes in organizing code.\nUnderstand how classes group together variables as attributes and functions as methods into encapsulated components.\nUnderstand how classes can inherit the variables and methods of other classes.\n\nUse packages to augment existing data structures\n\nIn Python, NumPy and Pandas essentials (e.g. simple queries and small ML computation)\nIn Python and R, use a program API to utilize existing functions (e.g. assert statements).\nIn R, apply the Tidyverse verbs, such as: select(), filter(), arrange(), mutate(), and summarize().\nIn R, apply the Tidyverse Pipe operator %>% to aggregate data.\n\nWrite your own modules of classes in Python\n\nWrite classes and organize them into modules to make your more modular.\nMake your modules sharable so that others can install them with Python’s setup and install functions.\nWrite documentation for your modules so that others can make sense of them.\nWrite test scripts to go with your modules.\n\nWrite robust code by implementing the basic principles of program testing and debugging in Python\n\nCatch errors in your with exception handling and print statements.\nRead error messages produced by the interpreter.\nFix and harden broken code."
  },
  {
    "objectID": "modules/m00/syllabus.html#assessments",
    "href": "modules/m00/syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\n\nHomework Assignments\nHomework assignments will given throughout the course, typically one for each module. \nYou are encouraged to first try to complete the homework by yourself.\nIf you work with others, be sure you understand all of the work, and that your final submission is your own work.\nTypically, homework assignments that involve Jupyter Notebooks will be submitted through GradeScope as PDFs. However, in some cases the assignment will be submitted through Canvas.  In either case, your assignment will be listed in the week’s module.\n\n\nLateness Policy\nPlease submit HW assignments on time.\nIf an issue will prompt late submission, email the TA in advance to explain the situation.\nIf the HW is submitted late and it is not an excused lateness, 10% of the assignment total points will be deducted per day it is late.\n\n\nIn-Class Activities\nDuring each class there will be activities in which you will write code to demonstrate and extend your knowledge. These may be guided activities or peer-programming exercises. Each of these are designed to exemplify the concepts conveyed in reading and lecture.\nAlthough the results of this work are not graded, you will be graded on your effort to complete them. This will count toward your participation grade.\n\n\nQuizzes\nThere will be several quizzes throughout the semester that will assess your knowledge of the various topics. Quizzes are based on the topics and code covered in the readings and activities.\nAll quizzes are mandatory for all students to take.\nAlthough they can be completed in less time, you have one hour to finish and submit your work. \nThe quizzes should be done closed book: please do not consult any resources including notes, books, the web, devices, or other external media.\n\n\n\n\n\n\nWarning\n\n\n\nMaking up missed quizzes is not advised — their timing is part of their value. However, if you know in advance that you will miss any of the scheduled quizzes, you must make arrangements in advance with the instructor. At least one week in advance if possible, or as soon as you are able if an unforeseen event occurs preventing you from taking the quiz.\n\n\n\n\nCourse Project\nThe final project will focus on creating and packaging a module in Python. This module will address a data science problem and be sharable on GitHub (in principle) and installable by others. It will have proper documentation and a testing file. \nProject deliverables are due on the last day of course. See Collab for submission details.\nMore information on the project will be available near the half-way point of the course.\n\n\nSpirit of the Course\nStudents must attend each class and participate in group work.\nFor the programming assignments and quizzes, you must submit your own work.\n\n\nSubmission of Assignments\nAll assignments must be submitted through Canvas or Gradescope by the specified due dates and times. It is crucial to complete all assigned work—failure to do so will likely result in failing the class."
  },
  {
    "objectID": "modules/m00/syllabus.html#grading",
    "href": "modules/m00/syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\nModel\nEvery assessment is equally important in this course.\nQuizes         20%\nHomework       20%\nProject        20%\nParticipation  20%\nFinal Exam     20%\n\n\n\nScale\nWe follow the 3-4-3 model of grading. That is, within each letter range, the \\(+\\) and \\(-\\) each span 3 values (\\([0,1,2]\\) and \\([7,8,9]\\) respectively), whereas the neutral grade spans the middle 4 values (\\([3,4,5,6]\\)).\nNote that it is by convention that we treat \\(0\\) in the \\(1\\)s place as standing for the initial value of a grade span, which leads to the anomaly of the A range having \\(11\\) values, since it includes both \\(90\\) and \\(100\\). Past experience shows that treating \\(90\\) as a B+ is considered an outrage by students, so we accept the weirdness :-)\nGrade     Min  Max\nA+        97 - 100\nA         93 - 96\nA-        90 - 92\nB+        87 - 89\nB         83 - 86\nB-        80 - 82 &#8592; minimum passing grade\n----------------- \nC+        77 - 79\nC         73 - 76\nC-        70 - 72"
  },
  {
    "objectID": "modules/m00/syllabus.html#texts",
    "href": "modules/m00/syllabus.html#texts",
    "title": "Syllabus",
    "section": "Texts",
    "text": "Texts\n\nCore Texts\nMany of our readings will draw from these texts. We will try to stick with some core texts to provide continuity. These will often be supplemented by shorter sources of information drawn from the web.\n\nLutz, 2013, Learning Python, 5th Edition, O’Reilly Media.\nMcKinney, 2017, Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython, 2nd Edition. O’Reilly Media.\nWickham and Grolemund, 2017, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data, 1st Edition. O’Reilly Media.\n\n\n\nOther Texts\nWe occasionally draw from the following texts. They are listed here as supplementary resources that you may want to use later on.\nFor R\nParts of some of these more be included in various modules.\n\nCotton, 2013, Learning R, O’Reilly Media.\nRodríguez, 2021, Introducing R, Princeton University faculty website.  This a concise website that may want to refer to in your Linear Models course.\nDouglas, et al 2022, An Introduction to R, self published.\nPeng, 2020, R Programming for Data Science, self published.\n\nFor Python\nOnce you get the hang of Python, you will want to embark on becoming a more effect data science software developer. These books can help.\n\nMatthis 2023, Python Crash Course, 3rd Edition. O’Reilly Media.\nBrett Slatkin, 2019, Effective Python: 90 Specific Ways to Write Better Python, 2nd Edition, Addison-Wesley.\nKatz, Philipp and David Katz, 2019, Learn Python by Building Data Science Applications, Packt Publishing.\nLee Vaughan, 2020, Real-World Python, No Starch Press.\n\n\n\nAccess to materials\nThis course uses a number of books from the O’Reilly Media’s online library. This is a commercial site, but as students of UVA, you have free access to it. To access the collection, first you must create an account on the site. See the document Setting up a student account on O’Reilly’s Site for help.\n\n\nWebsites\n\nPython’s official documentation\nPython’s official tutorial\nR’s official documentation\nW3Schools Python Tutorial\nW3Schools R Tutorial\nGeeksForGeeks on Python\nGeeksForGeeks on R\nTutorialspoint on Python\nTutorialspoint on R\n\n\n\nCheatsheets\n\nPython Cheatsheets\nRStudio Cheatsheets\n\n\n\nBooks to Broaden Your Horizons\n\nGraham, 2010, Hackers & Painters: Big Ideas from the Computer Age\nBrooks, 1995, The Mythical Man Month\nShetterly, 2016, Hidden Figures: The American Dream and the Untold Story of the Black Women Mathematicians Who Helped Win the Space Race"
  },
  {
    "objectID": "modules/m00/syllabus.html#academic-integrity",
    "href": "modules/m00/syllabus.html#academic-integrity",
    "title": "Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nThe School of Data Science relies upon and cherishes its community of trust. We firmly endorse, uphold, and embrace the University’s Honor principle that students will not lie, cheat, or steal, nor shall they tolerate those who do. We recognize that even one honor infraction can destroy an exemplary reputation that has taken years to build. Acting in a manner consistent with the principles of honor will benefit every member of the community both while enrolled in the School of Data Science and in the future.\nStudents are expected to be familiar with the university honor code, including the section on academic fraud.\nEach assignment will describe allowed collaborations, and deviations from these will be considered Honor violations. If you have questions on what is allowable, ask! Unless otherwise noted, exams and individual assignments will be considered pledged that you have neither given nor received help. (Among other things, this means that you are not allowed to describe problems on an exam to a student who has not taken it yet. You are not allowed to show exam papers to another student or view another student’s exam papers while working on an exam.) Sending, receiving or otherwise copying electronic files that are part of course assignments are not allowed collaborations (except for those explicitly allowed in assignment instructions). \nAssignments or exams where honor infractions or prohibited collaborations occur will receive a zero grade for that entire assignment or exam. Such infractions will also be submitted to the Honor Committee if that is appropriate. Students who have had prohibited collaborations may not be allowed to work with partners on remaining homework assignments. \nIf you have been identified as a Student Disability Access Center (SDAC) student, please let the Center know you are taking this class. If you suspect you should be an SDAC student, please schedule an appointment with them for an evaluation. I happily and discretely provide the recommended accommodations for those students identified by the SDAC. Please contact your instructor one week before an exam so we can make appropriate accommodations. Website: https://www.studenthealth.virginia.edu/sdac \nIf you are affected by a situation that falls within issues addressed by the SDAC and the instructor and staff are not informed about this in advance, this prevents us from helping during the semester, and it is unfair to request special considerations at the end of the term or a?er work is completed. So we request you inform the instructor as early in the term as possible your circumstances. If you have other special circumstances (athletics, other university-related activities, etc.) please contact your instructor and/or TA as soon as you know these may affect you in class."
  },
  {
    "objectID": "modules/m00/schedule.html",
    "href": "modules/m00/schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Week\nDay\nDate\nTopic\nAssessments\n\n\n\n\n01\nMon\n07/17\nM01 Getting Started\n\n\n\n02\nTue\n07/18\nM02 Introducing Python\n\n\n\n03\nWed\n07/19\nM03 Control Structures\n\n\n\n04\nThu\n07/20\nM04 Functions\n\n\n\n05\nFri\n07/21\nReview Day\n\n\n\n06\nMon\n07/24\nM05 NumPy\n\n\n\n07\nTue\n07/25\nM06 Pandas\n\n\n\n08\nWed\n07/26\nM07 Classes\n\n\n\n09\nThu\n07/27\nM08 Testing\n\n\n\n10\nFri\n07/28\nReview Day\n\n\n\n11\nMon\n07/31\nM09 Modules and Packages\n\n\n\n12\nTue\n08/01\nM10 Basic R\n\n\n\n13\nWed\n08/02\nM11 Dplyr\n\n\n\n14\nThu\n08/03\nFinal Projects\n\n\n\n15\nFri\n08/04\nReview Day\n\n\n\n16\nMon\n08/07\nM12 Visualization\n\n\n\n17\nTue\n08/08\nM13 Agile\n\n\n\n18\nWed\n08/09\nProjects\n\n\n\n19\nThu\n08/10\nProjects\n\n\n\n20\nFri\n08/11\nFinal Exam"
  },
  {
    "objectID": "modules/m01/m01-intro.html#topics",
    "href": "modules/m01/m01-intro.html#topics",
    "title": "M01 Getting Started",
    "section": "Topics",
    "text": "Topics\n\nIntroduce the course\nAccess Rivanna\nExplore the Unix command line\nExplore use of Git and GitHub"
  },
  {
    "objectID": "modules/m01/m01-intro.html#outcomes",
    "href": "modules/m01/m01-intro.html#outcomes",
    "title": "M01 Getting Started",
    "section": "Outcomes",
    "text": "Outcomes\n\nBecome familiar with UVA’s compute resources Rivanna\nBecome familiar with the command line, e.g. bash\nKnow the difference between Git and GitHub\nKnow how to fork and clone a repository for personal use\nKnow how to push content to a repository that you own\nKnow how to make a pull request to a repository that you don’t own"
  },
  {
    "objectID": "topics/rivanna.html#introduction",
    "href": "topics/rivanna.html#introduction",
    "title": "About Rivanna",
    "section": "Introduction",
    "text": "Introduction\nA useful infrastructural resource for this course is Rivanna, UVA’s high-performance computing (HPC) cluster. Each student has an account on Rivanna and access to resources there based on participation in this course. We will use Rivanna in our class for both Python and R. \nThis page describes some of the tools available for your use in this course. For information about Rivanna, see this introduction. Resources for getting help, including a knowledge base and ticket system, are found at the Support Option’s Page on UVA’s Research Computing website.\nYou may need to use VPN to access Rivanna from an off-grounds location. To install VPN on your computer, go to the ITS VPN page for instructions. Note that you should connect to “UVA Anywhere,” not to any of the higher security options. Course Allocation\nThis course has been allocated compute and space resources on Rivanna. The names of the resources are given below. The allocation ID needs to be entered to access certain tools. The storage path is accessible to you on the remote server.\n\nAllocation ID: msds_ds5100\nStorage path: /project/MSDS_DS5100  (Don’t use unless directed to.)"
  },
  {
    "objectID": "topics/rivanna.html#tools",
    "href": "topics/rivanna.html#tools",
    "title": "About Rivanna",
    "section": "Tools ",
    "text": "Tools \nUVA Research Computing provides you with a suite of tools to access Rivanna. These tools are accessible through the menu on the UVA OpenOnDemand Dashboard page. Below are some brief descriptions of the tools.\nFile Explorer. A web-based GUI to access the file system of the remote server. Can be used to create, move, and delete directories and files, and to edit the contents of files (see Editor). You can also upload and download files through this interface. The File Explorer is useful to view your remote content and manage files and directories without having to use the command line. Note that not all operations can be performed through this interface.\nFind under “Files” in the menu. \nEditor. A web-based text editor launched from the File Explorer to view and edit text files on the remote server.  Although not as sophisticated as VS Code (below), this is very useful for editing data and code files without having to use a command line editor. One advantage over VS Code is that it does not need to be launched – which means it does not time out like the Interactive Apps listed below.\nThe Editor is launched from the File Explorer.\nSSH Shell Access (Terminal). Access to the command line of the remote server.  Use this to open a terminal window to perform Linux commands directly.  Note that It is necessary to use a terminal to install and run certain programs on the remote server.\nFind under “Clusters” in the menu. \nYou can also access the remote command line via SSH on your local computer. Just enter the following on the command line of either a PC or Mac:\nssh -Y <userid>@hpc.rivanna.virginia.edu\nReplace <userid> with your UVA Net ID, e.g. abc2x. \nBe suer to be running VPN if you are accessing Rivanna from an off-grounds location."
  },
  {
    "objectID": "topics/rivanna.html#interactive-apps",
    "href": "topics/rivanna.html#interactive-apps",
    "title": "About Rivanna",
    "section": "Interactive Apps",
    "text": "Interactive Apps\nThese tools must be launched by specifying a set of parameters, including the allocation you are using. They are also timed and will close when time is up. Be sure to give yourself enough time when launching these, and to be aware of how much time you have when working.\nNote also that you should allocate the fewest resources necessary to do the work you plan to do. This saves resources on the remote host, but also allows your app to launch more quickly. If you ask for an excessive amount of resources, you may wait a long time (e.g. hours) to have your app launched.\nDesktop. Access to a GUI desktop to the remote server. This provides a access to various applications on the server, including a web browser, a file explorer, and terminal windows.  Using this is not necessary if you can get by with the tools listed above.\nFind under “Interactive Apps > Desktop” in the menu.\nVS Code. Access to Visual Studio Code on the remote server. This is a fully functional instance of the IDE.\nFind under “Interactive Apps > Code Server” in the menu.\nJupyter. Access to Jupyter Lab on the remote server. Find under “Interactive Apps > Jupyter Lab” in the menu.\nRStudio. Access to Jupyter Lab on the remote server.\nFind under “Interactive Apps > RStudio Server” in the menu."
  },
  {
    "objectID": "topics/rivanna.html#for-more-information",
    "href": "topics/rivanna.html#for-more-information",
    "title": "About Rivanna",
    "section": "For More Information",
    "text": "For More Information\nUVA’s Research Computing unit provides resources for learning how to use Rivanna. Here are two slide decks that you may find useful:\n\nIntroduction to Rivanna\nUsing Rivanna from the Command Line"
  },
  {
    "objectID": "topics/unix.html#introduction",
    "href": "topics/unix.html#introduction",
    "title": "Using Unix",
    "section": "Introduction",
    "text": "Introduction\nThe Unix family of operating systems provide users with a command line interface (CLI) to execute commands and get things done. They also, typically provide GUIs but we won’t go into those here.\nThe Unix family includes all varieties of Linux and the Mac OS (which is based on FreeBSD).\nThe command line that you actually interact with – the set of commands available to you – is called a shell, and there are several shells that you can run on your system. The most typical shell in use today is called bash which stands for Bourne Again Shell, since it is an improved version of bsh (The Bourne Shell). New versions of MacOS use the Z shell (zsh). The commands in these two shells are mostly similar, but there are subtle differences.\nWindows has shells too for its command line interface. The default shell is DOS, but is also has PowerShell  as an advanced (and very capable) option.\nFor more information, check out these resources:\n\nUVA Research Computing’s Unix tutorial.\nNewham, 2005, Learning the bash Shell, O’Reilly Media.\nJeroen Janssens, 2021, Data Science From the Command Line, O’Reilly Media.\nNeal Stephenson, 1999, In the Beginning Was The Command Line. (PDF version.)"
  },
  {
    "objectID": "topics/unix.html#basic-commands",
    "href": "topics/unix.html#basic-commands",
    "title": "Using Unix",
    "section": "Basic Commands",
    "text": "Basic Commands\nIn this course, you don’t need to know very many Unix shell commands, but you should be comfortable working from the command line to perform basic tasks. This is because some things can only be performed from the command line, such as installing some essential software. Here is a list of basic commands.\nNavigating filesystems and managing directories:\n\ncd – change directory\npwd – show the current directory\nln – make links and symlinks to files and directories\nmkdir – make new directory\nrmdir – remove directories in Unix\n\nNavigating filesystem and managing files and access permissions:\n\nls – list files and directories\ncp – copy files (work in progress)\nrm – remove files and directories (work in progress)\nmv – rename or move files and directories to another location\nchmod – change file/directory access permissions\nchown – change file/directory ownership"
  },
  {
    "objectID": "topics/unix.html#text-file-commands",
    "href": "topics/unix.html#text-file-commands",
    "title": "Using Unix",
    "section": "Text file commands",
    "text": "Text file commands\nMost of important configuration in Unix is in plain text files, these commands will let you quickly inspect files or view logs:\n\ncat – concatenate files and show contents to the standard output\nmore – basic pagination when viewing text files or parsing Unix commands output\nless – an improved pagination tool for viewing text files (better than more command)\nhead – show the first 10 lines of text file (you can specify any number of lines)\ntail – show the last 10 lines of text file (any number can be specified)\ngrep – search for patterns in text files"
  },
  {
    "objectID": "topics/unix.html#miscellaneous",
    "href": "topics/unix.html#miscellaneous",
    "title": "Using Unix",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nclear – clear screen\nhistory – show history of previous commands"
  },
  {
    "objectID": "topics/unix.html#command-line-cool",
    "href": "topics/unix.html#command-line-cool",
    "title": "Using Unix",
    "section": "Command Line Cool",
    "text": "Command Line Cool\nAlthough we will not be using the command line to this degree, you should know that it is a powerful environment for doing data science work. The book Data Science from the Command Line makes the case for using the command line to perform many tasks that we often perform with more resource intensive (i.e. bloated) tools such as Python and R.  At some point in your early DS career, you may want to look at this. The book itself is also a great introduction to data science!\n\nOne last thing – for fun you may want to read Neal Stephenson’s “In the Beginning Was The Command Line”, a kind of cyberpunk history of the topic. Stephenson, by the way, is the author who coined the term “metaverse” in the novel Snowcrash."
  },
  {
    "objectID": "topics/setting-up-ssh.html#overview",
    "href": "topics/setting-up-ssh.html#overview",
    "title": "SSH for GitHub",
    "section": "Overview",
    "text": "Overview\n\nThis method will allow you to interact with your repos hosted on GitHub without having to enter your login credentials each time.\nYou will create an SSH key on your local machine. By “local machine,” we mean the machine where you will be working and pulling to, e.g your laptop or Rivanna. In other words, it’s local relative to GitHub.\nSSH keys have a public and private component. These are hash strings that are stored in files. Both will be generated on your machine.\nYou will copy and paste the generate public key to your GitHub account.\nGoing forward, you will clone from your account using the SSH protocol."
  },
  {
    "objectID": "topics/setting-up-ssh.html#steps",
    "href": "topics/setting-up-ssh.html#steps",
    "title": "SSH for GitHub",
    "section": "Steps",
    "text": "Steps\n\nPart A\nOn your local machine\nGet to the command line (i.e. the shell).\n\nOn a Mac, open Terminal.\nIf you are on Windows and you have admin rights, first install git-bash. Otherwise follow this tutorial from Microsoft.\nOn Rivanna, either connect via SSH or use Rivanna Shell Access (under Clusters).\n\nMove into your root directory and enter cd.\nGenerate the key.\n\nEnter: ssh-keygen -t ed25519 -C \"your_email_id@example.com\", using your email address.\nBe sure to use the email address associated with your GitHub account in the above command.\n\nAt the prompt, type in a secure passphrase.\n\nYou don’t have to do this, but it is advised.\nCreate a memorable sentence.\nA good passphrase should have at least 15, preferably 20 characters and be difficult to guess. It should contain upper case letters, lower case letters, digits, and preferably at least one punctuation character.\n\nAdd the key to ssh-agent.\n\nEnter: eval \"$(ssh-agent -s)\"\nEnter: ssh-add ~/.ssh/id_ed25519\n\nIf you’re using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Follow the instructions here (at step 2).\n\n\nPart B\nOn your GitHub account\nGet the public key that was just generated.\n\nEnter: more ~/.ssh/id_ed25519.pub\nCopy the result to your clipboard (e.g. by blocking off the line and entering Ctrl-C).\nThe key should begin ssh-ed25519 and end with the email address you used in generating the key. In between it will have a long string of alphanumeric characters.\n\nOn GitHub, go to your account settings and select “SSH and GPG Keys” from the side menu.\n\nA link to your account settings can be found in the drop-down list produced by clicking on your user icon in the upper right of the website.\n\nUnder “SSH keys,” press the “New SSH Key” button.\n\nAdd a brief title describing the context of the key, i.e. the local machine where it was generated, e.g. Rivanna.\nChoose “Authentication Key” as the Key type.\nPaste the key into the Key text area.\nSubmit the form by pressing “Add SSH key.”\n\nYou are now good to go. Whenever you clone a site from your GitHub account, choose the SSH link."
  },
  {
    "objectID": "topics/setting-up-ssh.html#information-sources",
    "href": "topics/setting-up-ssh.html#information-sources",
    "title": "SSH for GitHub",
    "section": "Information Sources",
    "text": "Information Sources\nThe GitHub site has lots of excellent documentation. Here are some pages you may find useful.\n\nAbout SSH\nGenerate the key\nAbout pass phrases\nAdding the key to GitHub\nUpdating repos with SSH"
  },
  {
    "objectID": "topics/git-and-github.html#introduction",
    "href": "topics/git-and-github.html#introduction",
    "title": "Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:\n\nGit is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.\nGit does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories."
  },
  {
    "objectID": "topics/git-and-github.html#using-git-and-github-together",
    "href": "topics/git-and-github.html#using-git-and-github-together",
    "title": "Git and GitHub",
    "section": "Using Git and GitHub Together",
    "text": "Using Git and GitHub Together\n\n\n\nXKCD #1597\n\n\nSource\nA basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone <repo>\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add <filename>Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs. \n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\n\nHere is a visualization of the process:\n\n\n\nDiagram of common git workflow\n\n\nIn this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.\nNote also that the here “Remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo."
  },
  {
    "objectID": "topics/git-and-github.html#to-learn-more",
    "href": "topics/git-and-github.html#to-learn-more",
    "title": "Git and GitHub",
    "section": "To Learn More",
    "text": "To Learn More\n\nVideos\nBook"
  },
  {
    "objectID": "modules/m01/m01-using-rivanna.html",
    "href": "modules/m01/m01-using-rivanna.html",
    "title": "Activity: Using Rivanna",
    "section": "",
    "text": "After reading the previous documents on Rivanna and Unix, try this activity to get acquainted with the Rivanna high-performance computing cluster at UVA.\nTo get started, go to OpenOnDemand Dashboard page and from the main menu select Clusters → Rivanna Shell Access.\nThis should open a terminal to what is called the “shell” of the operating system.\n\n\n\nScreenshot of Rivanna shell\n\n\nRivanna uses Linux, a member of the Unix family of operating systems. Many cloud resources use Linux.\nUnderstanding how to do work from the command line on such systems is an essential skill of the data scientist.\nIf you have never used the command line, have no fear! Just enter the commands exactly as shown and ask questions in the Teams chat if you are stuck.\nNow, create a directory for your course and this course by entering the following commands:\ncd Documents \nmdkir MSDS \ncd MSDS \nmkdir DS5100 \ncd DS5100\nIf the Documents directory does not exist, create that first using the mkdir command.\n\ncd means “change directory,” and is a basic Unix command.\nmkdir means “make directory.” It’s also a basic Unix command.\n\nNote that you can use the tab key to complete path and command names as you type.\nYou don’t have to, but it would be a good idea to create subdirectories for any of your courses that use Rivanna.\nMore information about Unix shell commands can be found the document Unix Shell Commands."
  },
  {
    "objectID": "modules/m01/m01-activity-github.html#introduction",
    "href": "modules/m01/m01-activity-github.html#introduction",
    "title": "Activity: Using Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nIn this activity, you will go through steps of using Git and GitHub covered in the the reading on GitHub. You can also draw on the what you learned in the Technical Orientation. At this point, you also should be able check off the following items:\n\nUnderstand the difference between Git and GitHub.\nUnderstand the purpose of Git and Github for data science work.\nEnsure Git is installed on your computer.\nUnderstand how to find a repository on GitHub.\n\nLet’s apply and extend this knowledge now with our course repo.\nBe sure you are inside the course directory on Rivanna we created earlier.\nWe assume you have already created a GitHub account.\nAlso, before you get started, follow these instructions to set an SSH key. You can create this on both your computer and Rivanna, but for the assignment you need only create it on Rivanna.\nFork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-2023-07-R in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course repo — all of the course notebooks and other code will be available here. Each week, you will access your course materials here.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nImportant\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:<github_user_name>/DS5100-2023-07-R.git\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to clone the repo from your GitHub account, replacing <github_user_name> with your GitHub user name. Do not just cut-and-paste the line above!\n\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory notebooks/M01_GettingStarted/hello\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2023-07-R/notebooks/M01_GettingStarted/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called <userid>_hello.txt, replacing <userid> with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add <userid>_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nSince you have SSH set up, you can issue the following command without having to enter a password:\n\ngit push\n\n\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged."
  },
  {
    "objectID": "modules/m01/m01-activity-github.html#going-forward",
    "href": "modules/m01/m01-activity-github.html#going-forward",
    "title": "Activity: Using Git and GitHub",
    "section": "Going Forward",
    "text": "Going Forward\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will get course materials. This should be updated each day.\nYour Assessments Repo, which is where you will be your finished work as assigned."
  },
  {
    "objectID": "modules/m02/m02-intro.html#topics",
    "href": "modules/m02/m02-intro.html#topics",
    "title": "M02 Introducing Python",
    "section": "Topics",
    "text": "Topics\n\nRunning Python code.\nPython’s basic data types.\nPython’s primary operators associated with each data type.\nPython’s built-in data structures."
  },
  {
    "objectID": "modules/m02/m02-intro.html#outcomes",
    "href": "modules/m02/m02-intro.html#outcomes",
    "title": "M02 Introducing Python",
    "section": "Outcomes",
    "text": "Outcomes\n\nRun Python from the command line on Rivanna.\nCreate and run a Jupyter Notebook on Rivanna.\nDescribe the difference between data from the perspective of data science versus computer science.\nKnow the primary data types in Python and their basic operators.\nKnow the built-in list-like data structures in Python and the basic methods and functions associated with them."
  },
  {
    "objectID": "modules/m02/m02-intro.html#readings",
    "href": "modules/m02/m02-intro.html#readings",
    "title": "M02 Introducing Python",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nKatz and Katz 2019, Section 1, Preparing the Workspace\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 2\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 3\n\n\nLutz, Learning Python, Part II: Types and Operations, Chapters 4–9\n\n\n\n\nOptional\n\n\nKatz and Katz 2019, Section 1, First Steps in Coding - Variables and Data Types\n\n\nBuilt-in Types (Official)\n\n\nPython Data Types (GFG)\n\n\nPython Operators (W3S)\n\n\nImmutable vs Mutable Data Types in Python (Medium)"
  },
  {
    "objectID": "topics/on-data.html#code-should-be-simple",
    "href": "topics/on-data.html#code-should-be-simple",
    "title": "Data and Code",
    "section": "Code should be simple",
    "text": "Code should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.\n\nA contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured."
  },
  {
    "objectID": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "href": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "title": "Data and Code",
    "section": "Simplicity of code follows from the structure of data",
    "text": "Simplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible."
  },
  {
    "objectID": "topics/on-data.html#supporting-references",
    "href": "topics/on-data.html#supporting-references",
    "title": "Data and Code",
    "section": "Supporting References",
    "text": "Supporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious."
  },
  {
    "objectID": "topics/python-object-types.html",
    "href": "topics/python-object-types.html",
    "title": "Python Object Types",
    "section": "",
    "text": "Python is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\nData types and data structures are kinds of objects."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "href": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "title": "Activity: Hello, World!",
    "section": "The Python Interactive Shell",
    "text": "The Python Interactive Shell\nLog onto the Rivanna shell and move into in the course directory you created for this class.\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the >>> prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)"
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#try-this",
    "href": "modules/m02/m02-activity-hello-world.html#try-this",
    "title": "Activity: Hello, World!",
    "section": "Try this",
    "text": "Try this\nNow, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#running-python-files",
    "href": "modules/m02/m02-activity-hello-world.html#running-python-files",
    "title": "Activity: Hello, World!",
    "section": "Running Python Files",
    "text": "Running Python Files\nNow create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python."
  },
  {
    "objectID": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "href": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "title": "Activity: Jupyter Lab",
    "section": "",
    "text": "Now that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session. Your form should have the following values:\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that you may increase the number of hours, cores, and megabytes of RAM, but asking for too much will increase the time it takes to start your session. So select just the resources needed and enter our course allocation msds_ds5100 if this value is different than in the image above).\n\n\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class — one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "",
    "text": "Python Data Types\nWe declare a number of variables with different value types.\nBy ‘type’ we mean object type.\nData types and data structures are both types of object.\nData types are created by the way they are written or as keywords …\nHere is a series of literal values (called literals):\nIntegers\nFloats (decimals)\nStrings\nType of quote does not matter, but they must be straight quotes, not “smart quotes” that some word processors use.\nNote that there is no explicit character type as in Java and other languages.\nBoolean\nNothing\nIt evaluates to nothing!\nComplex\nFor the physicists and signal processors.\nYou can always find out what kind of type you are working with by calling the type() function.\nData are assigned to variables using the assignment operator =.\nThe variable is always on the left, the value assigned to it on the right.\nThis is not the same as mathemtical equality.\nVariables are assigned types dynamically.\nThis is in contrast to static typing, where you have define variables by asserting what kind of data values they can hold.\nPython figures out what type of data is being set to the variable and implicitly stores that info.\nNote that type() returns the type of the value that a variable holds, not the type “variable”.\nYou can’t delete values!\nThis function returns the identity of an object.\nThe identity is a number that is guaranteed to be unique and constant for this object during its lifetime (during the program session).\nYou can think of it as the address of the object in memory.\nIt is possible to convert between types (when it makes sense to do so).\nSometimes conversions are “lossy” – you lose information in the process\nIf variables are nouns, and values meanings, then operators are verbs.\nIn effect, they are elementary functions that are expressed in sequential syntax.\na + b could have been expressed as add(a, b).\nBasically, each data type is associated with a set of operators that allow you to manipulate the data in way that makes sense for its type. Numeric data types are subject to mathematical operations, booleans to logical ones, and so forth.\nThere are also operations appropriate to structures. For example, list-like things have membership.\nThe relationship between types and operators is a microcosm of the relationship betweed data structures and algorithms. Data structures imply algorithms and algorithms assume data structures.\nThe w3schools site has a good summary.\nHere are some you may not have seen.\nPython offers a short-cut for most operators. When updating a variable with an operation to that variable, such as:\nYou can do this:\nPython supports many operators this way. Here are some:\nVariables, literal values, and operators are the building blocks of ebxpressions.\nFor example, the following combines three operators and four variables:\nPython employs operator precedence when evaluating expressions:\nYou can use parentheses to group them to force the order of operations you want:\nVariables and literal values can be combined:\nExpresssion can be very complex.\nExpressions evaluate to a value, just as single variables do.\nTherefore, they can be put anywhere a value is accepted."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "int()",
    "text": "int()\n\nint?\n\nInit signature: int(self, /, *args, **kwargs)\nDocstring:     \nint([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4\nType:           type\nSubclasses:     bool, IntEnum, IntFlag, _NamedIntConstant\n\n\nFloat to Int\n\nval = 3.8\nprint(val, type(val))\n\n3.8 <class 'float'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\n3 <class 'int'>\n\n\nString to Float\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = float(val)\nprint(val_int, type(val_int))\n\n3.8 <class 'float'>\n\n\nConverting string decimal to integer will fail:\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\nValueError: invalid literal for int() with base 10: '3.8'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "ord()",
    "text": "ord()\nConverting a character to it’s code point\n\nord?\n\nSignature: ord(c, /)\nDocstring: Return the Unicode code point for a one-character string.\nType:      builtin_function_or_method\n\n\n\nord('a'), ord('A')\n\n(97, 65)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\nfloor division //\n\n5 // 2\n\n2\n\n\n\n-5 // 2\n\n-3\n\n\n\n5.5 // 2\n\n2.0\n\n\n\n\nmodulus %\nReturns the remainder\n\n5 % 2\n\n1\n\n\nodd integers % 2 = 1\neven integers % 2 = 0\nLook at this …\n\n5.5 / 2, 5.5 // 2, 5.5 % 2\n\n(2.75, 2.0, 1.5)\n\n\n\n\nexponentiation **\n\n5**3\n\n125"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "String Operators",
    "text": "String Operators\n\nconcatenation +\nThe plus sign is an ovderloaded operator in Python.\n\nmyString = 'This: '\n\n\nmy2ndString = myString + ' Goodbye, world!'\n\n\nmy2ndString\n\n'This:  Goodbye, world!'\n\n\n\n\nrepetition *\n\n# print('-' * 80)\n\n\nmyString*2                     \n\n'This: This: '\n\n\n\nmyString * 5\n\n'This: This: This: This: This: '\n\n\n\nbart_S1E3 = 'I will not skateboard in the halls'\n\n\nprint((bart_S1E3 + '\\n') * 5)\n\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\n\n\n\n\nprint('-' * 80)\n\n--------------------------------------------------------------------------------\n\n\nSee them all :-)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Assignment Operator =",
    "text": "Assignment Operator =\nWe’ve used this already, but it too is an operator.\n\nepoch = 20\nprint('epoch:', epoch)\n\nepoch: 20"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nComparisons are questions.\nThey return a boolean value.\n\nequality ==\n\n0 == (10 % 5)\n\nTrue\n\n\n\n'Boo' == 'Hoo'\n\nFalse\n\n\nCan we compare strings\n\n'A' < 'B'\n\nTrue\n\n\n\nord('A'), ord('B')\n\n(65, 66)\n\n\n\n\ninequality !=\n\n5/9 != 0.5555\n\nTrue"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Logical Operators",
    "text": "Logical Operators\nPython uses words where other languages will use other symbols.\n\nConjunctions and, or, not\nNote the we group comparisons with parentheses.\n\nx = 10\n\n(x % 10 == 0) or (x < -1)\n\nTrue\n\n\n\n(x % 10 == 0) and (x < -1)\n\nFalse\n\n\n\nnot x == 5\n\nTrue\n\n\n\n\nIdentity is\nThe is keyword is used to test if two variables refer to the same object.\nThe test returns True if the two objects are the same object.\nThe test returns False if they are not the same object, even if the two objects are 100% equal.\nUse the == operator to test if two variables are equal.\n– from W3Schools on Identity Operators\nis\n\nx = 'fail'\n\n\nx is 'fail'\n\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1139635342.py:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  x is 'fail'\n\n\nTrue\n\n\nis not\n\nx is not 'fail'\n\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1754352910.py:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  x is not 'fail'\n\n\nFalse\n\n\n\nx = 'foo'\ny = 'foo'\nx is y\n\nTrue\n\n\n\nx = ['a']\ny = ['a']\nx is y\n\nFalse\n\n\n\n\nNegation not\n\nnot True, not False, not 0, not 1, not 1000, not None\n\n(False, True, True, False, False, True)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "title": "NB: Numbers",
    "section": "",
    "text": "Built-in Functions\nThese are built-in mathematical functions for numbers.\nSee the Python docs on the math library.\nSee random — Generate pseudo-random numbers for more info."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "title": "NB: Numbers",
    "section": "pow() Power",
    "text": "pow() Power\n\npow(2,3) # 2 raised to 3 = 8"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "title": "NB: Numbers",
    "section": "abs() Absolute value",
    "text": "abs() Absolute value\n\nabs(-2) # returns 2, the absolute value of its argument"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "title": "NB: Numbers",
    "section": "round() Round",
    "text": "round() Round\nRounding up or down its argument (to closest whole number).\n\nround(2.8) # rounds up to 3.0\n\n3\n\n\n\nround(1.1) # rounds down to 1.0\n\n1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "title": "NB: Numbers",
    "section": "math.sqrt() Square root",
    "text": "math.sqrt() Square root\n\nmath.sqrt?\n\nSignature: math.sqrt(x, /)\nDocstring: Return the square root of x.\nType:      builtin_function_or_method\n\n\n\n# sqrt(intOne)\n\n\nmath.sqrt(12) # using the square-root function from the math library\n\n3.4641016151377544\n\n\n\nprint(math.floor(2.5)) # returns largest whole number less than the argument\nprint(math.floor(2.9))\nprint(math.floor(2.1))\n\n2\n2\n2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "title": "NB: Numbers",
    "section": "math.log()",
    "text": "math.log()\n\nmath.log?\n\n\nmath.log(100, 10)\n\n\nmath.log(256, 2)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "title": "NB: Numbers",
    "section": "random.random()",
    "text": "random.random()\n\nrandom.random?\n\n\nprint(random.random()) # using random() function in random library\n    # will return a number between 0 and 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "title": "NB: Numbers",
    "section": "random.randint()",
    "text": "random.randint()\n\nrandom.randint?\n\n\nprint(random.randint(1,100)) # specify a range in the parenthesis\n    # this will return a random integer in the range 1-100"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "href": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "title": "NB: Booleans",
    "section": "",
    "text": "A boolean value takes one of True or False, which are built-in values\ncheck if cache is True, using if statement\nif statement using a bool evaluates to True or False\n\ncache = True\n\nif cache:\n   print('data will be cached')\n\ndata will be cached\n\n\n\nprint(type(cache))\n\n<class 'bool'>\n\n\nBooleans are frequently used in if/then statements.\nWe’ll cover these later.\n\ncache = True\noome = False\n\nif cache or oome:\n    print('condition met!')\nelse:\n    print(\"No dice.\")\n\nAND statements will short circuit if an early condition fails.\n\nif oome and cache:\n    print('condition met!')\n\nIn this case, since oome is False, the check on cache never happens."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "title": "NB: Strings",
    "section": "",
    "text": "Kinds of quotes\nStrings are signified by quotes.\nSingle and double quotes are identical in function.\nThey must be “straight quotes” though – cutting and pasting from a Word document with smart quotes won’t work.\nPython uses a print function.\nPython supports special “escape characters” in strings that produce effects when printed.\nNote that these are not unique to Python. They are part of almost all languages.\nThe print function puts spaces between strings and a newline at the end, but you can change that:\nComments are lines of code that aren’t read by the interpreter.\nThey are used to explain blocks of code, or to remove code from execution when debugging.\nThese following are multiline strings that can serve as comments:\nNote that multiline comments also evaluate as values.\nActually, they are list-like.\nHere are some functions applicable to strings because they are lists."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "title": "NB: Strings",
    "section": "Quote prefixes",
    "text": "Quote prefixes\n\nr strings\nPrefixing a string causes escape characters to be uninterpreted.\n\nprint(\"Sentence one.\\nSentence two.\")\n\n\nprint(r\"Sentence one.\\nSentence two.\")\n\n\n\nf strings\nPrefixing a string with f allows variable interpolation – inplace evaluation of variables in strings.\n\nppl = 'knights'\ngreeting = 'Ni'\n\n\nprint(f'We are the {ppl} who say {greeting}!') # Output: We are the knights who say Ni!\n\nThe brackets and characters within them (called format fields) are replaced with the passed objects.\n\nprint(b\"This is a sentence.\")\n\n\nprint(\"This is a sentence.\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "title": "NB: Strings",
    "section": ".lower(), .upper()",
    "text": ".lower(), .upper()\n\n'BOB'.lower() #.upper()\n\n'bob'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "title": "NB: Strings",
    "section": ".split()",
    "text": ".split()\nParase a string based on a delimiter, which defaults to whitespace.\nNOTE: This does not use regular expressions.\nThis returns a list.\n\nmontyPythonQuote = 'are.you.suggesting.coconuts.migrate'\n\n\n'are.you.suggesting.coconuts.migrate'.split('.')\n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']\n\n\n\nmontyPythonQuote\n\n'are.you.suggesting.coconuts.migrate'\n\n\n\nmontyPythonQuote.split('.') # split by the '.' delimiter. Result: a list!\n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "title": "NB: Strings",
    "section": ".strip(), .rstrip(), lstrip() Strip methods",
    "text": ".strip(), .rstrip(), lstrip() Strip methods\nStrip out extra whitespace using strip(), rstrip() and lstrip() functions\n.strip() removes white space from anywhere\n.rstrip() only removes white space from the right-hand-side of the string\n.lstrip() only removes white space from the left-hand-side of the string\n\nstr1 = '  hello, world!'    # white space at the beginning\nstr2 = '  hello, world!  '  # white space at both ends\nstr3 = 'hello, world!  '    # white space at the end\n\n\nstr1, str2, str3\n\n\nstr1.lstrip(), str1.rstrip()\n\n\nstr2.strip(), str2.rstrip()\n\n\nstr2.lstrip(), str3.rstrip()\n\n\nstatus.startswith('a')\n\n\nstatus.endswith('s')"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "title": "NB: Strings",
    "section": ".replace()",
    "text": ".replace()\n\n\"latina\".replace(\"a\", \"x\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "title": "NB: Strings",
    "section": ".format()",
    "text": ".format()\nVariable values can be embedding in strings using the format() function.\nPlace {} in the string in order from left to right. followed by .format(var1, var2, ...)`\n\nepoch = 20\nloss = 1.55\n\nprint('Epoch: {}, loss: {}'.format(epoch, loss))\n\nThis breaks, as three variables are required based on number of {}\n\nprint('Epoch: {}, loop: {}, loss: {}'.format(epoch, loss))"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "title": "NB: Strings",
    "section": ".zfill()",
    "text": ".zfill()\nBasic usage of the str.zfill() method (pads a numeric string on the left with zeros) It understands about plus and minus signs\n\nprint('12'.zfill(5))       # Output: 00012\nprint('-3.14'.zfill(7))    # Output: -003.14\nprint('3.141592'.zfill(5)) # Output: 3.141592"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "title": "NB: Strings",
    "section": "len() Length",
    "text": "len() Length\nThis is built-in length funciton tells us how many characters in the string.\nIt also applys to any list-like object, including strings, lists, dicts, sets, and dataframes.\n\nlen?\n\n\nmy_new_tring = 'This is a string'\n\n\nlen(my_new_tring)\n\n\nIndexing\nSince strings are sequences in Python, each character of the string has a unique position that can be indexed.\nIndexes are indicated by suffixed brackets, e.g. foo[]\n\nmy_new_tring[0] # displays the first character of the string\n            # first position is position zero. Will display 'h'\n\n\nmy_new_tring[-1] # displays the last character. Negatives count backwords.\n\n\n\nSlicing\nWe can used the colon to ‘slice’ strings (and lists)\n\nmy_new_tring[0:4] # First four characters (index positions 0-3)\n\n\nmy_new_tring[:4]  # Beginning (0) to (n-1) position\n\n\nmy_new_tring[4:]  # Fifth character and onwards until the end of the string\n\nit is NOT possible to reassign elements of a string. Python strings are immutable.\n\nstatus = 'success'\nstatus[0] = 't'\n\nAdd strings and handle pathing"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "title": "NB: Structures",
    "section": "",
    "text": "Lists\nA list is an ordered sequence of items.\nEach element of a list is associated with an integer that represents the order in which the element appears.\nLists are indexed with brackets [].\nList elements are accessed by providing their order number in the brackets.\nLists are mutable, meaning you can modify them after they have been created.\nThey can contain mixed types.\nLike a hash table.\nHas key-value pairs.\nElements are indexed using brackets [] (like lists).\nBut they are constructed used braces {}.\nKey names are unique. If you re-use a key, you overwrite its value.\nKeys don’t have to be strings – they can be numbers or tuples or expressions that evaluate to one of these.\nA tuple is like a list but with one big difference: a tuple is an immutable object!\nYou can’t change a tuple once it’s created.\nA tuple can contain any number of elements of any datatype.\nAccessed with brackets [] but constructed with parentheses ().\nA set is an unordered collection of unique objects.\nThey are subject to set operations.\nNote the set is deduped\nSince sets are unordered, they don’t have an index. This will break:\nCheck if a value is in the set using in\nCombine two sets\nThis fails:\nThis succeeds:\nGet the set intersection\nA range is a sequence of integers, from start to stop by step. - The start point is zero by default.\n- The step is one by default.\n- The stop point is NOT included.\nRanges can be assigned to a variable.\nMore often, ranges are used in iterations, which we will cover later.\nanother range:\nVery often you will want to build a dictionary from some data source, and add keys as they appear. The default dict type in Python, however, requires that the key exists before you can mutate it. The defaultdict type in the collections module solves this problem. Here’s an example."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nThey can be constructed in several ways:\n\nlist1 = []\nlist2 = list()\nlist3 = \"some string\".split()\nnumbers = [1,2,3,4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "title": "NB: Structures",
    "section": "Indexing",
    "text": "Indexing\nZero-based indexing\nPython uses xzero-based indexing, which means for a collection mylist\nmylist[0] references the first element\nmylist[1] references the second element, etc\nFor any iterable object of length N:\nmylist[:n] will return the first n elements from index 0 to n-1\nmylist[-n:] will return the last n elements from index N-n to N-1\n\nnumbers[0] # Access first element (output: 1)\n\n1\n\n\n\nnumbers[-1]\n\n4\n\n\n\nnumbers[0] + numbers[3] # doing arithmetic with the values (output: 5)\n\n5\n\n\n\nnumbers[len(numbers)]\n\nIndexError: list index out of range"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "title": "NB: Structures",
    "section": "Slicing",
    "text": "Slicing\n\nnumbers[0:2] # Output: [1, 2]\n\n[1, 2]\n\n\n\nnumbers[1:3] # Output: [2, 3]\n\n[2, 3]\n\n\n\nlen(numbers) # use len() function to find the size. Output: 4\n\n4\n\n\n\nnumbers[2:]  # Output: [3, 4]\n\n[3, 4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "title": "NB: Structures",
    "section": "Multiply lists by a scalar",
    "text": "Multiply lists by a scalar\nA scalar is a single value number.\n\nnumbers * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "title": "NB: Structures",
    "section": "Concatenate lists with +",
    "text": "Concatenate lists with +\n\nnumbers2 = [30, 40, 50]\n\n\nnumbers + numbers2 # concatenate two lists"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "title": "NB: Structures",
    "section": "Lists can mix types",
    "text": "Lists can mix types\n\nmyList = ['coconuts', 777, 7.25, 'Sir Robin', 80.0, True]\n\n\nmyList\n\nWhat happens if we multiply a list with strings?\n\n# myList * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "title": "NB: Structures",
    "section": "Lists can be nested",
    "text": "Lists can be nested\n\nnames = ['Darrell', 'Clayton', ['Billie', 'Arthur'], 'Samantha']\nnames[2] # returns a *list*\nnames[0] # returns a *string*\n\ncannot subset into a float, will break\n\nnames[2][0]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "title": "NB: Structures",
    "section": "Lists can concatenated with +",
    "text": "Lists can concatenated with +\n\nvariables = ['x1', 'x2', 'x3']\nresponse = ['y']\n\n\nvariables + response\n\n['x1', 'x2', 'x3', 'y']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\n\ndict1 = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\n\ndict2 = dict(x=55, y=29, z=99) # Note the absence of quotes around keys\n\n\ndict2\n\n{'x': 55, 'y': 29, 'z': 99}\n\n\n\ndict3 = {'A': 'foo', 99: 'bar', (1,2): 'baz'}\n\n\ndict3\n\n{'A': 'foo', 99: 'bar', (1, 2): 'baz'}"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "title": "NB: Structures",
    "section": "Retrieve a value",
    "text": "Retrieve a value\nJust write a key as the index.\n\nphonelist = {'Tom':123, 'Bob':456, 'Sam':897}\n\n\nphonelist['Bob']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "title": "NB: Structures",
    "section": "Print list of keys, values, or both",
    "text": "Print list of keys, values, or both\nUse the .keys(), .values()', or.items()` methods.\nKeys are not sorted. For example, they are not ordered in order in which they were added.\n\nphonelist.keys() # Returns a list\n\n\nphonelist.values() # Returns a list\n\n\nphonelist.items() # Returns a list of tuples\n\n\nphonelist # note the data returned is not the same as the data entered"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nCreated with comma-separated values, with or without parenthesis.\n\nletters = 'a', 'b', 'c', 'd'\n\n\nletters\n\n\nnumbers = (1,2,3,4) # numbers 1,2,3,4 stored in a tuple\n\nA single valued tuple must include a comma ,, e.g.\n\ntuple0 = (29)\n\n\ntuple0, type(tuple0)\n\n\ntuple1 = (29,)\n\n\ntuple1, type(tuple1)\n\n\nlen(numbers)\n\n\nnumbers[0] = 5 # Trying to assign a new value 5 to the first position"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "title": "NB: Structures",
    "section": "Membership with in",
    "text": "Membership with in\nReturns a boolean.\n\n'Sam' in phonelist"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "title": "NB: Structures",
    "section": "Try with dict",
    "text": "Try with dict\n\nwords = {}\nfor word in source_data:\n    words[word] += 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "title": "NB: Structures",
    "section": "Use try and except",
    "text": "Use try and except\n\nfor word in source_data:\n    try:\n        words[word] += 1\n    except KeyError:\n        words[word] = 1\n\n\nwords"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "title": "NB: Structures",
    "section": "Or use .get()",
    "text": "Or use .get()\n\nfor word in source_data:\n    words[word] = words.get(word, 0) + 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "title": "NB: Structures",
    "section": "Use collections.defaultdict",
    "text": "Use collections.defaultdict\n\nfrom collections import defaultdict\n\n\nwords2 = defaultdict(int) # Not the type must be set\n\n\nfor word in source_data:\n    words2[word] += 1\n\n\nwords2"
  },
  {
    "objectID": "modules/m03/m03-intro.html#topics",
    "href": "modules/m03/m03-intro.html#topics",
    "title": "M03 Control Structures",
    "section": "Topics",
    "text": "Topics\n\nMore on Statements and Syntax\nControl Structures and Loops\nIterators\nComprehensions"
  },
  {
    "objectID": "modules/m03/m03-intro.html#outcomes",
    "href": "modules/m03/m03-intro.html#outcomes",
    "title": "M03 Control Structures",
    "section": "Outcomes",
    "text": "Outcomes\n\nRecognize primary control structures available in Python and their basic use cases\nWrite comprehensions for each of Python’s list-like data structures\nRecognize when iterators are used by Python functions (such as open())\nUnderstand basic conditional logic statements and their role in designing data flow in a program"
  },
  {
    "objectID": "modules/m03/m03-intro.html#readings",
    "href": "modules/m03/m03-intro.html#readings",
    "title": "M03 Control Structures",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz, 2019, Part III, Chapter 10. Introducing Python Statements\n\n\nLutz, 2019, Part III, Chapter 11. Assignments, Expressions, and Prints Read only up to and including “The Python 3.X print Function.”\n\n\nLutz, 2019, Part III, Chapter 12. if Tests and Syntax Rules\n\n\nLutz, 2019, Part III, Chapter 13. while and for Loops\n\n\nLutz, 2019, Part III, Chapter 14. Iterations and Comprehensions\n\n\nLutz, 2019, Part III, Chapter 15: The Documentations Interlude\n\n\n\n\nOptional\n\n\nVariables, Expressions, Statements, Types (Python Notes)\n\n\nMore Control Flow Tools (Python Docs)\n\n\nIf … Then (W3S)\n\n\nIterators (GFG)"
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#definitions",
    "href": "topics/vals-vars-expressions-statements.html#definitions",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "Definitions",
    "text": "Definitions\n\nValues: Raw data elements represented in a program, e.g. numbers and strings.\nVariables: Names to which values are assigned.\nExpressions: Combinations of values, variables, operators, functions, and other expressions that evaluate to a value.\nStatements: Groupings of expressions that produce some result. Statements do things."
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#statement-types",
    "href": "topics/vals-vars-expressions-statements.html#statement-types",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "Statement Types",
    "text": "Statement Types\nSee Statement Types in Lutz."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "title": "NB: Control Structures",
    "section": "Introducing Control Structures",
    "text": "Introducing Control Structures\nPython includes structures to control the flow of a program:\n\nconditions (if, else)\nloops\n\nwhile-loop\nExecute statements while a condition is true\nfor-loop\nIterates over a iterable object (list, tuple, dict, set, string)"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "title": "NB: Control Structures",
    "section": "Indentation",
    "text": "Indentation\nThis is where Python differs from most languages. To define control structures,\nand functional blocks of code in general, most languages use either characters like braces { and } or key words like IF ... END IF.\nPython uses tabs – spaces, actually – to signify logical blocks off code.\nIt is therefore imperative to understand and get a feel for indentation. For more information, see Lutz 2019, “A Tale of Two Ifs.”"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "title": "NB: Control Structures",
    "section": "Conditions",
    "text": "Conditions\n\nif and else can be used for conditional processing.\n\nval = -2\n\nif val >= 0:\n    print(val)\nelse:\n    print(-val)\n\n2\n\n\n\n\nelif\nelif is reached when the previous statements are not.\n\nval = -2\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nbucket 3\n\n\n\n\nelse\nelse can be used as a catchall\n\nval = 5\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4\n\n\n\n\nif and else as one-liners\n\nx = 3\nprint('odd') if x % 2 == 1 else print('even')\n\nodd\n\n\nNotice == for checking the condition x % 2 == 1.\nboth if and else are required. This breaks:\n\nprint('odd') if x % 2 == 1\n\nSyntaxError: invalid syntax (471325368.py, line 1)\n\n\n\n\nUsing multiple conditions\nIf statements can be complex combinations of expressions.\nUse parentheses carefully, to keep order of operations correct.\n\n## correct\n\nval = 2\n\nif (-2 < val < 2) or (val > 10):\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 2\n\n\n\n## incorrect - misplaced parenthesis\n\nif (-2 < val) < 2 or val > 10:\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 1\n\n\nand this is because True < 2, as True is cast to integer value 1\nthis is not the desired result…but does it make sense?"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "title": "NB: Control Structures",
    "section": "Loops",
    "text": "Loops\n\nwhile\nWhat does this print?\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\nprint(ix)\n\n16\n\n\n\n\nbreak to exit the loop altogether\nsometimes you want to quit the loop early, if some condition is met.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        break\nprint(ix)\n\n4\n\n\nThe break causes the loop to end early\n\n\ncontinue to stop the current iteration\nsometimes you want to introduce skipping behavior in the loop.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        print('skipping 4...')\n        continue\n    print(ix)\n\n2\nskipping 4...\n8\n16\n\n\nThe continue causes the loop to skip printing 4\n\n\nfor\niterate over an iterable\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nsf\nbos\nla\n\n\nquit early if SF reached, using break\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        break\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\n\n\nskip over SF if reached, using continue\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        continue\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nbos\nla"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "title": "NB: Control Structures",
    "section": "while vs for",
    "text": "while vs for\nFor loops are used to loop through a list of values or an operation in which the number of iterations is known in advance.\nWhile loops are when you don’t know how many interations it will take – you are depending on some condition to be met.\nIt is possible for while loops to be unending, for example:\nwhile 1:\n    print(\"This is so annoying\")"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "title": "NB: Iterables and Iterators",
    "section": "",
    "text": "Defining Iterables and Iterators\nIterable objects or iterables can return elements one at a time.\nAn iterator is an object that iterates over iterable objects such as sets, lists, tuples, dictionaries, and strings.\nIteration can be implemented: - with a for loops - with the next() method\nNext, we show examples for various iterables.\nWe iterated over a list. Next we will illustrate for other iterables: str, tuple, set, dict\nlists, tuples, and strings are sequences. Sequences are designed so that elements come out of them in the same order they were put in.\nSets and dictionaries are not sequences, since they don’t keep elements in order. They are called collections. The ordering of the items is arbitrary.\nNOTE: This has changed for dictionaries in Python 3.7: > the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec.\n– What’s New in Python 3.7\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\nAlternatively, keys and values can be extracted from the dict by: - looping over the keys - extract the value by indexing into the dict with the key\niterating using for\nIf you just want to iterate for a known number of times, use range().\nVery often you will want to know iteration number you are on in a loop.\nThis can be used to name files or dict keys, for example.\nenumerate() will return the index and key for each iteration.\nIterations can be nested!\nThis works well with nested data structures, like dicts within dicts.\nThis is basically how JSON files are handled, BTW.\nBe careful, though – these can get deep and complicated.\niterating using iter() and next()"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using for",
    "text": "iterating using for\n\ntokens = ['living room', 'was', 'quite', 'large']\n\nfor tok in tokens:\n    print(tok)\n\nliving room\nwas\nquite\nlarge"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using iter() and next()",
    "text": "iterating using iter() and next()\niter() gets an iterator. Pops out a value each time it’s used.\nnext() gets the next item from the iterator\n\ntokens = ['living room','was','quite','large']\nmyit = iter(tokens)\nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \n\nliving room\nwas\nquite\nlarge\n\n\nCalling next() when the iterator has reached the end of the list produces an exception:\n\nprint(next(myit))\n\nStopIteration: \n\n\nNext, look at the type of the iterator, and the documentation\n\ntype(myit)\n\nlist_iterator\n\n\n\n# help(myit)\n\n\nhelp(next)\n\nHelp on built-in function next in module builtins:\n\nnext(...)\n    next(iterator[, default])\n    \n    Return the next item from the iterator. If default is given and the iterator\n    is exhausted, it is returned instead of raising StopIteration.\n\n\n\nNote that for implicitly creates an iterator and executes next() on each loop iteration. This is best way to iterate through a list-like object."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "title": "NB: Comprehensions",
    "section": "",
    "text": "List Comprehensions\nConsider this task: check if each integer in a list is odd.\nWithout list comprehensions, you might do this:\nComprehensions provide a concise method for iterating over any list-like object to a new list like object.\nThere are comprehensions for each list-like object: * List comprehensions * Dictionary comprehensions * Tuple comprehensions * Set comprehensions\nComprehensions are essentially very concise for loops. They are compact visually, but they also are more efficient than loops.\nAll comprehensions have the form:\nlistlike_result = [ expression + context]\nThe type of comprehension is indicated by the use of enclosing pairs, just like anonymous constructors:\nExpression defines what to do with each element in the list. This has the structure of the kind of comprehension. So, dictionary comprehension expressions take the form k:v while sets use v.\nContext defines which list elements to select. The context always consists of an arbitrary number of for and if statements.\nDictionary comprehensions provide a concise method for iterating over a dictionary to create a new dictionary.\nThis is common when data is structured as key-value pairs, and we’d like to filter the dict.\nWe build the key-value pairs using key:model_arch[key], where the key indexes into the dict model_arch"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "title": "NB: Comprehensions",
    "section": "Check if Odd",
    "text": "Check if Odd\n\nvals = [1,5,6,8,12,15]\nis_odd = []\n\nfor val in vals:   \n    if val % 2: # if remainder is one, val is odd\n        is_odd.append(True)\n    else:       # else it's not odd\n        is_odd.append(False)\n\nis_odd\n\n[True, True, False, False, False, True]\n\n\nThe code loops over each value in the list, checks the condition, and appends to a new list.\nThe code works, but it’s lengthy compared to a list comprehension.\nThe approach takes extra time to write and understand.\nLet’s solve with a list comprehension:\n\nis_odd = [val % 2 == 1 for val in vals]\nis_odd\n\n[True, True, False, False, False, True]\n\n\nMuch shorter, and if you understand the syntax, quicker to interpet.\nNote the in-place use of an expression.\nNow let’s discuss the syntax."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "title": "NB: Comprehensions",
    "section": "Stop Word Remover",
    "text": "Stop Word Remover\nCreate list of words, and list of stop words.\nFilter out the stop words (considered not important).\n\nstop_words = ['a','am','an','i','the','of']\nwords      = ['i','am','not','a','fan','of','the','film']\n\nclean_words = [wd for wd in words if wd not in stop_words]\nclean_words\n\n['not', 'fan', 'film']\n\n\nplacing the color-coding on the list comprehension:\n[ wd   for wd in words  if wd not in stop_words]\n\nthe expression is very simple: wd. keep the word if meets condition\nthe condition does the work: if the word isn’t in list of stop words, keep it\n\nSide note: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\ns1 = set(stop_words)\ns2 = set(words)\ns3 = s2 - s1\n\n\ns3\n\n{'fan', 'film', 'not'}"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "title": "NB: Comprehensions",
    "section": "Select Tokens Containing Units",
    "text": "Select Tokens Containing Units\nGiven a list of measurements, retain elements containing mmHg (millimeters of mercury)\n\nunits = 'mmHg'\nmeasures = ['20', '115mmHg', '5mg', '10 mg', '7.5dl', '120 mmHg']\nmeas_mmhg = [meas for meas in measures if units in meas]\n\n\nmeas_mmhg   \n\n['115mmHg', '120 mmHg']\n\n\nFiltering on two conditions\n\nunits1 = 'mmHg'\nunits2 = 'dl'\nmeas_mmhg_dl = [meas for meas in measures if units1 in meas or units2 in meas]\n\n\nmeas_mmhg_dl\n\n['115mmHg', '7.5dl', '120 mmHg']\n\n\nThis can be written differently for clarity:\n\n[meas \n for meas in measures \n if units1 in meas \n or units2 in meas]\n\n['115mmHg', '7.5dl', '120 mmHg']"
  },
  {
    "objectID": "modules/m04/m04-intro.html#topics",
    "href": "modules/m04/m04-intro.html#topics",
    "title": "M04 Functions",
    "section": "Topics",
    "text": "Topics\n\nBuilt-in functions\nUser-defined functions\nVariable scope\nLambda functions\nDesign of functions\nRecursion"
  },
  {
    "objectID": "modules/m04/m04-intro.html#outcomes",
    "href": "modules/m04/m04-intro.html#outcomes",
    "title": "M04 Functions",
    "section": "Outcomes",
    "text": "Outcomes\n\nBe able to use Pythons native and imported functions\nBe able to write your own functions\nUnderstand concept of variable scope\nBe able to write lambda functions and understand their use cases\nGrasp basic principles of function design\nImplement simple recursion functions"
  },
  {
    "objectID": "modules/m04/m04-intro.html#readings",
    "href": "modules/m04/m04-intro.html#readings",
    "title": "M04 Functions",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2019, Part IV, Chapter 16: Function Basics\n\n\nLutz 2019, Part IV, Chapter 17: Scopes Non-local is for advanced users\n\n\nLutz 2019, Part IV, Chapter 18. Arguments\n\n\nLutz 2019, Part IV, Chapter 19: Advanced Function Topics\n\n\n\n\nOptional\n\n\nMcKinney, Python for Data Analysis, Appendix A: Python Language Essentials\n\n\nRead section on Functions\n\n\nFunctions (W3S)\n\n\nGlobal and Local Variables (GFG)\n\n\nLambda Functions (Real Python)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "title": "NB: Introduction to Functions",
    "section": "Introduction",
    "text": "Introduction\nA function is piece of source code, separate fom the larger program, that performs a specific task.\nThis section of code is given a name and can be called from the main program. It is called by using its given name.\nFunctions are the verbs of a programming language. They signify action, and take subjects and objects (as it were).\nFunctions take input and produce output.\n\nFunction inputs are called both parameters and arguments.\nOutputs are called return values\n\nFunctions are always written with parentheses at the end of their names, e.g.\nlen(some_list)\nInternally, they contain a block of code to do their work.\nOften the producte a transformation … from simple to complex.\nWhen you use a function, we say you call a function. Programmers speak of “function calls” and “callbacks”."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "title": "NB: Introduction to Functions",
    "section": "Benefits",
    "text": "Benefits\nReduce complex tasks into simpler tasks.\nEliminate duplicate code – no need to re-write, reuse function as needed.\nCode reuse. Once function is written, you can reuse it in any other program.\nDistribute tasks to multiple programmers. For example, each function can be written by someone.\nHide implementation details, i.e. abstraction.\nIncrease code readability.\nImprove debugging by improving traceability. Things are easier to follow; you can jump from function to function."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "title": "NB: Introduction to Functions",
    "section": "Built-in Functions",
    "text": "Built-in Functions\nPython provides many built-in functions. See Python built-in functions.\nWe’ve looked at many of these already.\nThese are functions that are available to use any time your are running Python.\nTo take one simple example, this is a built-in function: bool().\nTakes an argument \\(x\\) and returns a boolean value, i.e. True or False.\n\nbool(0), bool(500)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "title": "NB: Introduction to Functions",
    "section": "Imported Functions",
    "text": "Imported Functions\nPython is meant to be a highly modular language.\nIt is not designed to have a lot of special purpose functions built into it.\nThese keeps it light and highly customizable.\nMany functions (and other stuff) can be imported into a program to add to the functions that you can call in a script.\nThere are also many packages to bring in additional functions.\nPackages and Libraries"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "title": "NB: Introduction to Functions",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\nPython makes it easy for you to write your own functions. These are called user-defined functions.\nLet’s write a function to compare the list against a threshold.\n\ndef vals_greater_than_or_equal_to_threshold(vals, thresh):\n    '''\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    '''\n    \n    bools = [val >= thresh for val in vals]\n    \n    return bools\n\nLet’s break down the components\nThe function definition starts with def, followed by name, one or more arguments in parenthesis, and then a colon.\nNext comes a docstring to provide information to users about how and why to use the function.\nThe function body follows.\n:astly is a return statement\nThe function call allows for the function to be used.\nIt consists of function name and required arguments:\nvals_greater_than_or_equal_to_threshold(arg1, arg2) where arg1, arg2 are arbitrary names.\n\nAbout the docstring\nA docstring m occurs as first statement in module, function, class, or method definition\nInternally, it is saved in __doc__ attribute of the function object.\nIt needs to be indented.\nIt can be a single line or a multi-line string.\n\n\nLet’s test our function\nThe function body used a list comprehension for the compare:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n[False, True]\n\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## vals_greater_than_or_equal_to_threshold(\"foo\", \"bar\")\n\nThis gives correct results and does exactly what we want.\n\n\nUsers can print the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nprint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\n\n?vals_greater_than_or_equal_to_threshold\n\nLet’s test our function\nThe function body used a list comprehension for the comparison:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\nThis gives correct results and does exactly what we want.\nPrint the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nPrint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\nUse the ? prefix …\n\n?vals_greater_than_or_equal_to_threshold"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Passing Parameters",
    "text": "Passing Parameters\nFunctions need to be called with correct number of parameters.\nThis function requires two params, but the function call includes only one param.\n\ndef fcn_bad_args(x, y):\n    return x + y\n\n\nfcn_bad_args(10)\n\nTypeError: fcn_bad_args() missing 1 required positional argument: 'y'\n\n\n\nParameter Order\nWhen calling a function, parameter order matters.\n\ndef fcn_swapped_args(x, y):\n    out = 5 * x + y\n    return out\n\n\nx = 1\ny = 2\n\n\nfcn_swapped_args(x, y)\n\n7\n\n\n\nfcn_swapped_args(y, x)\n\n11\n\n\nGenerally it’s best to keep parameters in order.\nYou can swap the order by putting the parameter names in the function call.\n\nfcn_swapped_args(y=y, x=x)\n\n\n\nWeirdness Alert\nNote that the same name can be used for the parameter names and the variables passed to them.\nThe names themselves have nothng to do with each other!\nIn other words, just because a function names an argument foo,\nthe variables passed to it don’t have to name foo or anything like it.\nThey can even be named the same thing – it does not matter."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "title": "NB: Introduction to Functions",
    "section": "Unpacking List-likes with *args",
    "text": "Unpacking List-likes with *args\nThe * prefix operator can be passed to avoid specifying the arguments individually.\n\ndef show_arg_expansion(*models):\n    \n    print(\"models          :\", models)\n    print(\"input arg type  :\",  type(models))\n    print(\"input arg length:\", len(models))\n    print(\"-----------------------------\")\n    \n    for mod in models:\n        print(mod)    \n\nWe can pass a tuple of values to the function …\n\nshow_arg_expansion(\"logreg\", \"naive_bayes\", \"gbm\")\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nYou can also pass a list to the function.\nIf you want the elements unpacked, put * before the list.\n\nmodels = [\"logreg\", \"naive_bayes\", \"gbm\"]\nshow_arg_expansion(*models)\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nThis approach allows your function to accept an arbitrary number of arguments.\n\nshow_arg_expansion('a b c d e f g'.split())\n\nThe reverse is true, too.\nYou can use the * prefix to pass list-like objects to a function that specifies its arguments.\n\ndef arg_expansion_example(x, y):\n    return x**y\n\n\nmy_args = [2, 8]\narg_expansion_example(*my_args)\n\nBut, the passed object must be the right length.\n\nmy_args2 = [2, 8, 5]\narg_expansion_example(*my_args2)\n\n\n## **my_dict"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "title": "NB: Introduction to Functions",
    "section": "Default Arguments",
    "text": "Default Arguments\nUse default arguments to set the value of arguments when left unspecified.\n\ndef show_results(precision, printing=True):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\n\npr = 0.912\nres = show_results(pr)\n\nprecision = 0.91\n\n\nThe function call didn’t specify printing, so it defaulted to True.\nNOTE: Default arguments must follow non-default arguments. This causes trouble:\n\ndef show_results(precision, printing=True, uhoh):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\nSyntaxError: non-default argument follows default argument (<ipython-input-19-29f5905a75a5>, line 1)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "title": "NB: Introduction to Functions",
    "section": "Returning Values",
    "text": "Returning Values\nFunctions are not required to have return statement.\nIf there is no return statement, a function returns None.\nFunctions can return no value (None), one value, or many.\nMany values are returned as a tuple.\nAny Python object can be returned.\n\n## returns None, and prints.\n\ndef fcn_nothing_to_return(x, y):\n    out = 'nothing to see here!'\n    print(out)\n\n\nfcn_nothing_to_return(x, y)\n\nnothing to see here!\n\n\n\nr = fcn_nothing_to_return(1, 1)\nprint(r)\n\nnothing to see here!\nNone\n\n\n\n## returns three values\n\ndef negate_coords(x, y, z):\n    return -x, -y, -z \n\n\na, b, c = negate_coords(10, 20, 30)\nprint('a =', a)\nprint('b =', b)\nprint('c =', c)\n\na = -10\nb = -20\nc = -30\n\n\n\nfoo = negate_coords(10, 20, 30)\n\n\nfoo, len(foo)\n\n((-10, -20, -30), 3)\n\n\nIf you don’t need an output, use the dummy variable _\n\nd, e, _ = negate_coords(10,20,30)\nprint('d =', d)\nprint('e =', e)\n\nNote: It’s generally a good idea to include return statements, even if not returning a value.\nThis shows that you did not forget to consider the return value.\nYou can use return or return None.\nFunctions can contain multiple return statements.\nThese may be used under different logical conditions.\n\ndef absolute_value(num):\n    if num >= 0:\n        return num\n    return -num\n\n\nabsolute_value(-4)\n\n\nabsolute_value(4)\n\nFor non-negative values, the first return is reached.\nFor negative values, the second return is reached."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "title": "NB: Introduction to Functions",
    "section": "Function Design",
    "text": "Function Design\nA function is not just a bag of code!\nSome good practices for creating and using functions:\n\ndesign a function to do one thing\n\nMake them as simple as possible, which makes them:\n\nmore comprehensible\neasier to maintain\nreusable\n\nThis helps avoid situations where a team has 20 variations of similar functions.\nGive your function a good name.\n\nIt should reflect the action it performs.\nBe consistent in your naming conventions.\nA name like compute_variances_sort_save_print suggests the function is overworked!\n\nIf the function compute_variances also produces plots and updates variables, it will cause confusion.\nAlways give your function a docstring - Particularly important since indicating data types is not required.\n- As a side note, you can include this information by using type annotation.\nFinally, at some point you may be interested to learn some of the formatting languages that have been developed to write docstrings. See Lutz 2019 and this web page about Documenting Python Code for more info."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html",
    "title": "NB: Importing Functions",
    "section": "",
    "text": "Extra"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "title": "NB: Importing Functions",
    "section": "Importing",
    "text": "Importing\nCalling a function from the “math” library is straightforward:\n\nImport Python’s Math library with the command import math\nCall methods from the imported math object using “dot” notation, that is, .(any parameters).\n\nFor example:\nmath.sqrt(12)\nPut all of your import statements at the very top of your code, before anything else, other than any header comments (which you should have).\nHere are some example math functions:\n\nimport math # Typically best to put this line of code at the TOP of the file\n\n\nmath.sqrt(12)\n\n3.4641016151377544\n\n\n\nmath.floor(2.5) # returns largest whole number less than the argument\n\n2\n\n\nHere’s an example using the random library (a class).\n\nimport random # Typically best to put this line of code at the TOP of the file\n\n\nrandom.random()# will return a number between 0 and 1 \n\n0.3599068479674543\n\n\n\nrandom.randint(1, 100) # this will return a random integer in the range 1-100\n\n18"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "title": "NB: Importing Functions",
    "section": "Importing Specific Functions",
    "text": "Importing Specific Functions\nIf you know what specifics function you are going to use from a library, you can import them directly, like so:\nfrom math import sqrt\nThis has two effects: 1. It reduces the memory used by the library in your program. 2. It allows you to call the function directly, with the object dot notation.\n\nfrom math import sqrt\n\n\nsqrt(99)\n\n9.9498743710662"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "title": "NB: Importing Functions",
    "section": "Aliasing",
    "text": "Aliasing\nTo avoid having the function name conflict with an existing function in your program,\nyou can alias the imported function like so:\n\nfrom math import sqrt as SquareRoot\n\n\nSquareRoot(65000)\n\n254.95097567963924"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "title": "NB: Lambda Functions",
    "section": "Introduction",
    "text": "Introduction\nPython lambda functions are small, informal functions. They don’t get a name.\nThe are “anonymous.”\nFrom Lutz 2019:\n\nBesides the def statement, Python also provides an expression form that generates function objects. Because of its similarity to a tool in the Lisp language, it’s called lambda. Like def, this expression creates a function to be called later, but it returns the function instead of assigning it to a name. This is why lambdas are sometimes known as anonymous (i.e., unnamed) functions. In practice, they are often used as a way to inline a function definition, or to defer execution of a piece of code.\n\nThe general form of a lambda function is:\n\nlambda x: x\n\n<function __main__.<lambda>(x)>\n\n\nYou can call the function like this:\n\n(lambda x: x)(2)\n\n2\n\n\nincrement x\n\n(lambda x: x+1)(5)\n\n6\n\n\nsum two variables\n\nlambda x, y: x + y\n\n<function __main__.<lambda>(x, y)>"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "title": "NB: Lambda Functions",
    "section": "Assigned to a Variable",
    "text": "Assigned to a Variable\nEven though they don’t get a name, they can be assigned to variables.\nHere, a lambda function gets assigned to sum_two_vars.\n\nsum_two_vars = lambda x, y: x + y\n\n\nsum_two_vars(2,4)\n\n6\n\n\nCheck if a value is non-negative\n\nis_non_negative = lambda x: x >= 0\n\n\nis_non_negative(-9)\n\nFalse\n\n\n\nis_non_negative(0)\n\nTrue\n\n\nPackage first element and all data into tuple\n\npack_first_all = lambda x: (x[0], x)\n\n\ncasado = ('rice','beans','salad','plaintain','chicken') # a typical Costa Rican dish\n\npack_first_all(casado)\n\n('rice', ('rice', 'beans', 'salad', 'plaintain', 'chicken'))\n\n\nCheck for keyword “dirty”\n\nis_dirty = lambda txt: 'dirty' in txt\n\n\nkitchen_inspection = 'dirty dishes'\nis_dirty(kitchen_inspection)\n\nTrue\n\n\n\nkitchen_inspection = 'pretty clean!'\nis_dirty(kitchen_inspection)\n\nFalse\n\n\n**pass *args for unspecified number of arguments**\n\n(lambda *args: sum(args))(1,2,3)\n\n6"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "title": "NB: Lambda Functions",
    "section": "Using Lambda",
    "text": "Using Lambda\nLambda functions are often used in Pandas. We will discuss there use in more detail when we get to that topic."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "title": "NB: Recursion",
    "section": "Introduction",
    "text": "Introduction\nA recursive function is a function that calls itself.\nThis is weird, since it does not seem possible. How can a definition refer to itself?\nIn philosophy, this is expressed in the Barber’s Paradox:\n\nThe barber is the one who shaves all those, and those only, who do not shave themselves. Does the barber shave himself?\n\nFormally, it is a type of self-reference, like This sentence is false.\nA Cute Definition\nrecursion - the art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).\nSource: PerlDoc\n\nA Formal Definition\nIn mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:\nA simple base case (or cases): a terminating scenario that does not use recursion to produce an answer.\nA recursive step: a set of rules that reduces all successive cases toward the base case.\n\n\nAs Seen in Nature\nRecursion occurs naturally when a process applies a rule to itself successively.\nWe see this in fractals.\n\n\nInfinite Loops and Stack Overflows\nEvery recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.\nThe Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.\nThe call stack is where information is stored relating to the active subroutines in a program.\nThe call stack has a limited amount of available memory. When excessive memory consumption occurs on the call stack, it results in a stack overflow error.\n\n\nA Note of Caution\nSo, Recursion is cool, but is expensive and complicated.\nRecursive functions can usually be implemented by traditional loops."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "title": "NB: Recursion",
    "section": "Example: Computing Factorials",
    "text": "Example: Computing Factorials\nSource\nThe factorial of a number \\(n\\) is the product of all the integers from \\(1\\) to \\(n\\).\nFor example, the factorial of \\(5\\) (denoted as \\(5!\\)) is \\(1\\times2\\times3\\times4\\times5 = 120\\).\nLet’s implement this in code using a recursive function.\n\nRecursive Function\n\nn = 5\n\n\n##| tags: []\ndef factorial(x):\n    \"Finds the factorial of an integer using recursion\"\n    if x == 1: # Base condition\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\n##| tags: []\n%time factorial(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 7.87 µs\n\n\n120\n\n\n\n\nAs a while loop\n\ndef factorial_while(x):\n    \"Finds the factorial of an integer using a while loop\"\n    f = x\n    while x > 1:\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_while(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 6.44 µs\n\n\n120\n\n\n\n\nAs a for loop\n\ndef factorial_for(x):\n    \"Finds the factorial of an integer using a for loop\"\n    f = x\n    for i in range(1, x):\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_for(n)\n\nCPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 7.15 µs\n\n\n120\n\n\n\n\nCompare functions as \\(n\\) increases\n\nIncrease n to 50\n\nn = 50\n%time factorial(n)\n\nCPU times: user 30 µs, sys: 0 ns, total: 30 µs\nWall time: 33.4 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n%time factorial_while(n)\n%time factorial_for(n)\n\nCPU times: user 7 µs, sys: 1 µs, total: 8 µs\nWall time: 10.7 µs\nCPU times: user 7 µs, sys: 0 ns, total: 7 µs\nWall time: 9.06 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n\nIncrease n to 500\n\nn = 500\n\n\n%time factorial(n)\n\nCPU times: user 494 µs, sys: 0 ns, total: 494 µs\nWall time: 499 µs\n\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 85 µs, sys: 5 µs, total: 90 µs\nWall time: 93 µs\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 88 µs, sys: 0 ns, total: 88 µs\nWall time: 90.8 µs\n\n\nn\n\n\n\nIncrease n to 5000\n\nn = 5000\n%time factorial(n)\n\nRecursionError: maximum recursion depth exceeded in comparison\n\n\n\nfactorial_while(n)\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 4.93 ms, sys: 0 ns, total: 4.93 ms\nWall time: 4.94 ms\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 4.82 ms, sys: 0 ns, total: 4.82 ms\nWall time: 4.84 ms\n\n\n
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "title": "NB: Recursion",
    "section": "Example: The Fibonacci sequence",
    "text": "Example: The Fibonacci sequence\nFib(0) = 0 (base case 1)\nFib(1) = 1 (base case 2)\nFor all integers n > 1, Fib(n) = Fib(n − 1) + Fib(n − 2)\n\ndef Fibonacci(n):\n    \"Compute a Fibonacci Sequence using recursion\"\n\n    # If n is negative\n    if n < 0:\n        print(\"Incorrect input. Value must be 0 or greater.\")\n\n    # If n is 0\n    elif n == 0:\n        return 0\n\n    # If n is 1 or 2\n    elif n == 1 or n == 2:\n        return 1\n\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n\n\nn = 9\n\n\nFibonacci(9)\n\n34\n\n\n\nfor n in range(100):\n    if n > 0: print(\", \", end=\"\")\n    print(Fibonacci(n), end=\"\")\n\n\nAs a for loop\n\ndef fibber(r:int = 10):\n    \"\"\"\n    Computes a Fibonacci Sequence using a for loop. \n    Parameter r must be in integer > 3. Defaults to 10.\n    Returns a string as a comma-limited series.\n    \"\"\"\n    seq = [1,1,2] \n    kernel = lambda x, i: x[i-1] + x[i-2]\n    for n in range(3, r):\n        seq.append(seq[n-1] + seq[n-2])\n    return ', '.join([str(x) for x in seq])\n\n\nfibber(20)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "title": "NB: Recursion",
    "section": "Aside: A General Sequence Function",
    "text": "Aside: A General Sequence Function\nRecursive functions are often used to produce mathematical sequences, but since they have limits on depth, they are of limited use for this purpose.\nHere is a function that can combine many sequences using two sequence parameters: * The initial state of the sequence, represented as the list seq. * For example, in the Fibonacci sequence, seq is [1, 1, 2] * The function to apply to the sequence at each iteration, represneted as a lambda function with the arguments x and i for the the sequence list seq and the iteration number respectively. * For example, in the Fibonacci sequence the kernel function is lambda x, i: x[i-1] + x[i-2]\n\n##| tags: []\ndef sequencer(n:int = 10, seq=[1, 1, 2], kernel=lambda x, i: x[i-1] + x[i-2]):\n    \"\"\"\n    Computes a Sequence using a for loop. \n    \n    Parameter n in integer which must be > 3. Defaults to 10.\n    Parameter seq is as list in the initial state of the sequence. Must have at least one value. Defaults to Fibonacci [1,1,2]\n    Parameter kernel is the kernel function applied to the series at each iteration. x stands for the seq list, i to the iteration number. Defaults to lambda x, i: x[i-1] + x[i-2]\n    \n    Returns a string as a comma-limited series.\n    \"\"\"\n    \n    for i in range(len(seq), n): seq.append(kernel(seq, i))\n    return ', '.join([str(x) for x in seq])\n\n\nn = 8\n\n\n%time sequencer(n, [0], lambda x, i: i)\n\nThe series of positive integers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 1)\n\nThe series of even numbers\n\nsequencer(n, [2], lambda x, i: x[i-1] + 2)\n\nThe series of odd numbers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 2)\n\nThe series of Fibonacci numbers\n\nsequencer(n, [1,1,2], lambda x, i: x[i-1] + x[i-2])\n\nThe series of Squares\n\nsequencer(n, [2], lambda x, i: x[i-1]**2)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "title": "NB: Variable Scope",
    "section": "Overview",
    "text": "Overview\nA variable’s scope is the part of a program where it is visible.\n\nScope refers to the coding region, such as a function block, from which a particular Python object is accessible.\nVisible means available or usable to the code block in question.\nIf a variable is in scope to a function, it is visible the function.\nIf it is out of scope to a function, it is not visible the function.\n\nWhen a variable is defined inside of a function, it is not visible outside of the function. * We say such variables are local to the function. * They are also removed from memory when the function completes.\nWhen a variable is defined outside of any function in a script, it is visible to any function inside of the script * We say such variables are global to the functions in the file or context in which the variables are defined. * A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\nSometimes variable scope is called lexical scope.\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.\nThe concept is easier than it may look in the abstract. Let’s look at some examples where we vary the use of local and global definitions of x."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "title": "NB: Variable Scope",
    "section": "Lutz on Scoping",
    "text": "Lutz on Scoping\nHere’s an excerpt from Lutz, Chapter 17. Please read the whole thing.\nThe enclosing module is a global scope. Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\nThe global scope spans a single file only. Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. When you hear “global” in Python, think “module.”\nAssigned names are local unless declared global or nonlocal. By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\nAll other names are enclosing function locals, globals, or built-ins. Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\nEach call to a function creates a new local scope. Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\nAnd here is a nice visualization of scopes:\n\n\n\nCar with tinted glass\n\n\nPlease read Lutz, Chapter 17 for a good overview of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "title": "NB: Variable Scope",
    "section": "The Tinted Glass Metaphor",
    "text": "The Tinted Glass Metaphor\n\nSo, code regions within a program are like vehicles with tinted glass: * Passengers can see outside, but outsiders can’t see inside. * Passengers in a vehicle can let outsiders look in by lowering the window.\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "title": "NB: Variable Scope",
    "section": "Example 1",
    "text": "Example 1\nx defined outside a function but used inside of it\nIn the code below: * x is global and seen from inside the function.\n* a is local to the function. trying to print outside function throws error.\nNote that arguments are essentially locally defined variables.\n\nx = 10\n\ndef scope_func1(a):\n    out = x + a\n    return out\n\nThe following works because x is global and functions can access globals so long as they don’t reassign the variable name.\n\ny = scope_func1(6)\nprint(y)\n\nThe following fails because a local and not visible outside the function.\n\nprint(a)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "title": "NB: Variable Scope",
    "section": "Example 2",
    "text": "Example 2\nx defined both outside and inside function, and used inside the function\nThis function reassigns x, so it becomes local.\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\nx = 10 # Global\n\ndef scope_func2(a):\n\n    x = 20 # Local\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\ny = scope_func2(6)\nprint(y)\nprint('x from outside:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "title": "NB: Variable Scope",
    "section": "Example 2a",
    "text": "Example 2a\nHere we define x as an argument.\nThis has the same effect as defining it in the body of the function.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20): # Argment variables are local\n\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6)\nprint(y)\nprint('x from outside before function:', x)\n\nAs an argument, though, it can be assigned the value of the global.\nNevertheless, only the value is being passed between the global and local versions of x.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20):\n\n    print('x from inside before incremenet:', x)\n    x += 10\n    print('x from inside after incremenet:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6, x)\nprint(y)\nprint('x from outside after function:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "title": "NB: Variable Scope",
    "section": "Example 3",
    "text": "Example 3\nx defined both outside and inside function, and used inside the function in both global and local modes\nThis one is interesting. It fails, but it’s not clear why at first.\n\nx = 10\n\ndef scope_func3(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    x = 20 # Local use of x\n    print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3(6)\nprint('x from outside after local definition:', x)\n\nThe error can be fixed by referencing x as global inside function.\n\nx = 10\n\ndef scope_func4(a):\n    global x\n    \n    print('x from inside, before local definition:', x)\n    x = 20\n    print('x from inside, after local definition:', x)\n    \n    out = x + a\n    return out\n\n\nprint('x from outside, before local definition:', x)\ny = scope_func4(6)\nprint(y)\nprint('x from outside, after local definition:', x)\n\nNote that the two instances of the variable z coexist in the same script because of the rules of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "title": "NB: Variable Scope",
    "section": "Local / global conflicts",
    "text": "Local / global conflicts\nWhat will calling guess() do?\nHint: “If you assign a name in any way within a def, it will become a local to that function by default.” (Lutz)\n\nx = 10\n\ndef guess():\n    x += 10 \n    print(x)\n\n\nguess()\n\nConsider the following expression, which is the same as the unary operation inside of the function guess().\n\nx = x + 10\n\nThe x on the left is local, since it is being defined inside the function.\nHowever, the x on the right is assumed to already be defined, and so is global.\nIn effect, Python is presented with a contradiction and so throws an error.\nWe will see that R does not do this; it just goes with the global."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "title": "NB: Variable Scope",
    "section": "Nonlocal",
    "text": "Nonlocal\nIf a variable is assigned in an enclosing def, it is nonlocal to nested functions.\nThe nonlocal keyword is similar to global, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\nx = 10 # Global\ndef func1(): # Enclosing function\n    x = 20 # Local to function; \"Nonlocal\" to nested function\n    def func1a():\n        x = 30 # Local to nested function\n        print(x)\n    func1a()\n    print(x)\n\n\nprint(x)\nfunc1()\nprint(x)\n\n\nx = 10\ndef func2():\n    x = 20\n    def func2a():\n        nonlocal x\n        x = 30\n        print(x)\n    func2a()\n    print(x)\n\n\nprint(x) # 1\nfunc2()\nprint(x) # 4\n\n\nx = 10\ndef func3():\n    x = 20\n    def func3a():\n        global x\n        x = 30\n        print(x)\n    func3a()\n    print(x)\n\n\nprint(x)\nfunc3()\nprint(x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "title": "NB: Variable Scope",
    "section": "Namespaces",
    "text": "Namespaces\nDefinitions of scope make reference to namespaces. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means.\nIf you’ve never heard of namespaces, or are unsure of what they are, here’s a brief explanation.\nA namespace is a system that allows for a unique name to associated with each and every object in a Python program. * Remember that an object can be anything in Python, not just variable, e.g. a function or a class. * Python maintains namespaces internally as dictionaries.\nA good analogy to a namespace system is the file system on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\nAnother anology is in human names – personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\nFinally, another analogy is home addresses – house numbers and street names can be reused based on their “path” in the tree of geographic entities that include cities, states, nations, etc.\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace.\nNote that in each of these cases, the data structure is a directed acyclic graph (DAG), which is universal structure for organizing unique names."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "title": "NB: Variable Scope",
    "section": "Some Visualizations",
    "text": "Some Visualizations\n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\nSource: “Namespaces and Scope in Python” (GFG)."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "title": "NB: Functions Calling Functions",
    "section": "Basic Insight",
    "text": "Basic Insight\nFunctions contain any code, so they can contain functions. * Functions can call other functions * Functions can define new functions\nWe create functions that call functions in order to break a complex process into components. * Some functions focus on simple component processes * Other functions combine these into higher order processes * Some functions may be focused on computation, while others may be focused on interacting with users or data sources * We can think of this a division of labor, or “separation of concerns,” among functions\nWhen you create groups of functions, they often form natural groups that associated with a common process or task. * These function groups often share variables in addition to calling each ohter\nLet’s look at some examples to illustrate these points."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "title": "NB: Functions Calling Functions",
    "section": "Example 1: Converting Temperatures",
    "text": "Example 1: Converting Temperatures\nHere are three functions that work together to make a temperature converter.\nNotice how the last function integrates the first two.\n\ndef f_to_c(temp):  \n    \"\"\"\n    Converts F to C and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round((temp - 32) * (5/9))\n    \ndef c_to_f(temp):  \n    \"\"\"\n    Converts C to F and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round(temp * (9/5) + 32)\n    \ndef convert(temp, scale): \n    \"\"\"\n    Combines conversion functions into a two-way converter.\n    Expects a souce temp (int) and a target scale ('f' or 'c').\n    \"\"\"\n    if scale.lower() == \"c\":\n        return f_to_c(temp)  # function call to f_to_c\n    else:\n        return c_to_f(temp)  # function call to c_to_f\n\nNow, here is function that combines the above functions into a user-facing interface to the other functions.\n\n##| tags: []\ndef convert_app():\n    \"\"\"\n    Provides a user-interface to the the conversion functions.\n    \"\"\"\n    \n    # Get user input\n    temp = int(input(\"Enter a temperature: \"))                \n    scale = input(\"Enter the scale to convert to: (c or f) \")[0].lower()\n    \n    # Infer source scale, to be used in the output message\n    if scale == 'c':\n        current_scale = 'f'\n    else:\n        current_scale = 'c'\n    \n    # Do the conversion\n    converted = convert(temp, scale)\n    \n    # Print results for user\n    print(f\"{temp}{current_scale.upper()} is equal to {converted}{scale.upper()}.\")\n\n\nconvert_app()\n\nEnter a temperature:  45\nEnter the scale to convert to: (c or f)  f\n\n\n45C is equal to 113F.\n\n\n\nA More Pythonic Solution\nWe replace if/then statements with dictionary logic.\n\n## Put your logic in the data structure\nconverters = {\n    'c': lambda t: (t - 32) * (5/9),\n    'f': lambda t: t * (9/5) + 32\n}\n\n\ndef convert_app2():\n    \n    # Input from user\n    source_temp  = int(input(\"Enter a temperature: \"))                \n    target_scale = input(\"Enter the scale to convert to: (c or f) \")\n    \n    # Internal computations\n    target_temp  = converters[target_scale](source_temp)\n    # source_scale = list(set(converters.keys()) - set(target_scale))[0]\n    source_scale = (set(converters.keys()) - set(target_scale)).pop()\n    \n    # Output to user\n    print(source_temp, source_scale, \"converted becomes:\" , round(target_temp), target_scale)\n\n\nconvert_app2()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "title": "NB: Functions Calling Functions",
    "section": "Example 2: Counting Vowels",
    "text": "Example 2: Counting Vowels\n\n## Predicate functions - often used as helper functions that return True or False\n\ndef is_vowel(l):\n    if l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\":\n        return True  # if the letter is a vowel, return True\n    else:\n        return False # else, return False\n        \ndef num_vowels(my_string):\n    my_string = my_string.lower()\n    count = 0\n    for i in range(len(my_string)): # for each character\n        if is_vowel(my_string[i]):  # call function above\n            count += 1              # increment count if true\n    return count\n    \ndef vcounter():\n    my_str = input(\"Enter a string: \")\n    vcount = num_vowels(my_str)\n    print(f\"There are {vcount} vowels in the string.\")\n\n\nvcounter()\n\n\nA More Pythonic Solution\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\nvowel_count = lambda x: len([char for char in x.lower() if char in \"aeiou\"])\n\n\ntest_str = \"Whatever it is, it is what it is.\"\n\n\nvowel_count(test_str)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "title": "NB: Functions Calling Functions",
    "section": "Example 3: Calculating Tax",
    "text": "Example 3: Calculating Tax\nWe write two related functions: * One to compute the tax based on a gross pay and a tax rate. * One to compute the net pay using the previous function.\nIn addition, we want to write some functions that use these functions to interact with a user. * One to get the input value of the gross pay and print the tax. * One to print the net pay based on the previous function.\nNote the division of labor, or “separation of concerns”, in these functions: * Some do calculative work * Some do interactive work\nTo compute tax, we have these data:\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n\n\n\n\n\n\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\n\nIn the code below, we globalize any variables that are assigned in our functions.\n\n\nThis allows them to be shared by all the other functions.\n\n\nNote that this is effective when our global environment – the containing script – contains only these functions.\n\n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n\n\n\ndef compute_tax():\n    \"\"\"\n    Computes tax rate and applies to gross pay to get tax.\n    Expects gross_apy to be defined globally.\n    Adds tax_rate and tax to globals for use by other functins.\n    \"\"\"\n\n    global tax_rate, tax\n\n    # Get rate by lower bound\n    if gross_pay > 480:\n        tax_rate = .28\n    elif gross_pay > 240:\n        tax_rate = .15\n    else:\n        tax_rate = 0\n        \n    tax = gross_pay * tax_rate\n            \ndef compute_net_pay():\n    \"\"\"\n    Computes net pay based on globals produced by compute_tax().\n    Expects gross_pay and tax to be defined globally.\n    Adds net_pay to to globals.\n    \"\"\"\n    \n    global net_pay\n    \n    net_pay = gross_pay - tax\n\ndef get_tax():   \n    \"\"\"\n    Computes and prints tax based on user input.\n    Essentially a wrapper around compute_tax().\n    Adds gross_pay to globals.\n    \"\"\"\n    \n    global gross_pay\n    \n    gross_pay = int(input(\"Enter your gross pay in dollars: \"))                            \n    \n    compute_tax()\n    \n    print(f\"Based on a tax rate of {round(tax_rate * 100)}%, the tax you owe on ${gross_pay} is ${round(tax)}.\")\n    \ndef get_net_pay():\n    \"\"\"\n    Computes and prints net pay based on globals.\n    \"\"\"\n    \n    compute_net_pay()\n    \n    print(f\"Your take home (net) pay is ${round(net_pay)}.\")\n    \ndef do_all():\n    \"Runs both user-facing functions.\"\n    get_tax()\n    get_net_pay()\n\n\nget_tax()\n\n\nget_net_pay()\n\n\ndo_all()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "title": "NB: Functions Calling Functions",
    "section": "Concluding Observations",
    "text": "Concluding Observations\n\nNotice how each example has functions that build on each other.\nThese functions share both data and a general goal.\nThe fact that data and functions go together is the motivation for creating classes."
  },
  {
    "objectID": "modules/m05/m05-intro.html#topics",
    "href": "modules/m05/m05-intro.html#topics",
    "title": "M05 NumPy",
    "section": "Topics",
    "text": "Topics\n\nNumpy and its role in the Python data science ecosystem\nNumpy Arrays\nArray indexing, slicing, and broadcasting\nAggregation\nTiming the difference between NumPy and plain old Python"
  },
  {
    "objectID": "modules/m05/m05-intro.html#readings",
    "href": "modules/m05/m05-intro.html#readings",
    "title": "M05 NumPy",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nMcKinney 2017, Chapter 4: Numpy Basics\n\n\n\n\nOptional\n\n\nMcKinney 2017, Appendix A. Advanced NumPy: A.4 Broadcasting\n\n\nNumPy for Beginners (Official)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#numpy",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#numpy",
    "title": "NB: NumPy First Steps",
    "section": "NumPy",
    "text": "NumPy\n\nA new data structure\nEssentially, NumPy introduces a new data structure to Python — the n-dimensional array.\nAlong with it, it introduces a collection of functions and methods that take advantage of this data structure.\nThe data structure is designed to support the use of numerical methods: algorithmic approximations to the problems of mathematical analysis.\nNew Functions\nIt also provides a new way of applying functions to data made possible by the data structure – vectorized functions.\nVectorized functions replace the use of loops and comprehensions to apply a function to a set of data.\nIn addition, given the data structure, it provides a library of linear algebra functions.\nNew Data Types\nNumPy also introduces a bunch of new data types.\nPython for Science\nNumPy stands for “Numerical Python”.\nBecause numerical methods are so important to so many sciences, NumPy is the basis of what is called the scientific “stack” in Python, which consists of SciPy, Matplotlib, SciKitLearn, and Pandas.\nAll of these assume that you have some knowledge of NumPy.\nLet’s take a look at it."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "title": "NB: NumPy First Steps",
    "section": "Importing the Library",
    "text": "Importing the Library\n\nimport numpy as np\n\nNumPy is by widespread convention aliased as np."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "title": "NB: NumPy First Steps",
    "section": "The ndarray",
    "text": "The ndarray\nThe ndarray is a multidimensional array object.\nLet’s explore it some.\nFirst, let’s generate some fake data using NumPy’s built-a random number generator.\nNote that np.random.randn() samples from the “standard normal” distribution.\n\n# np.random.randn?\n\n\ndata = np.random.randn(2, 3)\n\n\ndata\n\narray([[ 0.72834379,  0.5874105 , -0.32733983],\n       [-0.57066835,  1.08009114, -1.56702285]])\n\n\n\ndata * 10\n\narray([[  7.2834379 ,   5.87410495,  -3.27339826],\n       [ -5.7066835 ,  10.80091141, -15.67022852]])\n\n\n\ndata + data\n\narray([[ 1.45668758,  1.17482099, -0.65467965],\n       [-1.1413367 ,  2.16018228, -3.1340457 ]])\n\n\n\ndata.shape\n\n(2, 3)\n\n\n\ndata.dtype\n\ndtype('float64')"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "title": "NB: NumPy First Steps",
    "section": "About Dimensions",
    "text": "About Dimensions\nThe term “dimension” is ambiguous. * Sometimes refers to the dimensions of things in the world, such as space and time. * Sometimes refers to the dimensions of a data structure, independent of what it represents in the world.\nNumPy dimensions are the latter, although they can be used to represent the former, as physicists do.\nThe dimensions of data structures are sometimes called axes.\nConsider this: Three-dimensional space can be represented as three columns in a two-dimensional table OR as three axes in a data cube."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Creating ndarrays",
    "text": "Creating ndarrays\nFrom a list:\n\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\narr1\n\narray([6. , 7.5, 8. , 0. , 1. ])\n\n\nFrom a list of lists:\n\ndata2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\narr2 = np.array(data2)\narr2\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\narr2.ndim\n\n2\n\n\n\narr2.shape\n\n(2, 4)\n\n\n\narr1.dtype\n\ndtype('float64')\n\n\n\narr2.dtype\n\ndtype('int64')\n\n\nInitializing with \\(0\\)s using a convenience function:\n\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nnp.zeros((3, 6))\n\narray([[0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.]])\n\n\n\nnp.empty((2, 3, 2))\n\narray([[[0., 0.],\n        [0., 0.],\n        [0., 0.]],\n\n       [[0., 0.],\n        [0., 0.],\n        [0., 0.]]])\n\n\nUsing .arange() (instead of range())\n\nnp.arange(15)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Data Types for ndarrays",
    "text": "Data Types for ndarrays\nUnlike any of the previous data structures we have seen in Python, ndarrays must have a single data type associated with them.\nHere we initialize a series of arrays as different data types (aka dtypes).\n\narr1 = np.array([1, 2, 3], dtype=np.float64)\narr1.dtype\n\ndtype('float64')\n\n\nNote that dtypes are defined by some constants attached to the NumPy object.\nWe can also refer to them as strings in some contexts.\nIn other words, in the context of the dtype argument, 'float64' can substitute for np.float64.\n\nnp.array([1, 2, 3], dtype='float64')\n\narray([1., 2., 3.])\n\n\n\narr2 = np.array([1, 2, 3], dtype=np.int32)\narr2.dtype\n\ndtype('int32')\n\n\nInteger arrays default to int64:\n\narr = np.array([1, 2, 3, 4, 5])\narr.dtype\n\ndtype('int64')\n\n\nSo you may want in use a more capacious type:\n\nfloat_arr = arr.astype(np.float64)\nfloat_arr.dtype\n\ndtype('float64')\n\n\nArrays can be cast:\n\narr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\narr\n\narray([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\n\n\nFrom floats to ints:\n\narr.astype(np.int32)\n\narray([ 3, -1, -2,  0, 12, 10], dtype=int32)\n\n\nFrom strings to floats:\n\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\nnumeric_strings.astype(float)\n\narray([ 1.25, -9.6 , 42.  ])\n\n\nNote that NumPy converts data types to make the array uniform:\n\nnon_uniform = np.array([1.25, -9.6, 42])\nnon_uniform, non_uniform.dtype\n\n(array([ 1.25, -9.6 , 42.  ]), dtype('float64'))\n\n\nRanges default to integers:\n\nint_array = np.arange(10)\n\n\nint_array\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nWe can use the dtype on one array to cast another:\n\ncalibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\nint_array.astype(calibers.dtype)\n\narray([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\n\n\nAnd here is an empty array of unsigned integers:\n\nempty_uint32 = np.empty(8, dtype='u4')\nempty_uint32\n\narray([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint32)\n\n\nNumPy Data Types\ni - integer\nb - boolean\nu - unsigned integer\nf - float\nc - complex float\nm - timedelta\nM - datetime\nO - object\nS - string\nU - unicode string\nV - fixed chunk of memory for other type ( void )\nData Type Hierarchy\nNumPy introduces 24 new fundamental Python types to describe different types of scalars.\nThese derive from the C programming language with which NumPy is built.\n\nSee the NumPy docs."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "title": "NB: NumPy First Steps",
    "section": "Element-wise Arithmetic",
    "text": "Element-wise Arithmetic\nNumPy arrays can be transformed with with arithmetic operations.\nThese are all element-wise operations.\nLet’s start with a 2D array.\n\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\narr\n\narray([[1., 2., 3.],\n       [4., 5., 6.]])\n\n\n\narr.shape\n\n(2, 3)\n\n\n\narr * arr\n\narray([[ 1.,  4.,  9.],\n       [16., 25., 36.]])\n\n\n\narr - arr\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\n1 / arr\n\narray([[1.        , 0.5       , 0.33333333],\n       [0.25      , 0.2       , 0.16666667]])\n\n\n\narr ** 0.5\n\narray([[1.        , 1.41421356, 1.73205081],\n       [2.        , 2.23606798, 2.44948974]])\n\n\nNow let’s compare two arrays.\n\narr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2\n\narray([[ 0.,  4.,  1.],\n       [ 7.,  2., 12.]])\n\n\n\narr2 > arr\n\narray([[False,  True, False],\n       [ True, False,  True]])\n\n\nBoolean arrays will prove to be very useful …"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "title": "NB: NumPy First Steps",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\nExample 1\n→ Editor’s Note, this jumps ahead to multi-dimensional indexing.\n\nfoo = np.random.randn(3,5)\n\n\nfoo\n\narray([[-0.245757  ,  1.59454064,  0.14589853, -0.2534454 , -0.44775398],\n       [ 2.72314985,  1.57858712, -1.65933769, -0.57840354,  0.49146331],\n       [ 1.94993087,  1.02623051,  0.80243726,  0.06391149,  1.43121588]])\n\n\n\nfoo.shape\n\n(3, 5)\n\n\n\nfoo[1:, :2]\n\narray([[2.72314985, 1.57858712],\n       [1.94993087, 1.02623051]])\n\n\n\nfoo[1:, :2].shape\n\n(2, 2)\n\n\nExample 2\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\narr[5]\n\n5\n\n\n\narr[5:8]\n\narray([5, 6, 7])\n\n\nSlices can be used to set values as well.\n\narr[5:8] = 12\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "title": "NB: NumPy First Steps",
    "section": "Views and Copies",
    "text": "Views and Copies\nNotice that if we assign a scalar to a slice, all of the elements of the slice get that value.\nThis is called broadcasting. We’ll look at this more later.\nAlso, notice that changes to slices are changes to the arrays they are slices of.\nThey are views, not copies. This is crucial.\nSee what happens when we change a view:\n\narr_slice = arr[5:8]\narr_slice\n\narray([12, 12, 12])\n\n\n\narr_slice[1] = 12345\narr\n\narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n           9])\n\n\n\narr_slice[:] = 64\n\n\narr_slice\n\narray([64, 64, 64])\n\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\nNumPy defaults to views rather than copies because copies are expensive and NumPy is designed with large data use cases in mind.\nIf you want a copy of a slice of an ndarray instead of a view, use .copy().\nHere’s an example:\n\narr_slice_copy = arr[5:8].copy()\n\n\narr_slice_copy\n\narray([64, 64, 64])\n\n\n\narr_slice_copy[:] = 99\n\n\narr_slice_copy\n\narray([99, 99, 99])\n\n\nNote how the original array is unchanged:\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "title": "NB: NumPy First Steps",
    "section": "Higher Dimensional Arrays",
    "text": "Higher Dimensional Arrays\nNumPy can create arrays in N dimensions.\nHere is a 2D array initialized from a list of lists.\n\narr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nIndexing into a dimension produces lower-order arrays.\n\narr2d[2]\n\narray([7, 8, 9])\n\n\n\narr2d[0][2]\n\n3\n\n\nSimplified notation: NumPy offers an elegant way to specify multidimensional indices and slices.\nInstead of x[a][b][c] you can write x[a,b,c].\n\narr2d[0, 2]\n\n3\n\n\nA nice visual of a 2D array\n\nTwo-Demensional Array Slicing\n\n3D arrays\n\narr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\n\narr3d.shape\n\n(2, 2, 3)\n\n\n\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nI find NumPy’s way of show the data a bit difficult to parse visually.\nHere is a way to visualize 3 and higher dimensional data:\n[ # AXIS 0                     AXIS 1 CONTAINS 2 ELEMENTS (arrays)\n    [ # AXIS 1                 EACH MEMBER OF AXIS 2 CONTAINS 2 ELEMENTS (arrays)\n        [1, 2, 3], # AXIS 2    EACH MEMBER OF AXIS 3 CONTAINS 3 ELEMENTS (integers)\n        [4, 5, 6]  # AXIS 2\n    ],  \n    [ # AXIS 1\n        [7, 8, 9], \n        [10, 11, 12]\n    ]\n]\nEach axis is a level in the nested hierarchy, i.e. a tree or DAG (directed-acyclic graph).\n\nEach axis is a container.\nThere is only one top container.\nOnly the bottom containers have data.\n\nOmit lower indices\nIn multidimensional arrays, if you omit later indices, the returned object will be a lower-dimensional ndarray consisting of all the data contained by the higher indexed dimension.\nSo in the 2 × 2 × 3 array arr3d:\n\narr3d[0] # The elements contained by the first row\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\nSaving data before modifying an array.\nYou can work with these lower dimensional arrays using views and copies.\n\nold_values = arr3d[0].copy() # Make a copy\narr3d[0] = 42                # Use a view to alter the original\narr3d                        # See result\n\narray([[[42, 42, 42],\n        [42, 42, 42]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nPutting the data back.\n\narr3d[0] = old_values\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nSimilarly, arr3d[1, 0] gives you all of the values whose indices start with (1, 0), forming a 1-dimensional array:\n\narr3d[1, 0]\n\narray([7, 8, 9])\n\n\n\nx = arr3d[1]\nx\n\narray([[ 7,  8,  9],\n       [10, 11, 12]])\n\n\n\nx[0]\n\narray([7, 8, 9])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "title": "NB: NumPy First Steps",
    "section": "Indexing 2D arrays with slices",
    "text": "Indexing 2D arrays with slices\nWe demonstrate indexing in 2D arrays.\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\n\narr[1:6]\n\narray([ 1,  2,  3,  4, 64])\n\n\n\narr2d\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\narr2d[:2]\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\narr2d[:2, 1:]\n\narray([[2, 3],\n       [5, 6]])\n\n\n\narr2d[1, :2]\n\narray([4, 5])\n\n\n\narr2d[:2, 2]\n\narray([3, 6])\n\n\n\narr2d[:, :1]\n\narray([[1],\n       [4],\n       [7]])\n\n\n\narr2d[:2, 1:] = 0\narr2d\n\narray([[1, 0, 0],\n       [4, 0, 0],\n       [7, 8, 9]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Boolean Indexing",
    "text": "Boolean Indexing\nThis a crucial topic – it applies to Pandas and R.\nYou can pass a boolean representation of an array to the array indexer (i.e. the [] suffix) and it will return only those cells that are True.\nLet’s assume that we have two related arrays: * names which holds the names associated with the data in each row, or observations, of a table. * data which holds the data associated with each feature of a table.\nThere are \\(7\\) observations and \\(4\\) features.\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnames\n\narray(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')\n\n\n\ndata = np.random.randn(7, 4)\ndata\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\n\nnames.shape, data.shape\n\n((7,), (7, 4))\n\n\nA comparison operation for an array returns an array of booleans.\nLet’s see which names are 'Bob':\n\nnames == 'Bob'\n\narray([ True, False, False,  True, False, False, False])\n\n\nNow, this boolean expression can be passed to an array indexer to the data:\n\ndata[names == 'Bob']\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674]])\n\n\nAlong the second axis, we can use a slice to select data.\n\ndata[names == 'Bob', 2:]\n\narray([[-0.91994934, -0.03050469],\n       [ 0.03409116, -2.25227674]])\n\n\n\ndata[names == 'Bob', 3]\n\narray([-0.03050469, -2.25227674])\n\n\nIf you know SQL, this is like the query:\nSELECT col3, col4 FROM data WHERE name = 'Bob'"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "title": "NB: NumPy First Steps",
    "section": "Negation",
    "text": "Negation\nHere are some examples of negated boolean operations being applied.\n\nbix = names != 'Bob'\nbix\n\narray([False,  True,  True, False,  True,  True,  True])\n\n\n\ndata[bix]\n\narray([[-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\n\ndata[~bix] # Back to Bob\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674]])\n\n\n\ndata[~(names == 'Bob')]\n\narray([[-0.4588956 ,  0.92567072, -1.59370944, -0.71058406],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136],\n       [ 0.81208885,  1.62150232, -1.02330488,  0.67404131],\n       [-0.20037847, -0.51037469,  1.32144434,  1.56994506]])\n\n\nNote that we don’t use not but instead the tilde ~ sign to negate (flip) a value.\nNor do we use and and or; instead we use & and |.\nAlso, expressions join by these operators need to be in parentheses.\n\nmask = (names == 'Bob') | (names == 'Will')\nmask\ndata[mask]\n\narray([[-0.30607318, -0.45423997, -0.91994934, -0.03050469],\n       [ 1.77215664, -0.68150083,  1.95592254,  1.29936488],\n       [ 2.1290257 ,  0.8816478 ,  0.03409116, -2.25227674],\n       [ 0.49113167, -0.18440759,  0.32058921,  1.04615136]])\n\n\n\ndata[data < 0] = 0\ndata\n\narray([[0.        , 0.        , 0.        , 0.        ],\n       [0.        , 0.92567072, 0.        , 0.        ],\n       [1.77215664, 0.        , 1.95592254, 1.29936488],\n       [2.1290257 , 0.8816478 , 0.03409116, 0.        ],\n       [0.49113167, 0.        , 0.32058921, 1.04615136],\n       [0.81208885, 1.62150232, 0.        , 0.67404131],\n       [0.        , 0.        , 1.32144434, 1.56994506]])\n\n\n\ndata[names != 'Joe'] = 7\ndata\n\narray([[7.        , 7.        , 7.        , 7.        ],\n       [0.        , 0.92567072, 0.        , 0.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [0.81208885, 1.62150232, 0.        , 0.67404131],\n       [0.        , 0.        , 1.32144434, 1.56994506]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Fancy Indexing",
    "text": "Fancy Indexing\nIn so-call fancy indexing, we use array index numbers to access data.\nThis can be used to sub-select and re-order data from an array.\nWe pass a list of item numbers, instead of an integer or integer range with :, to the indexer.\n\narr = np.empty((8, 4))\nfor i in range(8):\n    arr[i] = i\narr\n\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\n\n\nThe following says Select rows 4, 3, 0, and 6, in that order.\n\narr[[4, 3, 0, 6]]\n\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [0., 0., 0., 0.],\n       [6., 6., 6., 6.]])\n\n\nAnd we can go backwards.\n\narr[[-3, -5, -7]]\n\narray([[5., 5., 5., 5.],\n       [3., 3., 3., 3.],\n       [1., 1., 1., 1.]])\n\n\nWe can use lists to perform some complex indexing.\n\narr = np.arange(32).reshape((8, 4))\narr\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\n\n\n\narr[[1, 5, 7, 2], [0, 3, 1, 2]]  # Grab rows, then select columns from each row\n\narray([ 4, 23, 29, 10])\n\n\n\narr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] # Grab rows, then reorder columns \n\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "title": "NB: NumPy First Steps",
    "section": "Transposing Arrays and Swapping Axes",
    "text": "Transposing Arrays and Swapping Axes\nTransposing is a special form of reshaping which similarly returns a view on the underlying data without copying anything.\nArrays have the transpose method and also the special T attribute:\n\narr = np.arange(15).reshape((3, 5))\narr\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n\n\narr.T\n\narray([[ 0,  5, 10],\n       [ 1,  6, 11],\n       [ 2,  7, 12],\n       [ 3,  8, 13],\n       [ 4,  9, 14]])\n\n\nTransposing is often used when computing the dot product between two arrays.\nHere’s an example.\n\narr = np.random.randn(6, 3)\narr\n\narray([[-0.71192017,  1.12793945,  0.00398408],\n       [-0.33313537, -0.05308562,  0.73532491],\n       [-1.34038679, -0.6211279 , -1.72999099],\n       [ 0.41464889,  0.31148611, -1.61275124],\n       [ 0.34175606, -0.23790281, -0.37332351],\n       [ 1.01792075, -0.5389869 ,  1.46791149]])\n\n\n\nnp.dot(arr.T, arr)\n\narray([[ 3.73933981, -0.45355983,  2.76896447],\n       [-0.45355983,  2.10499356, -0.16471567],\n       [ 2.76896447, -0.16471567,  8.42868857]])\n\n\nFor higher dimensional arrays, transpose will accept a tuple of axis numbers to permute the axes.\nWarning – this can get confusing to conceptualize and visualize!\n\narr = np.arange(16).reshape((2, 2, 4))\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.transpose((1, 0, 2))\n\narray([[[ 0,  1,  2,  3],\n        [ 8,  9, 10, 11]],\n\n       [[ 4,  5,  6,  7],\n        [12, 13, 14, 15]]])\n\n\nSimple transposing with .T is just a special case of swapping axes. ndarray has the method swapaxes which takes a pair of axis numbers:\n\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.swapaxes(1, 2)\n\narray([[[ 0,  4],\n        [ 1,  5],\n        [ 2,  6],\n        [ 3,  7]],\n\n       [[ 8, 12],\n        [ 9, 13],\n        [10, 14],\n        [11, 15]]])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "title": "NB: NumPy First Steps",
    "section": "Universal Functions",
    "text": "Universal Functions\nA universal function, or ufunc, is a function that performs elementwise operations on data in ndarrays. You can think of them as fast vectorized wrappers for simple functions that take one or more scalar values and produce one or more scalar results.\nMany ufuncs are simple elementwise transformations, like sqrt or exp:\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.sqrt(arr)\n\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\n\n\nnp.exp(arr)\n\narray([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03])\n\n\n\nx = np.random.randn(8)\nx\n\narray([-0.81849005, -0.03252903, -0.78588415, -0.75569246,  0.28011989,\n       -0.07210453, -1.33721432,  0.57725791])\n\n\n\ny = np.random.randn(8)\ny\n\narray([ 0.45964976,  0.2479025 ,  0.655078  , -0.16776598,  1.81773551,\n       -0.568098  ,  0.01841105,  0.64186879])\n\n\n\nnp.maximum(x, y)\n\narray([ 0.45964976,  0.2479025 ,  0.655078  , -0.16776598,  1.81773551,\n       -0.07210453,  0.01841105,  0.64186879])\n\n\n\narr = np.random.randn(7) * 5\narr\n\narray([-1.07243891,  0.06744552, -5.00862819, -2.07837886,  3.17212965,\n        5.69620434, -1.53635927])\n\n\n\nremainder, whole_part = np.modf(arr)\nremainder\n\narray([-0.07243891,  0.06744552, -0.00862819, -0.07837886,  0.17212965,\n        0.69620434, -0.53635927])\n\n\n\nwhole_part\n\narray([-1.,  0., -5., -2.,  3.,  5., -1.])\n\n\n\narr\n\narray([-1.07243891,  0.06744552, -5.00862819, -2.07837886,  3.17212965,\n        5.69620434, -1.53635927])\n\n\n\nnp.sqrt(arr)\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_25317/983116409.py:2: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr)\n\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\n\nnp.sqrt(arr, arr)\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_25317/1230165595.py:2: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr, arr)\n\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\n\narr\n\narray([       nan, 0.25970275,        nan,        nan, 1.78104735,\n       2.38667223,        nan])\n\n\nnan is a special value in NumPy."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "title": "NB: NumPy Continued",
    "section": "Quick Refresher on Shape",
    "text": "Quick Refresher on Shape\nThe shape of an array is represented a tuple, e.g. (n, m) for a 2D array.\n\nThe length of the tuple is number of dimensions (i.e. axes).\nThe values of the tuple are the number of elements in each dimension (axis).\n\nConsider the array foo:\n\nimport numpy as np\n\n\nfoo = np.ones((6,4))\n\n\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nIt was created with the \\(2\\) dimensions. * The first dimension, axis 0, has \\(6\\) elements. In this case, these elements are arrays. * The second dimension, axis 1, has \\(4\\) elements. Its elements are scalars (numbers in this case).\nThe shape of foo[0] is \\(4\\). It contains \\(1\\) axis with \\(4\\) elements.\n\nfoo[0], foo[0].shape\n\n(array([1., 1., 1., 1.]), (4,))\n\n\nIt has a shape of \\(1\\) and not \\(4 \\times 1\\) because it is a vector, not a matrix.\nSO, there is a difference between a vector and a 1-column matrix.\n\nReshaping\nIf we want to make it into a 1-column matrix, we need to reshape it using np.reshape().\nNote that the first value of the shape argument is \\(-1\\). This means use the length of the vector that is passed to it.\n\n## np.reshape?\n\n\nfoo2 = np.reshape(foo[0], (-1, 1))\n\n\nfoo2, foo2.shape\n\n(array([[1.],\n        [1.],\n        [1.],\n        [1.]]),\n (4, 1))\n\n\nWhen indexing an array, think of the positions of the comma-delimitted tuple as the axis.\nThe values are the element offsets in the containing array. The\n\nfoo[2:, 2:]\n##   ^   ^ \n##   0   1  <- AXIS NUMBER\n\narray([[1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.]])\n\n\n\n\nExample: The Normal Equation\nSometimes, you need to convert vectors into 1-column matrices to make certain linear algebraic functions work.\nConsider two random variables, \\(x\\) and \\(y\\).\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nWe can fit a regression line using the normal equation, which appears in this week’s homework.\n\\(\\begin{aligned} \\hat\\beta_i=(x^Tx)^{−1}x^Ty \\end{aligned}\\)\nHere is a standward way of expressing it in NumPy:\n\nget_beta1 = lambda x, y: (np.linalg.inv(x.T.dot(x))) * (x.T.dot(y))\n\nHowever, it will fail if we pass it our two variables, x and y.\nThe reason is that it expects x to be a matrix, since it is designed to handle n-dimension predictor variables, usually represented as \\(\\textbf{X}\\).\n\nget_beta1(x, y)\n\nLinAlgError: 0-dimensional array given. Array must be at least two-dimensional\n\n\nThe revised function will work with a vector as x:\n\\(\\hat\\beta_i = \\large\\frac{1}{x^Tx} \\small(x^Ty)\\)\n\nget_beta2 = lambda x, y: (1 / x.T.dot(x)) * (x.T.dot(y))\n\n\nget_beta2(x, y)\n\n0.025226057106433126\n\n\nWe can fix the problem in the general case by converting our vector into a matrix using np.reshape().\n\nx_as_matrix = np.reshape(x, (-1, 1))\n\n\nget_beta1(x_as_matrix, y)\n\narray([[0.02522606]])\n\n\n\nget_beta1(x_as_matrix, y)[0][0]\n\n0.025226057106433126\n\n\n\nget_beta1(x_as_matrix, y)[0][0] == get_beta2(x, y)\n\nTrue\n\n\nOne take-away here is that there is a difference betweek a scalar value and a 1 x 1 array."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "title": "NB: NumPy Continued",
    "section": "Broadcasting",
    "text": "Broadcasting\nWhat happens when you try to perform an element-wise operation on two arrays of different shape?\nNumPy will convert a low-dimensional array into a high-dimensional array to allow the operation to take place.\nThis is called broadcasting.\nLet’s look at at our array foo:\n\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nIf we multiply it by 5, the scalar is converted into an array of the same shape as foo with the value 5 broadcast to populate the entire array.\n\nfoo * 5\n\narray([[5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.]])\n\n\nIf we want to multiply an array by a vector, the vector is broadcast to become a 2D array.\n\nfoo * np.array([5, 10, 6, 8])\n\narray([[ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.]])\n\n\nNote that NumPy can’t always make the adjustment:\n\nfoo * np.array([5, 10])\n\nValueError: operands could not be broadcast together with shapes (6,4) (2,)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "title": "NB: NumPy Continued",
    "section": "Array-Oriented Programming",
    "text": "Array-Oriented Programming\nUsing NumPy arrays enables you to express many kinds of data processing tasks as concise array expressions without writing loops.\nThis practice of replacing explicit loops with array expressions is referred to by some people as vectorization.\nVectorized array operations are often significantly faster than their pure Python equivalents.\nThey are also visually concise and elegant, although loops have the virtue of visualizing what’s under the hood in an algorithm."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "title": "NB: NumPy Continued",
    "section": "Expressing Conditional Logic as Array Operations",
    "text": "Expressing Conditional Logic as Array Operations\n\nnp.where()\nThe np.where function is a vectorized version of the ternary expression x if condition else y.\nSuppose we had a boolean array and two arrays of values:\n\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\n\nresult = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]\n\n\nresult\n\n[1.1, 2.2, 1.3, 1.4, 2.5]\n\n\nHere is the vectorized version:\n\nresult = np.where(cond, xarr, yarr)\n\n\nresult\n\narray([1.1, 2.2, 1.3, 1.4, 2.5])\n\n\n\narr = np.random.randn(4, 4)\n\n\narr\n\narray([[-1.62841964, -0.61629533, -1.58096088, -0.31788915],\n       [-0.23489367, -1.4603893 , -1.05910493, -0.88842957],\n       [ 0.69309447, -0.79721697, -0.5200502 , -0.47874849],\n       [-1.4261959 , -0.35822251,  0.10012391, -1.69093032]])\n\n\n\narr > 0\n\n\nnp.where(arr > 0, 2, -2)\n\n\nnp.where(arr > 0, 2, arr) # set only positive values to 2"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "title": "NB: NumPy Continued",
    "section": "Mathematical and Statistical Methods",
    "text": "Mathematical and Statistical Methods\nStatistical computations are aggregate functions apply to vectors within an array.\nIn a 2D array, they can be applied to rows or columns, i.e. axis \\(0\\) or axis \\(1\\).\nLet’s create an array of random values. We can think of it is a table of observations and random variables.\n\narr = np.random.randn(5, 4)\n\n\narr\n\n\n.mean()\n\narr.mean()\n\n\nnp.mean(arr)\n\n\narr.mean(axis=1)\n\n\narr.mean(axis=0)\n\n\n\n.sum()\n\narr.sum()\n\nRow wise aggregration\n\narr.sum(axis=0)\n\n\narr.mean(axis=1)\n\nColumn-wise aggregration\n\n\n.cumsum()\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n\n\narr.cumsum()\n\n\narr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n\n\narr\n\n\narr.cumsum(axis=0)\n\n\narr.cumprod(axis=1)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "title": "NB: NumPy Continued",
    "section": "Methods for Boolean Arrays",
    "text": "Methods for Boolean Arrays\n\n.sum()\nSince booleans are \\(0\\)s and \\(1\\), we can sum them to get a total truth count.\n\narr = np.random.randn(100)\n(arr > 0).sum() # Number of positive values\n\n\nbools = np.array([False, False, True, False])\n\n\n\n.any()\n\nbools.any()\n\n\n\n.all()\n\nbools.all()"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "title": "NB: NumPy Continued",
    "section": "Sorting",
    "text": "Sorting\n\n.sort()\n\narr = np.random.randn(6)\n\n\narr\n\n\narr.sort()\n\n\narr\n\n\narr = np.random.randn(5, 3)\n\n\narr\n\n\narr.sort(1)\n\n\narr\n\n\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))] # 5% quantile\n\n\n0.05 * len(large_arr)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "title": "NB: NumPy Continued",
    "section": "Unique and Other Set Logic",
    "text": "Unique and Other Set Logic\n\nnp.unique()\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnp.unique(names)\n\n\nsorted(set(names))\n\n\nints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\nnp.unique(ints)\n\n\n\nnp.in1d()\nTests whether each element of a 1-D array is also present in a second array.\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])\nnp.in1d(values, [2, 3, 6])"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "title": "NB: NumPy Continued",
    "section": "File Input and Output with Arrays",
    "text": "File Input and Output with Arrays\n\nnp.save()\nSave an array to a binary file in NumPy .npy format.\nAutomatically adds the .npy file extension.\n\narr = np.arange(10)\nnp.save('some_array', arr)\n\n\n\nnp.load()\n\nnp.load('some_array.npy')\n\n\n\nnp.savetxt()\nSave an array to a text file.\n\n## np.savetxt?\n\n\nnp.savetxt('some_array.txt', arr)\n\n\n## !more some_array.txt\n\n\n\nnp.savez()\nSave several arrays into a single file in uncompressed .npz format.\n\nnp.savez('array_archive.npz', a=arr, b=arr)\n\n\narch = np.load('array_archive.npz')\narch['b']\n\n\nnp.savez_compressed('arrays_compressed.npz', a=arr, b=arr)\n\nClean up …\n\n!rm some_array.npy\n!rm some_array.txt\n!rm array_archive.npz\n!rm arrays_compressed.npz"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "title": "NB: NumPy Continued",
    "section": "Linear Algebra",
    "text": "Linear Algebra\n\n.dot()\nDot product of two arrays. Specifically, - If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation). - If both a and b are 2-D arrays, it is matrix multiplication, but using matmul() or a @ b is preferred. - If either a or b is 0-D (scalar), it is equivalent to multiply() and using numpy.multiply(a, b) or a * b is preferred. - If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b. - If a is an N-D array and b is an M-D array (where M>=2), it is a sum product over the last axis of a and the second-to-last axis of b:\n    dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])\n\nx = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])\n\n\nx, y\n\n\ny\n\n\nx.dot(y)\n\n\nnp.dot(x, y)\n\n\nnp.dot(x, np.ones(3))\n\nIn NumPy, the @ operator means matrix multiplication.\n\nx @ np.ones(3)\n\n\n\nnp.linalg.inv()\n\nfrom numpy.linalg import inv, qr\nX = np.random.randn(5, 5)\nmat = X.T.dot(X)\ninv(mat)\n\n\nmat.dot(inv(mat))\nq, r = qr(mat)\n\n\nr"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "title": "NB: NumPy Continued",
    "section": "Pseudorandom Number Generation",
    "text": "Pseudorandom Number Generation\n\nnp.random.normal()\n\nsamples = np.random.normal(size=(4, 4))\nsamples\n\n\n\n\nfrom random import normalvariate\nN = 1000000\n%timeit samples = [normalvariate(0, 1) for _ in range(N)]\n%timeit np.random.normal(size=N)\n\n\nnp.random.seed(1234)\n\n\nrng = np.random.RandomState(1234)\n\n\nrng.randn(10)\n\n\n\nExample: Random Walks\nLet simulate a random walk. The walk will be represented as a vector.\nWe’ll do it first as loop, then with vectorization.\nLoops\n\nimport random\nposition = 0\nwalk = [position] # initialize the walk\nsteps = 1000\nfor i in range(steps):\n    step = 1 if random.randint(0, 1) else -1  # Coin toss\n    position += step\n    walk.append(position)\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.figure()\nplt.plot(walk[:100]);\n\nVectors\n\nnp.random.seed(12345)\n\n\nnsteps = 1000\ndraws = np.random.randint(0, 2, size=nsteps)\nsteps = np.where(draws > 0, 1, -1)\nwalk2 = steps.cumsum()\n\n\nplt.plot(walk[:100]);\n\n\nwalk2.min(), walk2.max()\n\n\n\nSimulating Many Random Walks at Once\n\nnwalks = 5000\nnsteps = 1000\n\n\ndraws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1\nsteps = np.where(draws > 0, 1, -1)\nwalks = steps.cumsum(1)\n\n\ndraws\n\n\nwalks\n\n\nwalks.max(), walks.min()\n\n\nhits30 = (np.abs(walks) >= 30).any(1)\nhits30\n\n\nhits30.sum() # Number that hit 30 or -30\n\n\ncrossing_times = (np.abs(walks[hits30]) >= 30).argmax(1)\ncrossing_times.mean()\n\n\nsteps = np.random.normal(loc=0, scale=0.25, size=(nwalks, nsteps))\n\nFeel free to experiment with other distributions for the steps other than equal-sized coin flips. You need only use a different random generator method, like standard_normal to generate normally distributed steps with some mean and standard deviation:\n\ndraws = 0.25 * rng.standard_normal((nwalks, nsteps)) # Walks: observations, Steps: features\n\n\nsample_walk = np.random.choice(len(draws))\nplt.plot(draws[sample_walk])\nplt.title(f\"Walk #{sample_walk}\");"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-time",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-time",
    "title": "NB: Python Timing Experiment",
    "section": "Using time",
    "text": "Using time\nOne way to get the runtime of a code block is to use the time module.\nAbout time\nThe time module provides a number of functions to get and compute time.\nThe simplest function is time(), which just returns the number of seconds elapsed since the Epoch.\nThe Epoch is 00:00:00 UTC on 1 January 1970, excluding leapseconds.\nIt corresponds roughly to when Unix was invented.\n\nfrom time import time\n\n\nt0 = time()\n\nfor i in range(10):\n    print(i, end=' ')\n\nt1 = time()\n\ndelta_t = t1 - t0\n\n0 1 2 3 4 5 6 7 8 9 \n\n\n\nprint('t0 =', t0)\nprint('t1 =', t1)\nprint('runtime:', delta_t)\n\nt0 = 1663428793.540521\nt1 = 1663428793.541329\nruntime: 0.0008080005645751953"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "title": "NB: Python Timing Experiment",
    "section": "Using timeit",
    "text": "Using timeit\nTo get a better measure of runtime, we can use timeit, which measures timing across many runs.\nNote that timeit() will return the runtime across ALL runs. To get the mean runtime, you need to divide by the number of runs.\ntimeit() works by evaluating code blocks written as strings.\n\nfrom timeit import timeit\n  \nNUM_RUNS = 100\n\nDefine code blocks to compare.\n\nloop_code = ''' \nvals = []\nfor i in range(1, 100001):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n'''\n\nlistcomp_code = ''' \nvals = [i*-1 for i in range(1,100001) if i % 2 == 1 ]\n'''\n\nPass code block strings to timeit functions.\n\nloop_mean_time = timeit(stmt = loop_code, number = NUM_RUNS) / NUM_RUNS\nlistcomp_mean_time = timeit(stmt = listcomp_code, number = NUM_RUNS) / NUM_RUNS\n\nPrint the results\n\nt_diff = loop_mean_time / listcomp_mean_time\nprint('loop =', loop_mean_time)\nprint('comp =', listcomp_mean_time)\nprint('loop/list =', t_diff)\nprint('list/loop =', 1/t_diff)\n\nloop = 0.011182495189999885\ncomp = 0.00927148506000009\nloop/list = 1.2061169400190757\nlist/loop = 0.8291070018336566"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "title": "NB: Python Timing Experiment",
    "section": "Using Magic",
    "text": "Using Magic\nInstead of calling time and timeit directly, we can use the so-called magic commands.\nMagic commands are % or %% prefixed commands that work in Jupyter notebooks and other IPython environments.\n% commands apply to single lines; they go at the beginning of the line.\n%% commands apply to cell blocks; they go at the top of the cell.\nMagic commands can take arguments. For more info, see * Chapter 3 in Wes McKinney’s Python for Data Analysis. * The official documentation\nPlacing %%timeit or %%time at the top of a cell will appy these functions to the cell block.\nPlacing %timeit or %time as the first item on a line of code will apply the to a single line.\nTypes of Time\n\nWall clock time measures how much time has passed, as if you were looking at the clock on your wall.\nCPU time refers to how many seconds the CPU was actually busy.\n\n\nimax = 10000\n\nUsing time to compare loop and comprehension\n\n%%time\n\nvals = []\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\nCPU times: user 1.69 ms, sys: 35 µs, total: 1.72 ms\nWall time: 1.73 ms\n\n\n\n%time vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\nCPU times: user 940 µs, sys: 32 µs, total: 972 µs\nWall time: 975 µs\n\n\nUsing timeit to compare loop and comprehension\n\n%%timeit\n\nvals = []\nimax = 10000\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\n1.08 ms ± 88 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\nvals[:10]\n\n[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\n\n\n\n%timeit vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\n749 µs ± 3.32 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "title": "NB: Basic File I/O",
    "section": "Open Files with open()",
    "text": "Open Files with open()\nLet’s open a sample CSV file, biostats.csv.\n\nThis has some biometric statistics for a group of office workers.\nThere are 18 records, recording Name, Sex, Age, Height, Weight\nThere is an initial header line.\nThis file was downloaded from https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html and modified slightly.\n\n\nsrc_file_name = \"./sample_data_files/biostats.csv\"\n\nWe call the open() function and pass it two parameters: * The name of the file we want to open. * The mode in which the file is opened. It defaults to r which means open for reading in text mode. Other common values are: * w for writing (truncating the file if it already exists) * x for creating and writing to a new file * a for appending\nThe returns a file object whose type depends on the mode and through which the standard file operations such as reading and writing are performed. So, to read from the file, you need to have specified type r and to write you need to have specified w.\nThe file object is an iterator.\nFor more info, check out the Python docs or run open? from a code cell.\nNote, we sometimes call the file object a file “handle.”\n\n## open?\n\n\nfile_handle = open(src_file_name, 'r')\n\n.read() reads in the file as one long string.\n\nfile_as_big_string = file_handle.read()\n\n\nfile_as_big_string[:1000]\n\nSince the file object is an iterator, we can’t get the string again from the object.\n\nfile_as_big_string = file_handle.read() # Try reading from the handle again\nfile_as_big_string[:1000] # Nothing there since the iterator is exhausted\n\nSo, let’s create a new handle, read in the contents again, and then parse our string by newlines using .split(\"\\n\").\n\nfile_handle = open(\"./sample_data_files/biostats.csv\", 'r')\nfile_as_big_string = file_handle.read()\nfile_as_big_string.split(\"\\n\")\n\nA short-cut to this process is to call the .readlines() method, which returns a pre-made list of lines.\nNote that the newlines are preserved in this case.\n\nfile_handle = open(src_file_name, 'r')\nfile_as_list_of_strings = file_handle.readlines()\n\n\nfile_as_list_of_strings\n\nFile objects should be closed when you are done with them.\n\nfile_handle.close()"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "title": "NB: Basic File I/O",
    "section": "Use a with block",
    "text": "Use a with block\n… to automatically open and close the file i/o object\nThere is a better way to handle objects that need to be closed.\nOther examples of such objects are database handles.\nwith will automatically open and close the file handle.\n\nwith open(src_file_name, 'r') as infile:\n    file_as_list = infile.readlines()\n\n\nfile_as_list"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "title": "NB: Basic File I/O",
    "section": "Convert into a 2D list",
    "text": "Convert into a 2D list\nLet’s covert our list of strings to a list of lists, the former being the rows of data table and the latter the cells.\n\n## %%time\nlist_2d = []\nwith open(src_file_name, 'r') as infile:\n    for line in infile.readlines():\n        row = line.rstrip().split(\",\") # Note the use of rstrip()\n        list_2d.append(row)\n\n\nlist_2d\n\nNote that we now have do something with the column names and handle formating and casting each cell."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "title": "NB: Basic File I/O",
    "section": "Using a list comprehension",
    "text": "Using a list comprehension\nWe can replace the entire code block above nested list comprehensions.\nRemember, you can put any expression into the first part of a comprehension, even another comprehension.\n\nlist_2d = [[cell.strip() for cell in line.rstrip().replace('\"', '').split(\",\")] \n        for line in open(src_file_name, 'r').readlines()]\n\n\nlist_2d"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "title": "NB: Basic File I/O",
    "section": "Converting to Numpy",
    "text": "Converting to Numpy\n\nimport numpy as np\n\nNumpy arrays must be of the same data types, and it also has no concept of column names, so we remove this row from our data.\n\ncol_names = list_2d[0]\n\n\ncol_names\n\n\nnp_matrix = np.array(list_2d[1:])\n\n\nnp_matrix\n\nHere we demonstrate slicing along both dimensions."
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "title": "NB: Basic File I/O",
    "section": "Array Slices",
    "text": "Array Slices\n\nnp_matrix[:2, :2]"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "title": "NB: Basic File I/O",
    "section": "Converting Data Types",
    "text": "Converting Data Types\nLet’s try to convert the data types of the numeric columns from strings to integers. One thing we might do is the following:\n\nnp_matrix[:, 2:5].astype(int)\n\nWe see that the strings are converted to integers.\nSo, let’s try to save the conversion results to the original array:\n\nnp_matrix[:, 2:5] = np_matrix[:, 2:5].astype(int)\n\n\nnp_matrix\n\nWhat happened?"
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "title": "NB: Basic File I/O",
    "section": "Some Difficulties",
    "text": "Some Difficulties\nIt is pretty easy to import CSV files this way, but there are many difficulties you are likely to encounter if you use this as your default pattern for importing data. Here are just a few: - Not all sources are well-formed. They may have delimitters that are complex to parse, and the the data themselve may be hard to parse. - You have to keep the column names in a separate list or vector and then associate them with the data if and when necessary. - You have to convert each column vector into its appropriate data type yourself. Or, you have to create separate 2D arrays for each collection of columns with a common data type. This process also invovles human inspection of the file, as opposed to have a program try to figure it out for you.\nFor these reasons, other tools such as Pandas were created to make the work of a data scientist a bit easier and more productive."
  },
  {
    "objectID": "modules/m06/m06-intro.html#topics",
    "href": "modules/m06/m06-intro.html#topics",
    "title": "M06 Pandas",
    "section": "Topics",
    "text": "Topics\n\nIntroduce Pandas and its relationship to NumPy\nUnderstand difference between Series and DataFrames\nUnderstand role of indexes in Pandas\nReview fundamental methods in Pandas"
  },
  {
    "objectID": "modules/m06/m06-intro.html#readings",
    "href": "modules/m06/m06-intro.html#readings",
    "title": "M06 Pandas",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nMcKinney 2017, Chapter 5: Getting Started with Pandas\n\n\n\n\nOptional\n\n\nGetting Started in Pandas (Official)\n\n\n<"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-dataframes",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-dataframes",
    "title": "NB: Introducting Pandas",
    "section": "Pandas DataFrames",
    "text": "Pandas DataFrames\nJust as NumPy introduces the n-dimensional array as a new data structure to Python, so Pandas introduces two:\nThe Series: a 1-dimensional labeled array capable of holding any data type.\nThe DataFrame: a 2-dimensional labeled data structure with columns of potentially different types.\n\nNote: Pandas used to have a 3-dimensional structure called a panel, but it has been removed from the library.\nIronically, the name “pandas” was partly derived the word “panel”: \\(pan(el)-da(ta)-s\\).\nTo handle higher dimensional data, the Pandas team suggests using XArray, which also build on NumPy arrays.\n\nBy far, the most important data structure in Pandas is the dataframe, with the series playing a supporting – but crucial – role.\nIn fact, dataframe objects are built out of series objects.\nSo, to understand what a dataframe is and how it behaves, you need to understand what is series is and how it is constructed.\nBefore going into that, here are two quick observations about dataframes:\nFirst, dataframes are inspired by the R structure of the same name. They have many similarities, but there are fundamental differences between the two that go beyond mere language differences. Most important is the Pandas dataframes have indexes, whereas R dataframes do not.\nSecond, it is helpful to think of Pandas as wrapper around NumPy and Matplotlib that makes it much easier to perform common operations, like select data by column name or visualizing plots. But this comes at a cost – Pandas is slower than NumPy. The represents the classic trade-off between ease-of-use for humnas and machine performance."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "title": "NB: Introducting Pandas",
    "section": "Series Objects",
    "text": "Series Objects\n\nAxis Labels (Indexes)\nA series is at heart a one-dimensional array with labels along its axis. * It’s data must be of a single type, like NumPy arrays (which they are internally).\nThe axis labels are collectively referred to as the index.\nThink of the index as a separate data structure that is attached to the array. * The array holds the data. * The index holds the names of the observations or things that the data are about.\nSo, Pandas moves us out of what we called anonymous data.\nWhy have an index? * Provides a way to access elements of the array by name * Allows series objects that share index labels to be combined\nIn fact, a dataframe is a collection of series with a common index.\nTo this collection of series the dataframe adds a set of labels along the horizontal axis. * The index is axis 0 * The columns are another kind of index, called axis 1\nNote that both index and column labels can be multidimensional. * The are called Hierarchical Indexes and go the technical name of MultiIndexes. * As an example, consider that a table of text data people might have a two-column index: (book_id, chap_id) * See the Pandas documentation.\nIt is crucial to understand the difference between the index of a dataframe and its data in order to understand how dataframes work.\nMany a headache is caused by not understanding this difference :-)\nIndexes are powerful and controversial. * They allow for all kinds of magic to take place when combining and accessing data. * But they are expensive and sometimes hard to work with (especially multiindexes). * They are especially difficult if you are coming from R and expecting dataframes to behave a certain way.\n\n\nSome visuals to help\n\n\nBut enough introduction.\nLet’s dive into how Pandas objects work in practice.\nWe import pandas like this, using the alias pd by convention:\n\nimport pandas as pd\n\nWe almost always import NumPy, too, since we use many of its functions with Pandas.\n\nimport numpy as np"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#dataframes-constructors",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#dataframes-constructors",
    "title": "NB: Introducting Pandas",
    "section": "DataFrames Constructors",
    "text": "DataFrames Constructors\nSeveral ways to create pandas dataframes\nPassing a dictionary of objects:\n\ndf = pd.DataFrame({\n    'x': [0, 2, 1, 5], \n    'y': [1, 1, 0, 0], \n    'z': [True, False, False, False]\n})\n\n\ndf\n\n\ndf.index\n\n\nlist(df.index)\n\n\ndf.columns\n\n\nlist(df.columns)\n\n\ndf.values\n\n\ntype(df.values)\n\nPassing the three required pieces: - columns as list - index as list - data as list of lists\n\ndf2 = pd.DataFrame(\n    columns=['x','y'], \n    index=['row1','row2','row3'], \n    data=[[9,3],[1,2],[4,6]])\n\n\ndf2\n\nPassing a nested list (or list-like):\n\nmy_data = [\n    ('a', 1, True),\n    ('b', 2, False)\n]\ndf3 = pd.DataFrame(my_data, columns=['f1', 'f2', 'f3'])\n\n\ndf3"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "title": "NB: Introducting Pandas",
    "section": "Naming indexes",
    "text": "Naming indexes\n\n##| tags: []\ndf3.index.name = 'obs_id'\n\n\n##| tags: []\ndf3"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "title": "NB: Introducting Pandas",
    "section": "Copying DataFrames with copy()",
    "text": "Copying DataFrames with copy()\nUse copy() to give the new df a clean break from the original.\nOtherwise, the copied df will point to the same object as the original.\n\ndf = pd.DataFrame({'x':[0,2,1,5], 'y':[1,1,0,0], 'z':[True,False,False,False]}) \n\n\ndf_deep    = df.copy()  # deep copy; changes to df will not pass through\ndf_shallow = df         # shallow copy; changes to df will pass through\n\n\ndf\n\n\ndf.x = 1\n\n\ndf\n\n\ndf_shallow\n\n\ndf_deep\n\n\ndf = pd.DataFrame({'x':[0,2,1,5], 'y':[1,1,0,0], 'z':[True,False,False,False]}) \n\nNotice df_shallow mirrors changes to df, since it references its indices and data.\ndf_deep does not reference df, and so changes to df do not impact df_deep."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "title": "NB: Introducting Pandas",
    "section": "Column Data Types",
    "text": "Column Data Types\n\nWith .types\n\ndf.dtypes\n\n\n\nWith .info()\n\ndf.info()"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "title": "NB: Introducting Pandas",
    "section": "Column Renaming",
    "text": "Column Renaming\nCan rename one or more fields at once using a dict.\nRename the field z to is_label:\n\ndf = df.rename(columns={'z': 'is_label'})\n\n\ndf"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "title": "NB: Introducting Pandas",
    "section": "Column Referencing",
    "text": "Column Referencing\nUse bracket notation or dot notation.\nBracket\n\ndf['y']\n\nDot (i.e. as object attribute)\n\ndf.y\n\nDot notation is very convenient, since as object attributes they can be tab-completed in various editing environments.\nBut: - It only works if the column names are not reserved words - It can’t be used when created a new column (see below)\nIt is convenient to names columns with a prefix, e.g. doc_title, doc_year, doc_author, etc.\nColumn attributes and methods work with both:\n\ndf.y.values, df['y'].values\n\nshow only the first value, by indexing:\n\ndf.y.values[0]"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "title": "NB: Introducting Pandas",
    "section": "Column Selection",
    "text": "Column Selection\nYou select columns from a dataframe by passing a value or list (or any expression that evaluates to a list).\n\ndf['x']\n\n\ndf[['x']]\n\n\ndf[['y', 'x']]\n\n\ndf[[col for col in df.columns if col not in ['x','y']]]"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "title": "NB: Introducting Pandas",
    "section": "Adding New Columns",
    "text": "Adding New Columns\nIt is typical to create a new column from existing columns.\nIn this example, a new column (or field) is created by summing x and y:\n\ndf['x_plus_y'] = df.x + df.y\n\n\ndf\n\nNote the use of bracket notation on the left."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "title": "NB: Introducting Pandas",
    "section": "Removing Columns with del and .drop()",
    "text": "Removing Columns with del and .drop()\n\ndel\ndel can drop a DataFrame or single columns from the frame\n\ndf_drop = df.copy()\n\n\ndf_drop.head(2)\n\n\ndel df_drop['x']\n\n\ndf_drop\n\n\n\n.drop()\nCan drop one or more columns.\ntakes axis parameter: - axis=0 refers to rows\n- axis=1 refers to columns\n\ndf_drop = df_drop.drop(['x_plus_y', 'is_label'], axis=1)\n\n\ndf_drop"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "title": "NB: Introducting Pandas",
    "section": "Load Iris Dataset",
    "text": "Load Iris Dataset\nLet’s load a bigger data set to explore more functionality.\nThe function load_dataset() in the seaborn package loads the built-in dataset.\n\nimport seaborn as sns\niris = sns.load_dataset('iris')\n\nCheck the data type of iris:\n\ntype(iris)\n\n\nSee the first and last records with .head() and .tail()\n\niris.head()\n\n\niris.head(10)\n\n\niris.tail()\n\n\n\nInspect metadata\n\niris.dtypes\n\nshape (rows, columns):\n\niris.shape\n\nalternatively, len() returns row (record) count:\n\nlen(iris)\n\ncolumn names:\n\niris.columns\n\n\niris.index\n\n\n\nGet it all with .info()\n\niris.info()"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "title": "NB: Introducting Pandas",
    "section": "The Index",
    "text": "The Index\n\niris.index\n\nWe can name indexes, and it is important to do so in many cases.\n\niris.index.name = 'obs_id'\n\nWe can also redefine indexes to reflect the logic of our data.\nIn this data set, the species of the flower is part of its identity, so it can be part of the index.\n(Note that is also a label that can be used for training a model to predict the species of an iris flower. In that use case, the column would be pulled out into a separate vector.)\n\niris_w_idx = iris.reset_index().set_index(['species','obs_id'])\n\n\niris_w_idx"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Row Selection (Filtering)",
    "text": "Row Selection (Filtering)\n\niloc[]\nYou can extracting rows using indexes with iloc[].\nThis fetches row 3, and all columns.\n\niris.iloc[2]\n\nfetch rows with indices 1,2 (the right endpoint is exclusive), and all columns.\n\niris.iloc[1:3]\n\nfetch rows with indices 1,2 and first three columns (positions 0, 1, 2)\n\n\nCombining Filtering and Selecting\nSo, remember the comma notation from NumPy – it is used here.\nThe first element is a row selector, the second a column selector.\nIn database terminology, row selection is called filtering.\n\niris.iloc[1:3, 0:3]\n\nYou can apply slices to column names too. You don’t need .iloc[] here.\n\niris.columns[0:3]\n\n\n\n.loc[]\nFiltering can also be done with .loc[]. This uses the row, column labels (names).\nHere we ask for rows with labels (indexes) 1-3, and it gives exactly that\n.iloc[] returned rows with indices 1,2.\nAuthor note: This is by far the more useful of the two in my experience.\n\niris.loc[1:3]\n\nSubset on columns with column name (as a string) or list of strings\n\niris.loc[1:3, ['sepal_length','petal_width']]\n\nSelect all rows, specific columns\n\niris.loc[:, ['sepal_length','petal_width']]\n\n\n\n.loc[] with MultiIndex\n\niris_w_idx.loc['setosa']\n\n\niris_w_idx.loc['setosa', 'sepal_length'].head()\n\n\niris_w_idx.loc['setosa', 'sepal_length'].to_frame().head()\n\nWe use a tuple to index multiple index levels.\nNote that you can’t pass slices here – and this where indexing can get sticky.\n\niris_w_idx.loc[('setosa', 5)]\n\n\n\nAnother Example\n\ndf_cat = pd.DataFrame(\n    index=['burmese', 'persian', 'maine_coone'],\n    columns=['x'],\n    data=[2,1,3]\n)\n\n\ndf_cat\n\n\ndf_cat.iloc[:2]\n\n\ndf_cat.iloc[0:1]\n\n\ndf_cat.loc['burmese']\n\n\ndf_cat.loc[['burmese','maine_coone']]"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Boolean Filtering",
    "text": "Boolean Filtering\nIt’s very common to subset a dataframe based on some condition on the data.\n🔑 Note that even though we are filtering rows, we are not using .loc[] or .iloc[] here.\nPandas knows what to do if you pass a boolean structure.\n\niris.sepal_length >= 7.5\n\n\niris[iris.sepal_length >= 7.5]\n\n\niris[(iris['sepal_length' ]>= 4.5) & (iris['sepal_length'] <= 4.7)]\n\n\nMasking\nHere’s an example of masking using boolean conditions passed to the dataframe selector:\nHere are the values for the feature sepal length:\n\niris.sepal_length.values\n\nAnd here are the boolean values generated by applying a comparison operator to those values:\n\nmask = iris.sepal_length >= 7.5\n\n\nmask.values\n\nThe two sets of values have the same shape.\nWe can now overlay the logical values over the numeric ones and keep only what is True:\n\niris.sepal_length[mask].values"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "title": "NB: Introducting Pandas",
    "section": "Working with Missing Data",
    "text": "Working with Missing Data\nPandas primarily uses the data type np.nan from NumPy to represent missing data.\n\ndf_miss = pd.DataFrame({\n    'x':[2, np.nan, 1], \n    'y':[np.nan, np.nan, 6]}\n)\n\n\ndf_miss\n\n\n.dropna()\nThis will drop all rows with missing data in any column.\nDetails\n\ndf_drop_all = df_miss.dropna()\ndf_drop_all\n\nThe subset parameter takes a list of column names to specify which columns should have missing values.\n\ndf_drop_x = df_miss.dropna(subset=['x'])\ndf_drop_x\n\n\n\n.fillna()\nThis will replace missing values with whatever you set it to, e.g. \\(0\\)s.\nDetails\nWe can pass the results of an operation – for example to peform simple imputation, we can replace missing values in each column with the median value of the respective column:\n\ndf_filled = df_miss.fillna(df_miss.median())\n\n\ndf_filled"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "title": "NB: Introducting Pandas",
    "section": "Sorting",
    "text": "Sorting\n\n.sort_values()\nSort by values - by parameter takes string or list of strings - ascending takes True or False - inplace will save sorted values into the df\nDetails\n\niris.sort_values(by=['sepal_length','petal_width'])\n\n\n\n.sort_index()\nSort by index. Example sorts by descending index\n\niris.sort_index(axis=0, ascending=False)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "title": "NB: Introducting Pandas",
    "section": "Statistics",
    "text": "Statistics\n\ndescribe()\n\niris.describe()\n\n\niris.describe().T\n\n\niris.species.describe()\n\n\niris.sepal_length.describe()\n\n\n\nvalue_counts()\nThis is a highly useful function for showing the frequency for each distinct value.\nParameters give the ability to sort by count or index, normalize, and more.\nDetails\n\niris.species.value_counts()\n\nShow percentages instead of counts\n\niris.species.value_counts(normalize=True)\n\nThe methods returns a series that can be converted into a dataframe.\n\nSEPAL_LENGTH = iris.sepal_length.value_counts().to_frame('n')\n\n\n## SEPAL_LENGTH\n\nYou can run .value_counts() on a column to get a kind of histogram:\n\nSEPAL_LENGTH.sort_index().plot.bar(figsize=(8,4), rot=45);\n\n\n\n.mean()\nOperations like this generally exclude missing data.\nSo, it is import to convert missing data to values if they need to be considered in the denominator.\n\niris.sepal_length.mean()\n\n\n\n.max()\n\niris.sepal_length.max()\n\n\n\n.std()\nThis standard deviation.\n\niris.sepal_length.std()\n\n\n\n.corr()\n\niris.corr()\n\nCorrelation can be computed on two fields by subsetting on them:\n\niris[['sepal_length','petal_length']].corr()\n\n\niris[['sepal_length','petal_length','sepal_width']].corr()"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "title": "NB: Introducting Pandas",
    "section": "Styling",
    "text": "Styling\n\niris.corr().style.background_gradient(cmap=\"Spectral\", axis=None)\n\n\niris.corr().style.bar(axis=None)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "title": "NB: Introducting Pandas",
    "section": "Visualization",
    "text": "Visualization\nScatterplot using Seabprn on the df columns sepal_length, petal_length.\nVisualization will be covered separately in more detail.\n\niris.plot.scatter('sepal_length', 'petal_length');\n\n\niris.sort_values(list(iris.columns)).plot(style='o', figsize=(10,10));\n\n\nfrom pandas.plotting import scatter_matrix\n\n\nscatter_matrix(iris, figsize=(10,10));"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Save to CSV File",
    "text": "Save to CSV File\nCommon to save df to a csv file. The full path (path + filename) is required.\nThere are also options to save to a database and to other file formats,\nCommon optional parameters: - sep - delimiter - index - saving index column or not\nDetails\n\niris.to_csv('./iris_data.csv')"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Read from CSV File",
    "text": "Read from CSV File\nread_csv() reads from csv into DataFrame\ntakes full filepath\nDetails\n\niris_loaded = pd.read_csv('./iris_data.csv')\n\n\niris_loaded.head(2)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#set-up",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#set-up",
    "title": "NB: Introducing Pandas II",
    "section": "Set Up",
    "text": "Set Up\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\niris = sns.load_dataset('iris')\n\n\niris.head(2)\n\n\nimport sys\nsys.getsizeof(iris)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "title": "NB: Introducing Pandas II",
    "section": "Apply Lambda Functions with .apply()",
    "text": "Apply Lambda Functions with .apply()\nApply a transformation to each record. Uses a lambda function.\nThe apply() method should be used after you have established that you can’t use a vectorized function.\n\niris['sepal_len_sq'] = iris.sepal_length.apply(lambda x: x**2)\niris.head(5)\n\nTransformation involving multiple columns. Uses axis=1 to access columns.\nCompute average of sepal_length, sepal_width:\n\niris['sepal_len_wid_avg'] = iris[['sepal_length','sepal_width']].apply(lambda x: (x.sepal_length+x.sepal_width)/2, axis=1)\niris.head()\n\nVectorized Version\n\n%time iris.sepal_length**2\n\nCompare to .apply()\n\n%time iris.sepal_length.apply(lambda x: x**2)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "title": "NB: Introducing Pandas II",
    "section": "Aggregation",
    "text": "Aggregation\nInvolves one or more of:\n\nsplitting the data into groups\napplying a function to each group\ncombining results\n\n\n.groupby()\nCompute mean of each column, grouped (separately) by species\n\niris.groupby(\"species\").mean()\n\n\n\npd.pivot_table()\nApply a function aggfunc to selected values grouped by columns\nDetails\nCompute mean sepal length for each species:\n\npd.pivot_table(iris, values=\"sepal_length\", columns=[\"species\"], aggfunc = np.mean)"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "title": "NB: Introducing Pandas II",
    "section": "Stacking and Unstacking",
    "text": "Stacking and Unstacking\nSimilar to pivoting, but requires – and takes advantage of – indexes.\n\niris_w_idx = iris.copy() \n\n## Give the original index a name\niris_w_idx.index.name = 'obs_id'\n\n## Create a multi-index, using `species` as part of the key.\niris_w_idx = iris_w_idx.reset_index().set_index(['species','obs_id'])\n\n\niris_w_idx\n\n\n.unstack()\nDetails\n\niris_wide = iris_w_idx.sepal_length.unstack(fill_value=0).T\n\n\niris_wide\n\n\niris_wide.mean()\n\n\n\n.stack()\nDetails\n\niris_wide.T.stack().to_frame('sepal_length')"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "title": "NB: Introducing Pandas II",
    "section": "Combining DataFrames",
    "text": "Combining DataFrames\n\npd.concat()\nConcatenate pandas objects along an axis.\nDetails\nCreate two dfs and vertically stack them\n\ndf1 = pd.DataFrame(np.random.randn(3, 4))\ndf2 = pd.DataFrame(np.random.randn(3, 4))\n\n\ndf1\n\n\ndf2\n\nConcat rows\n\ndf3 = pd.concat([df1, df2], axis=0)\n\n\ndf3\n\nConcat columns\nThis assumes that the indexes represent IDs of specific things or events.\n\ndf4 = pd.concat([df1, df2], axis=1, keys=['foo', 'bar'])\n\n\ndf4\n\n\ndf4.foo\n\n\n\n.merge()\nSQL-style joining of tables (DataFrames) – although Pandas has a .join() method, too.\nImportant parameters include:\n\nhow : type of merge {‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’\non : names to join on\n\nDetails\nCreate two tables, left and right. Then right join them on key.\nRight join means include all records from table on right.\nThe key is used for matching up the records.\n\n##| tags: []\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"lval\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"rval\": [4, 5, 8]})\n\njoined = pd.merge(left, right, on=\"key\", how=\"right\")\n\nprint('---left')\nprint(left)\nprint('\\n---right')\nprint(right)\nprint('\\n---joined')\nprint(joined)\n\nNotice the NaN inserted into the record with key=asher, since the left table didn’t contain the key.\nMatching column names\nIn this next example, the value columns have the same name: val. Notice what happens to the column names.\n\n##| tags: []\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"val\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"val\": [4, 5, 8]})\n\njoined = pd.merge(left, right, on=\"key\", how=\"right\")\n\nprint('---left')\nprint(left)\nprint('\\n---right')\nprint(right)\nprint('\\n---joined')\nprint(joined)\n\n\n\n.join()\nAn SQL-like joiner, but this one takes advantage of indexes.\nGive our dataframes indexes and distinctive columns names.\nDetails\n\nleft2 = left.set_index('key').rename(columns={'val':'val_1'})\nright2 = right.set_index('key').rename(columns={'val':'val_2'})\n\n\nleft2\n\n\nright2\n\n\nright2.join(left2) # Defaults to 'inner'\n\n\nright2.join(left2, how='left')\n\n\n\nSummary\n\nUse join if you have shared indexes\nUse merge if you do not have shared indexes\nUse concat to combine based on shared indexes or columns"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "title": "NB: Introducing Pandas II",
    "section": "Reshape with .reshape()",
    "text": "Reshape with .reshape()\nChanges the object’s shape\nWe illustrate creating pandas Series, extracting array of length 6, and reshaping to 3x2 array.\n\n## create a series \nser = pd.Series([1, 1, 2, 3, 5, 8]) \n\n## extract values \nvals = ser.values \n\nprint('orig data:', vals)\nprint('orig type:', type(vals))\nprint('orig shape:', vals.shape)\n\n## reshaping series\nreshaped_vals = vals.reshape((3, 2)) \n\nprint('\\n reshaped vals:')\nprint(reshaped_vals)\nprint('\\n new type:', type(reshaped_vals))\nprint('new shape:', reshaped_vals.shape)\n\nIncluding -1 as one of the dimensions tells numpy: infer this dimension from the data and the other dimensions.\nExample: enforce 3 columns:\n\nvals.reshape(-1,3)\n\nEnforce 3 rows:\n\nvals.reshape(3,-1)\n\nIMPORTANT NOTE\nNotice the shape of original array: (6,)\nThis is a vector with one dimension, and is different from two-dimensional (6,1) array"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "title": "NB: Introducing Pandas II",
    "section": "Categoricals",
    "text": "Categoricals\nCategorical data takes discrete values where computation on the values does not make sense.\nZip code is a typical example.\nTo include categoricals in models, they must be converted to numeric.\n\nget_dummies()\nDummy code categorical data\nImportant parameters:\n\nprefix : append prefix to column names (a good idea for later use)\ndrop_first: remove first level, as only k-1 variables needed to represent k levels\n\nDetails\n\ncats = pd.DataFrame({'breed':['persian','persian','siamese','himalayan','burmese']})\n\n\ncats\n\n\ndummy_cats = pd.get_dummies(cats.breed, drop_first=True, prefix='breed')\n\n\ndummy_cats\n\nNotice burmese was dropped (first level by alphabet) since it can be inferred."
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-03-NarrowWide.html#hot-encoding",
    "href": "notebooks/M06_Pandas/M06-03-NarrowWide.html#hot-encoding",
    "title": "NB: Narrow vs Wide Tables",
    "section": "1 Hot Encoding",
    "text": "1 Hot Encoding\nProject values onto the column axis.\n\npd.get_dummies(NARROW.n) #.sum() #.sort_values(ascending=False).plot(style='.');"
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "href": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "title": "NB: Method Chaining",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\niris = sns.load_dataset('iris')\n\n\niris\n\n\niris.index.name = 'iris_id'\n\n\niris\n\n\niris = iris.reset_index()\\\n    .set_index(['species', 'iris_id'])\n\n\niris\n\n\niris.groupby('species').agg('mean').T.setosa.plot()\n\n\niris.groupby(['sepal_length','sepal_width']).petal_length.mean()\\\n    .to_frame('mean petal_length')\\\n    .plot(style='.', rot=45);\n\n\niris.groupby('species').mean().T.setosa.plot.barh();\n\n\niris.groupby('species')\\\n    .agg({'mean', 'min', 'max'})\\\n    .T\\\n    .style.background_gradient(cmap=\"GnBu\", axis=1)\n\n\niris\n\n\n## iris.T\n\n\nX = iris.T.stack()\n\n\nX\n\n\nX.index.names = ['feature', 'iris_id']\n\n\nX\n\n\nX.groupby('feature')\\\n    .agg({'mean', 'max', 'min'})\\\n    .T\\\n    .style.background_gradient(cmap=\"GnBu\", axis=0)"
  },
  {
    "objectID": "modules/m07/m07-intro.html#topics",
    "href": "modules/m07/m07-intro.html#topics",
    "title": "M07 Classes",
    "section": "Topics",
    "text": "Topics\n\nConcept of object-oriented programming\nConcept of classes\nPython’s approach to organizing classes\nPython’s approach to creating and using classes\nCreating your own classes"
  },
  {
    "objectID": "modules/m07/m07-intro.html#readings",
    "href": "modules/m07/m07-intro.html#readings",
    "title": "M07 Classes",
    "section": "Readings",
    "text": "Readings\n\n\nClasses (Official Python)\n\n\nLutz 2019, Part VI, Classes and OOP, Chapters 26–29."
  },
  {
    "objectID": "topics/what-is-oop.html#the-basic-idea",
    "href": "topics/what-is-oop.html#the-basic-idea",
    "title": "What is OOP?",
    "section": "The Basic Idea",
    "text": "The Basic Idea\nThe usual way that Object-Oriented Programming (OOP) is introduced to students is as a natural way to describe things in the world.\nThe story told goes something like this:\nThe world consists of a bunch of things.\nThese things may be animate or inanimate, but they have two things in common:\n\nAttributes: qualities, traits, features\nBehaviors: ways of interacting with other things\n\nSo, anything from an orange to the economy of France are things.\n\nThe properties of an orange are its color, weight, species, etc.\nThe properties of the economy of France are its GDP, its industrial sectors, its rate of unemployment, etc.\nThe behaviors of an orange are things like being eaten, or rotting.\nThe behaviors of an economy are going into a recession, etc.\n\nThese things are called objects.\nAll objects that exist are instances of abstract classes.\nEvery object that exists is an instance of an abstract class.\n\nA specific orange is an instance of the class of Oranges.\nFrance’s economy is an instance of the class of National Economies.\n\n\n\n\n\n\n\nNote\n\n\n\nThe nature of these classes raises an important philosophical question, but we will not address this here.\n\n\nClasses are organized into trees.\nClasses are organized into tree-like structures.\nSpecific classes inherit the attributes and behaviors of their parent and ancestors, although they can override these as well.\nSo, an organge might have this lineage:\nPlant > Magnoliophyta > Magnoliopsida > Rosidae > Sapindales > Rutaceae > Citrus > Valencia Orange\n\n\n\n\n\n\nNote\n\n\n\nThe idea that the world is organized into a hierarchy of things descending from some primary substance is ancient. Here is an example from the European Middle Ages:\n\n\n\n\n\nThe Poryphyrian Tree"
  },
  {
    "objectID": "topics/what-is-oop.html#relationship-to-coding",
    "href": "topics/what-is-oop.html#relationship-to-coding",
    "title": "What is OOP?",
    "section": "Relationship to Coding",
    "text": "Relationship to Coding\nOOP is based on the analogy that code can be organized in this way.\nThis is because software is often about the world – we write software to model things in the world.\n\nFor example, if I wanted to write code simulate the traffic pattern of a city, I might start by creating a class called Car.\nThis Car would have properties, such as its make and model, but also behaviors like driving.\nThen, in simulation program, I would create a bunch of Car instances and have them do things like drive on streets, etc."
  },
  {
    "objectID": "topics/what-is-oop.html#another-way-to-look-at-it",
    "href": "topics/what-is-oop.html#another-way-to-look-at-it",
    "title": "What is OOP?",
    "section": "Another Way to Look at It",
    "text": "Another Way to Look at It\nNow, although this way of looking at OOP is somewhat intuitive, it can be misleading.\nIt is great for understanding the data structure that OOP uses.\n\nA tree-like organization of classes\nClasses with attributes and behaviors\n\nBut the OO pattern is not always used to model things in the world.\nSometimes is just a good way to organize code – OOP is a data structure for the data that is code.\nIn other words, just as we say that dimension can refer to the world or to the structure of data, so too can an object.\nWe use OOP to provide structure to our code, regardless of whether it paints an accurate picture of the world."
  },
  {
    "objectID": "topics/what-is-oop.html#the-trinity",
    "href": "topics/what-is-oop.html#the-trinity",
    "title": "What is OOP?",
    "section": "The Trinity",
    "text": "The Trinity\nOOP theory states that classes exhibit three fundamental properties that make them powerful:\n\nEncapsulation\nInheritance\nPolymorphism\n\nEncapsulation means that objects are self-contained. They have their own scope, data, and logic. Ideally, they can be deployed in any context and be shielded from external states.\n\nObjects are meant to be black boxes to users: they should only be interacted with via the methods and attributes provided.\nNothing else should influence the state of the object except what it contains and what is passed to it.\n\nInheritance means that classes can be subclasses of other classes and thereby inherit their ancestor attributes and methods. - Some programming languages allow only single inheritance – classes can have one parent. - Python supports multiple inheritance, but this can be complicated to use.\nPolymorphism means that methods can perform different behaviors based on the arguments they are passed. - That is, a function can be defined more than once in a class, as long as it each has a unique signature. - A signature is the particular pattern of arguments (parameters) a method has.\nToday, we are only going to focus on encapsulation …\n\nOnce upon a time, there was a movement to implement only this concept.\nMicrosoft, for example, developed a component-based approach to programming, where components are encapsulated unites of code without the complexity of inheritance."
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#concepts",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#concepts",
    "title": "NB: Introducing Classes",
    "section": "Concepts",
    "text": "Concepts\n\nclass\nobjects\ninstantiation\n__init__ function\nattributes\nmethods"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "title": "NB: Introducing Classes",
    "section": "Introduction",
    "text": "Introduction\nWhen we work with things and reason about them, we generally think about their attributes, and what they can do.\nFor similar things, it can be helpful for group them into objects such as cars, homes, databases, or logistic regression models.\nA class provides a template for creating an object, and for working with the object. For the case of the logistic regression model, it has attributes like:\n\nweights\nan optional intercept term\nthe maximum number of iterations\n\nThese attributes help describe the object (they give the object’s state).\nThe logistic regression model has functionality such as: - the optimization routine used in training - a prediction function\nThe behavior, or functionality, is supported by methods, which are functions included in the class.\nThere are tremendous benefits to programming with objects, or object-oriented programming (OOP), such as:\n\nObjects are natural ways of defining, grouping, communicating, and thinking about things\nObjects are convenient for packaging together the data and functionality. It concisely says: what is in this thing, and what does it do?\nIt is simple to create as many copies of the object as you’d like\nFor more complex objects, they can take on all the attributes and methods of the simpler object. this is called inheritance.\n\nOk, let’s look at examples, starting with a very small, simple class.\nThe class contains: - a name (Ferrari458) - a docstring for a quick description - an attribute, which is number of cylinders in the engine - a method\n\nclass Ferrari458:\n    \"\"\"this is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\nYou can learn about the class by printing the docstring:\n\nFerrari458.__doc__\n\nYou can also get detailed help like this:\n\nhelp(Ferrari458)\n\nNext, we create an object from the class (also called an instance of the class).\nIt is called like a function with no parameters. The process is called instantiation.\n\nmyferrari = Ferrari458()\n\nWe show the number of cylinders by using the object.attribute format:\n\nmyferrari.cylinders\n\nThen we call its method print_origin to learn where this sweet machine was built.\n\nmyferrari.print_origin()\n\nAs a convention, methods take self as their first argument. Methods can use self.attribute to extract their attributes.\nHere is an example, with method get_cylinders.\n\nclass Ferrari458_v2:\n    \"\"\"this is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_cylinders(self):\n        return self.cylinders\n\n\nmyferrari = Ferrari458_v2()\nmyferrari.get_cylinders()"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "title": "NB: Introducing Classes",
    "section": "The .__init__() method",
    "text": "The .__init__() method\nThere is a special function called __init__ that will initialize objects for you when you create them.\nUse it to supply more context-dependent information about your instance.\nLet’s look at another version of the class with init.\n\nclass Ferrari458_v3:\n    \"\"\"this is a Ferrari 458 object\"\"\"\n    cylinders = 8\n    \n    def __init__(self, color):\n        self.color = color\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_color(self):\n        return self.color\n\nBy adding the __init__ function, we can create objects if we pass the number of cylinders.\nIf we don’t pass this parameter, there will be an error.\nThis is because we did not define a default value for the color argument in our initialization method.\n\n##ferr1 = Ferrari458_v3()\n\nThis works:\n\nferr1 = Ferrari458_v3(\"red\")\n\nWe can access the initialized attribute using the dot operator, just as if it were declared at the top of the class:\n\nferr1.color\n\nOr we can call the accessor method that we created.\n\nferr1.get_color()\n\nNote that even though we initialized the car object with “red”, we can always change it:\n\nferr1.color = \"Cobalt\"\n\n\nferr1.get_color()"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "title": "NB: Introducing Classes",
    "section": "The Meaning of self",
    "text": "The Meaning of self\nNote the presence of an argument and variable called self in the method definitions. - This stands for the intantiated object itself.\nSo, when you create an object like so:\n\nfoo = Foo()\nfoo is represented in the class definition as self.\n\nIf you want your method to access the other attributes and methods in an object, you need to put self as its first argument. - Note that when you use the method with an instance, you don’t pass the object name as an argument - The object name is passed implicitly by Python, since it knows which object called the methid\nYou can use any valid name you want for the name of the object itself, but the convention is to use self.\nNote that self is only used within the methods of a class, not outside of it. - Like functions, they don’t know what’s outside of them, nor does the containing code know what’s inside of them. - The self variable is the mechanism that allows methods to share data without having to pass and return a bunch of variables.\nThink of self as a data structure that stores the program itself - In this sense, it’s similar to recursion: A class definition contains a reference to itself! - But remember, the class definition is not a thing – it’s a template. - self is just a pronoun that allows an instance to access it’s own state."
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary",
    "title": "NB: Introducing Classes",
    "section": "Summary",
    "text": "Summary\nAn cobject is a self-contained bundle of methods and attributes. * Methods are basically functions. * Attributes are basically variables.\nA class definition is a template for creating objects. * Objects are class instances. * Classes are onbject types.\nObjects have their own scope, like functions. * They are meant to exchange information with their environment only through accessing attributes and calling methods\nWhen objects are first created, they often expect to have data passed to them. * This is called initializing the object. * These data are handled internally by the .__init__() method. * Data that are passed this way can be overridden by accessing the attributes they assigned to.\nThe methods of a class begin with self as the first argument. * This stands for the instance itself. * All methods and attributes are avaible to all other methods in the object through the self object.\nIf a method does not have self as its first argument, it cannot access the internal state or methods of the object. * The internal state is just the attributes and their current values. * These are called static methods. * Static methods are useful in providing functions to the environment in which their containing object is instantiated.\nThere is a lot more to the subject, but this is good enough to get started!"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#set-up",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#set-up",
    "title": "NB: Classes Example",
    "section": "Set Up",
    "text": "Set Up\n\nimport pandas as pd\nimport numpy as np"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "title": "NB: Classes Example",
    "section": "Method 1: Nothing Special",
    "text": "Method 1: Nothing Special\nWe define a set of functions that work in a sequence, where the return value of one is the argument of the other.\n\nDefine Functions\n\ndef create_die(weights):\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    my_die = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n    return my_die\n\ndef roll_dice(my_die, n_rolls=1):\n    results = []\n    for i in range(n_rolls):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    return pd.Series(results)\n\ndef plot_results(my_results):\n    my_results.value_counts().sort_index().plot.bar();\n\n\n\nCreate Instances\n\nn_rolls = 10\n\n\nfair_die = create_die([1,1,1,1,1,1,1])\nfair_results = roll_dice(fair_die, n_rolls)\nplot_results(fair_results)\n\n\nunfair_die = create_die([1,1,1,1,1,5])\nunfair_results = roll_dice(unfair_die, n_rolls)\nplot_results(unfair_results)\n\n\n\nDoing it all at once\n\ndef do_it_all(weights):\n    plot_results(roll_dice(create_die(weights), n_rolls))\n\n\ndo_it_all(roll_dice(create_die([1,1,1,1,1,10]), n_rolls))"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "title": "NB: Classes Example",
    "section": "Method 2: With Globals",
    "text": "Method 2: With Globals\n\nDefine a Shared Data Structure\nWe create a dictionary called config to store our instance data.\n\nconfig = {} # We expect this to have the same keys\nn_rolls2 = 10\n\n\n\nDefine Methods\n\ndef create_die2(die_id):\n    global config\n    config[die_id]['die'] = None\n    weights = config[die_id]['weights']\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    config[die_id]['die'] = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n\ndef roll_dice2(die_id):\n    global config\n    global n_rolls2\n    config[die_id]['results'] = None\n    my_die = config[die_id]['die']\n    results = []\n    for i in range(n_rolls2):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    config[die_id]['results'] = pd.Series(results)\n\ndef plot_results2(die_id):\n    global config\n    my_results = config[die_id]['results']\n    my_results.value_counts().sort_index().plot.bar();\n\ndef do_it_all2(die_id):\n    global config\n    global n_rolls2\n    print(\"Die ID:\", die_id)\n    print(\"Weights:\", config[die_id]['weights'])\n    print(\"Rolls:\", n_rolls2)\n    create_die2(die_id)\n    roll_dice2(die_id)\n    plot_results2(die_id)\n\n\n\nPopulate Config\nWe populate our configuration config with some instances.\n\nconfig = {\n    'fair': {\n        'weights': [1,1,1,1,1,1]\n    },\n    'unfair': {\n        'weights': [1,1,1,1,10,100],\n    }\n}\n\n\n\nCall Main Function\n\ndo_it_all2('fair')\n\n\ndo_it_all2('unfair')\n\n\nn_rolls2 = 1000 # We change this, but it will affect all uses of the functions until we change it.\ndo_it_all2('unfair')"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "title": "NB: Classes Example",
    "section": "Method 3: As Class",
    "text": "Method 3: As Class\nDefine a class that contains the config data structure and all the functions as attributes and methods.\n\nclass DieGame():\n    \n    n_rolls = 10\n    weights = [1,1,1,1,1,1]\n    \n    def __init__(self):\n        return None\n        \n    def create_die(self):\n        self.n_sides = len(self.weights)\n        self.my_probs = [i/sum(self.weights) for i in self.weights]\n        self.die = pd.DataFrame({\n            'side': range(1, self.n_sides + 1),\n            'weights': self.my_probs\n        })\n    \n    def roll_die(self):\n        results = []\n        for i in range(self.n_rolls):\n            result = self.die.side.sample(weights=self.die.weights).values[0]\n            results.append(result)\n        self.results = pd.Series(results)        \n        \n    def plot_results(self):\n        prob_model = pd.Series({i+1:round(p, 2) for i, p in enumerate(self.my_probs)})\n        print(\"Sides:\", self.n_sides)\n        print(\"Model:\")\n        print(prob_model)\n        print(\"Rolls:\", self.n_rolls)\n        self.results.value_counts().sort_index().plot.bar(rot=0);\n        \n    # We add another method because it's so easy :-)\n    def plot_probs(self):\n        pd.Series(self.my_probs).plot.pie(title=\"Die Model\")\n        \n    def do_it_all(self):\n        self.create_die()\n        self.roll_die()\n        self.plot_results()\n\n\ngame_1 = DieGame()\ngame_1.n_rolls = 100\ngame_1.do_it_all()\n\n\ngame_1.plot_probs()\n\n\ngame_2 = DieGame()\ngame_2.n_rolls = 100\ngame_2.weights = [1,1,1,5,10,10]\ngame_2.do_it_all()\n\n\ngame_2.plot_probs()"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "title": "NB: Classes Example",
    "section": "Conclusions",
    "text": "Conclusions\nThe OOP approach handles scoping issues as well as data management.\nNotice how the dictionary is replaced by the object.\nNot only does it provide a place to store the data, it also provides a schema for it: * You don’t need to remember what keys to put in the data dictionary of method 2. The object specifies them.\nNotice also that we don’t pass arguments to the object as we do with functions (although we can).\nWe assign values to attributes directly.\nCan you think of any other advantages or disadvantages?"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#fun-facts-about-python-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#fun-facts-about-python-classes",
    "title": "NB: More About Classes",
    "section": "Fun Facts about Python Classes",
    "text": "Fun Facts about Python Classes\n\nYou can put more than one class in a file.\nYou can put your classes in a .py file and import them into your other scripts.\nClass names are usuall CamelCase, but not instances\nWhen saving to a file:\n\nIf only one class, use a lower case name of the class\nIf more than one, use a package name, one that stands for the logical group the classes belong to"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "title": "NB: More About Classes",
    "section": "Anatomy of a Python Class",
    "text": "Anatomy of a Python Class\n\n## Import class dependencies here\nimport pandas as pd\nimport numpy as np\nimport re\nimport requests\nfrom lxml import etree\n\n## Use CamelCase to name your class\nclass MyClass(object): # Optionally pass ancestor classes to use inheritance\n    \"\"\"\n    Extensive docstring describing structure and function of class.\n    \"\"\"\n    \n    # Class attributes go here with initial values if applicable\n    att1 = True \n    att2 = 'Foo'\n    _private_att = 'Bar' # A variable that is meant to be internally only; not intended to accessed by users\n    \n    # Object initializer; called when an instance of the class is created\n    def __init__(self):\n        pass\n    \n    # Methods that share state via the self variable\n    def get_something(self):\n        pass\n    \n    # Name your methods consistently -- prefix with verbs\n    def put_something(self):\n        pass\n    \n    def do_something(self):\n        pass\n\n    def show_something(self):\n        pass\n\n    # A private method\n    def _private_method(self): \n        pass\n    \n    def do_something_else(self):\n        # Use private method\n        self._private_method()\n    \n    # A static method\n    def static_method():\n        pass"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "title": "NB: More About Classes",
    "section": "Privacy",
    "text": "Privacy\nUsers are free to access private attributes and methods, but they not shown in the help docs.\n\nhelp(MyClass)"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "title": "NB: More About Classes",
    "section": "Static Classes",
    "text": "Static Classes\nStatic classes don’t need to be instantiated.\nThey can be used to store a collection of stand-alone helper functions as methods.\nNote the absence of self …\n\nclass StaticClass():\n\n    def add_these(*nums):\n        sum = 0\n        for num in nums: sum += num\n        return sum\n    \n    def square_me(x):\n        return x**2\n\n\nStaticClass.add_these(1,5,6)\n\n\nStaticClass.square_me(5)\n\nThis won’t work …\n\nsc = StaticClass()\n\n\nsc.square_me(10)"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#importing-your-own-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#importing-your-own-classes",
    "title": "NB: More About Classes",
    "section": "Importing Your Own Classes",
    "text": "Importing Your Own Classes\n\nfrom diegame import DieGame\n\n\ngame_1 = DieGame()\ngame_1.n_rolls = 100\ngame_1.do_it_all()"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#a-simple-example",
    "href": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#a-simple-example",
    "title": "NB: Understanding Static Attributes",
    "section": "A Simple Example",
    "text": "A Simple Example\nWe define a class with one attribute.\n\nclass Foo(): x = 1\n\nWe create an instance of the class.\n\nfoo1 = Foo()\n\nWe demonstrate that the class defines the value for the instance.\n\nfoo1.x, Foo.x\n\nWe demonstrate that the instance changes if the class does.\n\nFoo.x = 2\n\n\nfoo1.x, Foo.x\n\nNow we override the class attribute with the local.\nThis is similar to how we can override a global with a local.\n\nfoo1.x = 3\n\n\nfoo1.x, Foo.x\n\nWe demonstrate that the instance attribute is now unaffected by the global.\n\nFoo.x = 4\n\n\nfoo1.x, Foo.x"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#a-cool-trick",
    "href": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#a-cool-trick",
    "title": "NB: Understanding Static Attributes",
    "section": "A Cool Trick",
    "text": "A Cool Trick\nYou can define an empty class and add attributes as you go.\n\nclass Bar:\n    pass\n\n\nbar1 = Bar()\n\n\nbar1.x = 1\n\n\nbar1.x\n\nSince we defined an instance attribute, the class remains unchanged.\nSo, this will throw an error:\n\nBar.x\n\nWe define another instance, but this time we add an attribute to the class.\n\nbar2 = Bar()\n\n\nBar.x = 2\n\nNotice how the instance has the new attribute, even though it was added to the class after the instance was created.\n\nbar2.x, Bar.x"
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#mutable-statics",
    "href": "notebooks/M07_PythonClasses/M07-04-StaticWeirdness.html#mutable-statics",
    "title": "NB: Understanding Static Attributes",
    "section": "Mutable Statics",
    "text": "Mutable Statics\nThere is an interesting gotcha regarding static attributes in Python.\nLists and other mutable data structures can be static and yet have their values modified by instances.\nThis is kind of weird.\nTo demonstrate, we define a class with two instance variables, one a scalar and one a list.\nWe define a method to alter the value of each.\n\n##| tags: []\nclass WithStatic():\n    \n    foo = 0  # The value is NOT affected by instances\n    bar = [] # The values ARE afftected by instances\n    \n    def add_one(self):\n        self.foo += 1       # This does NOT affect the static attribute\n        self.bar.append(1)  # This DOES affect the static attribute, only its values\n        \n    def replace_bar(self, new_list = []):\n        self.bar = new_list # This replaces the list itself\n\nWe define a function to compare an instance and its class to see how static attributes are affected by instances.\nNotice the getattr() method – this allows you to get the value of an attribute using a literal value for the attribute name.\n\ndef my_test (my_class, my_instance, my_vars=[]):\n    for my_var in my_vars:\n        i = getattr(my_instance, my_var)\n        c = getattr(my_class, my_var)\n        print(f'i.{my_var} =', i)\n        print(f'c.{my_var} =', c)\n    print()\n\nWe define an instance and compare the values.\n\nwith_static1 = WithStatic()\n\n\nmy_test(WithStatic, with_static1, ['foo', 'bar'])\n\nNow we increment the attributes and see the results.\n\nwith_static1.add_one()\n\nThe method does disconnect the instance foo from the class foo.\nBut it does not disconnect the instance bar from the class bar.\n\nmy_test(WithStatic, with_static1, ['foo', 'bar'])\n\nWe do it again to drive the point home.\n\nwith_static1.add_one()\n\n\nmy_test(WithStatic, with_static1, ['foo', 'bar'])\n\nNow, let’s replace list itself in the instance.\n\nwith_static1.replace_bar()\n\n\nfor i in range(5):\n    with_static1.add_one()\n    my_test(WithStatic, with_static1, ['foo', 'bar'])\n\nWe define a second instance.\n\nwith_static2 = WithStatic()\n\nThe new instance has the original value of foo.\nHowever, it starts of with the modified value of bar before it was replaced.\n\nmy_test(WithStatic, with_static2, ['foo', 'bar'])\n\nWe do it a few more times to drive the point home.\n\nfor i in range(5):\n    with_static2.add_one()\n    my_test(WithStatic, with_static2, ['foo', 'bar'])\n    print()"
  },
  {
    "objectID": "modules/m08/m08-intro.html#topics",
    "href": "modules/m08/m08-intro.html#topics",
    "title": "M08 Testing",
    "section": "Topics",
    "text": "Topics\n\nBecome acquainted with Exception Handling, Testing, and Debuggings\nUnderstand the cyclical relationship among these\nUnderstand the relation to function and class design\nUnderstand benefits of literate and well-styled coding"
  },
  {
    "objectID": "modules/m08/m08-intro.html#readings",
    "href": "modules/m08/m08-intro.html#readings",
    "title": "M08 Testing",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2017, Ch. Part 7: Exceptions and Tools\n\n\nTesting and Verification (see next Module item)"
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html",
    "href": "modules/m08/m08-testing-and-verification.html",
    "title": "Testing and Verification",
    "section": "",
    "text": "Definitions\n\n\nBefore we get started, let’s review some definitions.\n\n\n\n\n\n\nverification\n\n\nShows that the code meets the requirement specification Example: You verify that I wrote the program you asked me to write.\n\n\n\n\nvalidation\n\n\nShows that the code meets the real requirements Example: You show that the program is a valid solution to the user’s problem.\n\n\n\n\nquality\n\n\nSuggests that validations falls on a scale, not a black-and-white idea. Defining the scale can be difficult.\n\n\n\n\nspecification\n\n\n\nA precise and detailed statement about the properties some things must have\n\n\nDesign specification: exact instructions for how to build something\n\n\nRequirements specifications: exact statements about what should be built\n\n\n\n\n\n\n\nSpecifications are very important. Not only are they used to guide the creation of the project, but also they’re vital for program testing and verification. That is, if you don’t have specifications for the product, you cannot verify that you’re doing the right thing. Likewise, if behavior is not defined, then it becomes difficult to know what is incorrect behavior.\n\n\nEdsger Dijkstra was a famous computer scientist and A. M. Turing award winner. This quotation by him is a great one and very true. Even if you write a test suite of carefully crafted test cases, and if they all run and pass, it doesn’t mean that no further bugs exist.\n\n\nIt is much easier to prove the existence of something than to disprove the existence of something. This realization should motivate us to learn how to create carefully crafted unit tests so that we can test as much as we can.\n\n\n\n“Program testing can effectively show the presence of bugs but is hopeless for showing their absence.”–Edsger Dijkstra\n\n\n\nFormal Verification\n\n\nFormal verification involves proof. There are three types:\n\n\n\nHand-written, hand-checked\n\n\nHand-written, machine-checked (proof-carrying code)\n\n\nMachine-written, machine-checked (static analysis)\n\n\n\nNone of them are very widely used yet, but the latter two are increasing in popularity. Formal verification is complex, difficult, and takes a great deal of effort.\n\n\nEmpirical Testing\n\n\nInstead of formal verification, correctness is demonstrated through empirical testing. Empirical testing shows it works on several inputs. In general, testing is:\n\n\n\nA lot easier than proof\n\n\nA lot harder (and more involved) than writing code \n\n\n\nTypes of Empirical Testing\n\n\nThere are many kinds of testing, but we will focus on unit testing in this module. Two other kinds of testing are integration and acceptance (beta) testing, which are out of the scope of this lesson. See below for a short description.\n\n\n\n\n\n\nUnit Testing\n\n\nWrite code that tests the smallest possible units of the spec (must attempt to test every flow path). The programmer does unit testing as part of the coding process.\n\n\n\n\nIntegration Testing\n\n\nTest that units work together.\n\n\n\n\nAcceptance Testing (Beta Testing)\n\n\nGive product to real users to try it out.\n\n\n\n\n\n\nFlow Path\n\n\nA flow path is a unique execution sequence through a program unit. It is done as part of the coding process by the programmer. A good set of test data makes sure every possible path is followed (tests every possible behavior). Because loops are able to execute an arbitrarily large number of times, and because there  potentially are an infinite number of inputs into a program, there are virtually an infinite number of flow paths. Exhaustive testing is usually impossible. However, we can overcome these odds by being clever about the kinds of tests that we write. We’ll also learn about equivalence classes, which also help us overcome this hurdle.\n\n\nExample of code showing various flow paths. For example, starting at Stmt1, then the condition of the while loop (C1) is true, so that takes us to the condition of the if statement (C2) but maybe this is false, so we end up in the else portion, Stmt3. This is an example of a flow path starting at Stmt1 and ending up at Stmt3. In other words, there are many paths through a given program.\n\n\n\n\n\n\nSource: Nada Basit"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#topics",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#topics",
    "title": "NB: Exception Handling",
    "section": "Topics",
    "text": "Topics\n\nerrors\nexceptions\ntry/except\nassert\nAssertionError\nraise"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "title": "NB: Exception Handling",
    "section": "Overview",
    "text": "Overview\n\nAll happy families are alike, but every unhappy family is unhappy in its own way.\n– Leo Tolstoy, Anna Karenina, 1878.\n\nThere are two ways that programs can succeed of fail:\nThey can meet or not meet the motiving requirements for the code. - Does it do what is is supposed to do? - Does it add value to a process? - Is it ethical? Does it do harm?\nThey can work or not work: - Does the run at all? - Is the code brittle or buggy? - Is it sensitive to contextual factors like bad user input or a bad database connection? - Does the code work but produce incorrect outcomes?\nThese lead to two practices: * Strategic: Project management * Tactical: Testing and debugging\nToday, we will focus on some concepts and tools for the latter. * We want to know whether our code is working or not. * We want to know if our code is of a high quality.\nApproaches to quality * Through good design * Throigh principled testing\nSome design principles * Favor the simple over the complex * Don’t confuse the easy with the simple! * Invest in data design to simplify algorithm design * Write literate code * Given a choice, use tools that are documented and have a user community * Many other things :-)\nSome testing activities * Syntax checking * Debugging * Ad hoc testing * Unit-testing * User testing\nSome concepts * Beware of silent failures * Testing for the absence of bugs is impossible - Like Popper’s concept of falsifiability"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#tools-and-concepts-for-testing",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#tools-and-concepts-for-testing",
    "title": "NB: Exception Handling",
    "section": "Tools and Concepts for Testing",
    "text": "Tools and Concepts for Testing\nProgramming languages offer many tools for testing.\nThese include mechanisms to define and capture errors in code.\nWe call these errors exceptions. - An exception is an event that occurs during the execution of a program that disrupts the normal flow of the program’s instructions.\nWe call we call dealing with these errors exception handling. - When a Python script encounters a code failure, it raises an exception."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "title": "NB: Exception Handling",
    "section": "Python’s Tools",
    "text": "Python’s Tools\nExceptions - A Python object that represents an error - Objects that classify kinds of errors - Coders can define these\nException Handlers - Control structures and functions to deal with exceptions - try/except - raise - assert\nUnit Testing Frameworks - Robot - PyTest - Unittest - DocTest - Nose2 - Testify"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-and-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-and-exceptions",
    "title": "NB: Exception Handling",
    "section": "Errors and Exceptions",
    "text": "Errors and Exceptions\nA common technical interview question: Explain the difference between an error and an exception.\nAn error is a serious problem that a reasonable application should not try to catch.\nAn error will stop execution. It means the code if broken and needs to be rewritten.\nAn exception is an issue that is expected or known to occur (e.g., division by zero).\nSoftware must handle exceptions. For example, one bad row of data shouldn’t bring down the application."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "title": "NB: Exception Handling",
    "section": "Some Common Built-in Exceptions",
    "text": "Some Common Built-in Exceptions\nPython comes with a number of predefined exceptions.\nLibraries introduce new ones, too.\nThey used in raise statement by the authors of programs when a possible error is anticipated.\nHere are some common examples.\n\nZeroDivisionError\n\n3 / 0\n\n\n\nSyntax Error\n\n## if-statement missing colon at end\n\nif x > 0\n  print(\"uh oh\")\n\n\n\nNameError\n\n## references an undefined variable\n\nprint(x)\n\n\n\nIndexError\n\n## loop goes off the end of the list\n\nlst = [0, 1, 2]\n\nfor i in range(4):\n    print(lst[i])"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "title": "NB: Exception Handling",
    "section": "Exception Handling with try/except",
    "text": "Exception Handling with try/except\nWe use try/except blocks to handle exceptions in our code.\nThese blocks work as follows: * The try block will contain a statement. * If the statement fails, the the flow goes to the except block. * The exception block will have code to handle the error, rather than halting the program.\nThe process is very similar to if/then: * If there is an error, then raise an excpetion.\nMultiple except statements may be given, to handle specific exceptions.\nBelow, we give a catch-all except for any kind of exception.\nAn excpetion is a mistake that will halt the execution of code. * For example, trying to access a dictionary key that does not exit. * Or, a database connection fails. * Very often, execeptions are caused by an external dependency failing, such as another system or the user.\nLet’s try referencing a variable that doesn’t exist with no exception handling.\n\nprint(a)\n\nNow let’s try referencing a variable that doesn’t exist with a try/except block to handle the exception.\n\ntry:\n    print(a)\nexcept:\n   print(\"caught an exception\")"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "title": "NB: Exception Handling",
    "section": "Assert Statements",
    "text": "Assert Statements\nAnother to catch errors before they happen is to test if computations turned out as expected.\nWe use assert to verify an expression is True.\n- if expression is True, nothing happens. - if expression is False, Python raises an AssertionError exception.\nAssert statements have the followinf syntax:\nassert Expression[, Arguments]\nwhere [, Arguments] denotes optional arguments.\nFor example, let’s say a program is expecting three arguments to be passed from the command line.\nThe variable num_args counts the arguments.\n\nnum_args = 3\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nThe assert evaluates to True, and things proceed normally without exception.\nIf we change num_args = 4 this will throw an AssertionError with the provided message.\nThe program then stops.\n\nnum_args = 4\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nIf the assert is not given a message, it throws AssertionError:\n\nnum_args = 4\n\nassert num_args == 3\n\n\ntry:\n    assert num_args == 3\nexcept:\n    print(\"Got an error\")\n\n\ntry:\n    assert num_args == 3, \"Number of arguments must be 3!\"\nexcept AssertionError as e:\n    print(e)"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "title": "NB: Exception Handling",
    "section": "raise()",
    "text": "raise()\nExceptions can be raised, too.\nUse this if you want to halt the program and let other code that is using this code handle it.|\n\ntry:\n    10/0\nexcept:\n    raise ZeroDivisionError(\"Hey, you can't divide by zero!\")\n\n\nraise IndexError(\"Bad Index\")"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "title": "NB: Exception Handling",
    "section": "Futher Reading",
    "text": "Futher Reading\n\nhttps://www.geeksforgeeks.org/errors-and-exceptions-in-python/\nhttps://www.tutorialspoint.com/python/assertions_in_python.htm"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#unit-testing",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#unit-testing",
    "title": "NB: Unit Testing with Unittest",
    "section": "Unit Testing",
    "text": "Unit Testing\nUnit testing is a testing technique in which individual modules are tested to determine if there are any issues by the developer himself.\nIt is concerned with functional correctness of the stand-alone modules.\nThe main aim is to isolate each unit of the system to identify, analyze and fix the defects.\nThese units are typicallly functions and methods."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "title": "NB: Unit Testing with Unittest",
    "section": "Benefits of Unit Testing",
    "text": "Benefits of Unit Testing\nDevelopers can work in a predictable way on developing code.\nDevelopers can write their own unit tests.\nYou can get a rapid response for testing small changes\nAlso:\nReduces defects in the newly developed features or reduces bugs when changing the existing functionality.\nReduces cost of testing, since defects are captured in very early phase.\nImproves design and allows better refactoring of code.\nTesting in Python is a huge topic and can come with a lot of complexity, but it doesn’t need to be hard. You can get started creating simple tests for your application in a few easy steps and then build on it from there."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "title": "NB: Unit Testing with Unittest",
    "section": "The unittest Framework",
    "text": "The unittest Framework\nOne of the popular unit testing frameworks is Unittest. It is works well and is easy to use.\nThere are other tools, though – here’s a comparison of 6 Python testing frameworks."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Idea",
    "text": "The Basic Idea\nThe Unittest framework provides you with a bunch of assert methods, which are essentially wrappers around Python’s built-in assert function.\nThe basic idea is to write functions that test other functions by using these assert methods instead of peppering your code with them.\nUnittest provides many assert methods – see this cheat sheet for more.\nWe will focus on three: * assertTrue() * assertFalse() * assertEqual()"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Pattern",
    "text": "The Basic Pattern\nThe Unittest framework works as follows:\nChoose on a method or class that you want to test.\nCreate a class that is a subclass of unittest.TestCase.\nIn that class write methods that are designed to test the behavior of methods in the code you want to test.\n\nThese test methods focus on one behavior of one method (or function).\nThere can be many test methods for each target method.\nEach test method name must be prefixed by test_.\nTests are executing in alphabetical order, so name them in the order you want them executed.\nEach test makes use of an assert method. These methods typically compare expected with actual methods and return False if they don’t match and True if they do.\nYou always want tests to pass, so if you want to test if something breaks, you return True for a False condition.\n\nRun the script and see the results.\nUpdate the script as you create new methods or refactor existing ones."
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "title": "NB: Unit Testing with Unittest",
    "section": "Assert Methods",
    "text": "Assert Methods\n\n.assertTrue()\n\nNegative Test Case\nRun M08-02-script1.py\nclass TestStringMethods(unittest.TestCase):\n\n    # test function\n    def test_negative(self):\n\n        testValue = False\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue(testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script1.py\n\n\n\nPositive Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    \n    # test function\n    def test_positive(self):\n        \n        testValue = True\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script2.py\n\n\n\n\n.assertFalse()\n\nNegative Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_negative(self):\n        testValue = True\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assetFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script3.py\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_positive(self):\n        testValue = False\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assertFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script4.py\n\n\n\n\n.assertEqual()\nHere is a case where we expect two values to be equal.\n\nNegative Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_negative(self):\n        firstValue = \"geeks\"\n        secondValue = \"gfg\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script5.py\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_positive(self):\n        firstValue = \"geeks\"\n        secondValue = \"geeks\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script6.py"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with User-defined Function",
    "text": "Example with User-defined Function\nFunction to test\ndef add_fish_to_aquarium(fish_list):\n    if len(fish_list) > 10:\n        raise ValueError(\"A maximum of 10 fish can be added to the aquarium\")\n    return {\"tank_a\": fish_list}\n\nimport unittest\nClass to test the function\nclass TestAddFishToAquarium(unittest.TestCase):\n    \n    def test_add_fish_to_aquarium_success(self):\n        actual = add_fish_to_aquarium(fish_list=[\"shark\", \"tuna\"])\n        expected = {\"tank_a\": [\"shark\", \"tuna\"]}\n        self.assertEqual(actual, expected)\n\n    def test_add_fish_to_aquarium_exception(self):\n        too_many_fish = [\"shark\"] * 25\n        with self.assertRaises(ValueError) as exception_context:\n            add_fish_to_aquarium(fish_list=too_many_fish)\n        self.assertEqual(\n            str(exception_context.exception),\n            \"A maximum of 10 fish can be added to the aquarium\"\n        )\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script7.py"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with External Class",
    "text": "Example with External Class\nWe create a class called Student and save it in a local file called student.py.\nclass Student:\n    \n    # constructor\n    def __init__(self, name, courses=None):\n        self.name = name # string type\n        self.courses = [] if courses is None else courses # list of strings\n        self.num_courses = len(self.courses)\n        \n    # enroll in a course\n    def enroll_in_course(self, course_name): \n        self.courses.append(course_name)\n        self.num_courses += 1 # increment the number of courses\nThen we create a companion test file for our class, saving it in a file called student_test.py.\nfrom student import Student\nimport unittest\n\nclass EnrollInTestCase(unittest.TestCase): \n    \n    def test_is_incremented_correctly(self):\n        # test if enrollInCourse() method successfully increments the\n        # num_courses attribute of the Student object \n\n        # Create student instance, adding some courses\n        student1 = Student('Katherine', ['DS 5100'])\n        student1.enroll_in_course(\"CS 5050\")\n        student1.enroll_in_course(\"CS 5777\")\n        print(student1.courses)\n        print(student1.num_courses)\n        \n        # Test\n        expected = 3\n        # unittest.TestCase brings in the assertEqual() method\n        self.assertEqual(student1.num_courses, expected)\n        \nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python student_test.py\n\nThe messages that unittest prints are error messages on Unix, so if we want to direct them to a file, we need to use 2>.\nNotice how this command only shows the print messages contained in the program.\n\n!python student_test.py 2> student_results.txt\n\nThis one, on the other hand, captures the print methods and only shows the errors.\n\n!python student_test.py > student_results1.txt"
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "title": "NB: Unit Testing with Unittest",
    "section": "Further Reading",
    "text": "Further Reading\n\nunittest — Unit testing framework (Official Docs)\nHow To Use unittest to Write a Test Case for a Function in Python (Digital Ocean)\nA Cheat-sheet of Unittest Assert Methods"
  },
  {
    "objectID": "modules/m09/m09-intro.html#topics",
    "href": "modules/m09/m09-intro.html#topics",
    "title": "M09 Modules",
    "section": "Topics",
    "text": "Topics\n\nHow Python organizes code into modules, packages, and libraries\nHow to write your own modules\nHow to package and share your modules"
  },
  {
    "objectID": "modules/m09/m09-intro.html#readings",
    "href": "modules/m09/m09-intro.html#readings",
    "title": "M09 Modules",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2017, Part V. Modules and Packages → Up to Ch. 24.\n\n\nPython Package Tutorial (Read The Docs)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-modules-and-imports",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-modules-and-imports",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Packages, modules, and imports",
    "text": "Packages, modules, and imports"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#modules",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#modules",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Modules",
    "text": "Modules\nIn Python, a module can be a file containing Python definitions and statements.\nThe file name is the module name with the suffix .py appended.\nInside the file, the module’s name is available as the value of the global variable __name__.\nFor instance, let’s say we have a file called fibo.py with the following code:\n## Fibonacci numbers module\n\ndef fib(n):    # write Fibonacci series up to n\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\ndef fib2(n):   # return Fibonacci series up to n\n    a, b = 0, 1\n    result = []\n    while a < n:\n        result.append(a)\n        a, b = b, a+b\n    return result\nWe can import it into this notebook and get it’s filename.\n\nimport fibo\n\n\nfibo.__name__\n\nAnd here is how we interact with the file as a module:\n\nfibo.fib(1000)\n\n\nfibo.fib2(100)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#aside-on-namespaces",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#aside-on-namespaces",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Aside on Namespaces",
    "text": "Aside on Namespaces\nYou can see that a python module acts as a single namespace, which is used to organize a collection of values:\n\nfunctions\nconstants\nclass definitions\nreally any old value\n\nA namespace is a collection of currently defined names being used by a program.\nYou can think of its as a Python dictionary in which the keys are the object names and the values are the objects themselves.\nIt’s a way of making sure variable and function names do not collide or get confused with each other.\nPython has four namespaces: * Built-In: Contains the names of all of Python’s built-in objects. See dir(__builtins__) * Global: Contains any names defined at the level of the main program. A global namespace is also created for any module that your program imports. See globals(). * Enclosing: The namespaces of a function for any functions defined within that function. * Local: Contains any names defined in a function.\nNamespaces are related to scope. To know the context in which a name has meaning, Python searches namespaces from the inside out.\nL -> E -> G -> B\n\n\n\nimage.png\n\n\nSee M14-01a-Globals.ipynb for a demo.\nSee Namespaces and Scope in Python (Real Python) for a good primer.\n\n## dir()\n\n\n## dir(__builtins__)\n\n\n## locals()\n\n\n## globals()\n\n\ndef foo():\n    x = y = z = 1\n    print(locals())\n    \n    def bar():\n        a = b = c = 2\n        print(locals())\n        \n    bar()\n\n\nfoo()"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Packages",
    "text": "Packages\nA package is a directory that may contain other modules.\nFor a directory to be a package, it must contain an __init__.py file.\nThe __init__.py can be totally empty or it can have some Python code in it. We’ll see why you would do that below.\nIt it will contain other python files or other package directories, too.\nHere an example directory structure of a package that contains a package:\n## EXAMPLE 1 \na_package_dir\n    __init__.py\n    module_a.py\n    a_sub_package_dir\n        __init__.py\n        module_b.py\nAt a minimum, all you need to do have is this:\n## EXAMPLE 2\na_package_dir\n    __init__.py\n    module_a.py\nHowever, ideally, if you want to have your package installed, you’d do this:\n## EXAMPLE 3\nsrc\n    a_package_dir\n        __init__.py\n        module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml \nNote that we put our package in the source directory src and added the setup file setup.py, with the note that it can replaced by pyproject.toml."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-and-namespaces",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#packages-and-namespaces",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Packages and Namespaces",
    "text": "Packages and Namespaces\nPackages structure Python’s module namespace by setting up dotted module names.\nFor example, the module name A.B designates a submodule named B in a package named A.\nThe use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other’s module names."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#importing-packages-and-modules",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#importing-packages-and-modules",
    "title": "NB: Packages, Modules, and Imports",
    "section": "Importing Packages and Modules",
    "text": "Importing Packages and Modules\nSo, given the above directory and file structure, within a Python file you can:\nimport a_package\nThis will run any code in a_package/__init__.py.\nSo, any variable or function names defined in the __init__.py will be available like this:\na_package.a_name\nHowever, no modules will be imported unless explicity commanded to.\nFor example:\na_package.module_a\nwill not be imported.\nTo get modules, you need to explicitly import them:\nimport a_package.module_a\nYou will have noticed this in working with well-known libraries (bundles of packages) like Scikit Learn."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#the-module-search-path",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#the-module-search-path",
    "title": "NB: Packages, Modules, and Imports",
    "section": "The module search path",
    "text": "The module search path\nHow does Python know where to find modules?\nThe interpreter keeps a list of all the places that it looks for modules or packages when you do an import. It is stored in the sys module.\nimport sys\nfor p in sys.path:\n    print p\nYou can edit that list to add or remove paths to let python find modules on a new place.\nsys.path.append(some_local_dir)\nRemember that every module has a __file__ name that points to the path it lives in.\nThis lets you add paths relative to where you are, etc.\nsys.path.append(f\"{__file__}/local_module_directory\")"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-01-PackagesIntro.html#more-info",
    "title": "NB: Packages, Modules, and Imports",
    "section": "More Info",
    "text": "More Info\nThere is, of course, a lot more to this topic than what’s covered here.\nWe’ve covered what you need to know to get started.\nSee the official docs on modules for more depth."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#class-and-globals",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#class-and-globals",
    "title": "NB: More on Classes and Globals",
    "section": "Class and Globals",
    "text": "Class and Globals\nWe experiment to see if classes can see the globals of their surrounding environment.\nWe already know that functions can.\n\nclass Test:\n    \n    # x has not been declared within the class \n    # or any of its methods\n    \n    def static_test():\n        print(x)\n        \n    def method_test(self):\n        print(x)\n\n\nx = 5\n\n\ntry:\n    Test.static_test()\nexcept NameError as e:\n    print(e)\n\n\nt = Test()\n\n\ntry:\n    t.method_test()\nexcept NameError as e:\n    print(e)\n\nSo, global variables are also visible within classes.\nThe class can see the globals, even though x was defined after the class definition.\nSo, the class learns about its environment when it is called, not defined.\nBut what about imported classes and functions?"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "title": "NB: More on Classes and Globals",
    "section": "Try with Imports",
    "text": "Try with Imports\nWe import the file test.py, which contains this code:\ny = 15\n\ndef imported_function_test():\n    print(x)\n\ndef imported_function_test_y():\n    print(y)\n    \nclass ImportedTest:\n    \n    def imported_static_test():\n        print(x)\n    \n    def imported_method_test(self):\n        print(x)\n        \n    def imported_static_test_y():\n        print(y)\n    \n    def imported_method_test_y(self):\n        print(y)\n\nfrom test import *\n\n\nImported Function\n\ntry:\n    imported_function_test()\nexcept NameError as e:\n    print(e)\n\n\ntry:\n    imported_function_test_y()\nexcept NameError as e:\n    print(e)\n\n\n\nImported Static Method\n\ntry:\n    ImportedTest.imported_static_test()\nexcept NameError as e:\n    print(e)\n\n\ntry:\n    ImportedTest.imported_static_test_y()\nexcept NameError as e:\n    print(e)\n\n\n\nImported Instance Method\n\nt2 = ImportedTest()\n\n\ntry:\n    t2.imported_method_test()\nexcept NameError as e:\n    print(e)\n\n\ntry:\n    t2.imported_method_test_y()\nexcept NameError as e:\n    print(e)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#building-your-own-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#building-your-own-package",
    "title": "NB: Building Your Own Package",
    "section": "Building Your Own Package",
    "text": "Building Your Own Package"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#some-examples",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#some-examples",
    "title": "NB: Building Your Own Package",
    "section": "Some Examples",
    "text": "Some Examples\n\nScikit Learn: Repo | Site (Structure models code)\nNLTK Repo | Site (Structure models spaghetti)\nSpaCy Repo | Site (API) (Structure kinda models code)\nhttps://github.com/ontoligent/mazo\nhttps://github.com/ontoligent-design/polo2"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#why-build-a-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#why-build-a-package",
    "title": "NB: Building Your Own Package",
    "section": "Why Build a Package?",
    "text": "Why Build a Package?\nYou package code in order to add it to your python system for general use, and to share it with others.\nIt’s easy to do. There are a bunch of nifty tools that help you build, install and distribute packages.\nIt’s also just good to have well organized code. This applies to how to organize your programs internally, and externally as files and directories."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-is-a-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-is-a-package",
    "title": "NB: Building Your Own Package",
    "section": "What is a Package?",
    "text": "What is a Package?\nAgain: A collection of modules (python files) along with: * the documentation * the tests * any top-level scripts * any data files required * instructions and scripts to build and install it"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "title": "NB: Building Your Own Package",
    "section": "What does it mean to build your Package?",
    "text": "What does it mean to build your Package?\nTo build your own package, you of course need some Python files you want to deploy.\nThen you create the following: 1. Create the basic package structure, such as EXAMPLE 3 above. 2. Write a setup.py using a package tool (see below).\n## EXAMPLE 3\nsrc\n    a_package_dir\n        __init__.py\n        module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "title": "NB: Building Your Own Package",
    "section": "About setup.py",
    "text": "About setup.py\nYour setup.py file describes your package, and tells the packaging tool how to package, build, and install it.\nIt is Python code, so you can add anything custom you need to it.\nIn the simple case, it is basically a configuration files with keys and values.\nWhat does setup.py contain?\n\nVersion & package metadata\nList of packages to include\nList of other files to include\nList of dependencies\nList of extensions to be compiled\n\nAbout pyproject.toml\nFor a lot reasons that beyond the scope of this document, setup.py is being superceded by the use of pyproject.toml files to store setup configuration information. However, for now we’re going to stick to the old school approach."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "title": "NB: Building Your Own Package",
    "section": "Example Setup Files",
    "text": "Example Setup Files\n\nExample 1\nfrom distutils.core import setup\n\nsetup(name='mypkg',\n      version='1.0',\n      \n      # list folders, not files\n      packages=['mypkg', 'mypkg.subpkg'], # Include packages in the project\n      install_requires=['click'],         # Required libraries\n)\n\n\nExample 2\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='MyPackageName',\n    version='1.0.0',\n    url='https://github.com/mypackage.git',\n    author='Author Name',\n    author_email='author@gmail.com',\n    description='Description of my package',\n    packages=find_packages(),    \n    install_requires=['numpy >= 1.11.1', 'matplotlib >= 1.5.1'],\n)\n\n\nExample 3\nfrom setuptools import setup\n\nsetup(\n    name = 'PackageName',\n    version = '0.1.0',\n    author = 'An Awesome Coder',\n    author_email = 'aac@example.com',\n    packages = ['package_name', 'package_name.test'],\n    scripts = ['bin/script1','bin/script2'],\n    url = 'http://pypi.python.org/pypi/PackageName/',\n    license = 'LICENSE.txt',\n    description = 'An awesome package that does something',\n    long_description = open('README.txt').read(),\n    install_requires = [\n        \"Django >= 1.1.1\",\n        \"pytest\",\n    ],\n)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "title": "NB: Building Your Own Package",
    "section": "A Summary of Keys",
    "text": "A Summary of Keys\nAs mentioned about, the main content of basic setup files is configuraton information. The keys that you should include in your projects are the following:\n\nname: A string of the package name as title, not a filename.\nversion: A string of the version number expression, typically using the MAJOR.MINOR.PATCH pattern. See Semantic Versioning for more information.\nauthor: A string with the creator’s name.\nauthor_email: A string with the creator’s email address.\npackages: A list of strings of package directories in the project.\nurl: A string of the URL to the code repo.\nlicense: A string of the license file name.\ndescription: A string with a short blurb of the project.\nlong_description: A link to a longer description. Can do something like open('README.txt').read().\ninstall_requires: A list of strings of external libraries that the project requires.\n\n\nPython packaging tools\nIn writing setup.py, you need to use a packaging tool. Notice that we’ve imported the setuptools library. * The package tool distutils is included with Python, but it is not recommended. * Instead, use setuptools, a third party tool that extends distutils and is used in most modern Python installations.\n\n\nSummary of fields"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "title": "NB: Building Your Own Package",
    "section": "Quick Demo",
    "text": "Quick Demo\nSo, let’s look at a simple package.\nSource: Minimal Structure (python-packaging)\n\nDirectory\nHere is our directory structure:\n\n!ls -lR demo_package3/\n\n\n\nSetup file\nHere is what out setup.py file has inside:\n\nprint(open('demo_package3/setup.py', 'r').read())\n\n\n\n__init__.py\n\nprint(open('demo_package3/funniest/__init__.py', 'r').read())\n\n\n\nfunniest.py\n\nprint(open('demo_package3/funniest/funniest.py', 'r').read())\n\n\n\nInstall\n\n!cd demo_package3/; pip install .\n\n\n\nTry it out\n\nfrom funniest import joke\n\n\njoke()"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "title": "NB: Building Your Own Package",
    "section": "Many Ways to Install",
    "text": "Many Ways to Install\nRunning setup.py directly with python\npython setup.py sdist   # Builds a source distribution as tar archie\npython setup.py build   # Builds from source\npython setup.py install # Installs to Python\npython setup.py develop # Installs in develop mode (changes are immediately reflected)\nUsing pip\npip install .    # Installs to Python\npip install -e . # To create symlink, so you can keep working on the code (develop mode)"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "title": "NB: Building Your Own Package",
    "section": "Testing Code",
    "text": "Testing Code\nAs you work, you will want to write tests and put them somewhere. You have options:\n\nIf your package and test code are small and self contained, put the tests in with the package, e.g. package/test.\nIf the tests are large or complex, or require reading/writing files, or significant sample data, put your tests outside the package.\n\nSee Where to Put Tests?."
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-package-structure",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-package-structure",
    "title": "NB: Building Your Own Package",
    "section": "A More Complex Package Structure",
    "text": "A More Complex Package Structure\npackage_name/\n    bin/\n    CHANGES.txt\n    docs/\n    LICENSE.txt\n    MANIFEST.in\n    README.txt\n    setup.py\n    package_name/\n          __init__.py\n          module1.py\n          module2.py\n          test/\n              __init__.py\n              test_module1.py\n              test_module2.py\nCHANGES.txt: log of changes with each release\nLICENSE.txt: text of the license you choose (do choose one!)\nMANIFEST.in: description of what non-code files to include\nREADME.txt: description of the package should be written in ReST or Markdown (for PyPi):\nsetup.py: the script for building/installing package.\nbin/: This is where you put top-level scripts\n( some folks use scripts )\ndocs/: the documentation\npackage_name/: The main package this is where the code goes.\ntest/: your unit tests. Options here:"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "title": "NB: Building Your Own Package",
    "section": "More Info",
    "text": "More Info\nhttps://packaging.python.org/en/latest/overview/"
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02a-InitPyDemo.html",
    "href": "notebooks/M09_PythonModules/M09-02a-InitPyDemo.html",
    "title": "NB: Demonstrations of Import and init.py()",
    "section": "",
    "text": "Demo 1: Empty __init__.py\n\nimport demo_package1.module1 as d1m\n\n\nd1m.welcome1()\n\nHi, I'm from Demo 1!\n\n\n\nfrom demo_package1.module1 import welcome1\n\n\nwelcome1()\n\nHi, I'm from Demo 1!\n\n\n\n\nDemo 2: Edited __init__.py\nYou can allow the users to import a module function directly from a package by simply adding:\nfrom package.module import func # or class\nor\nfrom .module import func # or class\nto your __init__.py file.\nFor example, our Demo2 __init__().py contains:\nfrom demo_package2.module2 import welcome2\nThis allows me to do this:\n\nimport demo_package2 as d2\n\n\nd2.welcome2()\n\nHi, I'm from Demo 2!\n\n\nOr this:\n\nfrom demo_package2 import welcome2\n\n\nwelcome2()\n\nHi, I'm from Demo 2!"
  },
  {
    "objectID": "modules/m09/m09-review.html",
    "href": "modules/m09/m09-review.html",
    "title": "Review",
    "section": "",
    "text": "Method arguments and Class Attributes\n\n\nUnderstanding Modules and Packages\n\n\n\n\n\nModules\n\n\n\n\n\nA module is a single namespace with many possible values (functions, classes, constants, etc.)\n\n\n\n\nUsually corresponds to a file.\n\n\n\n\nAll modules have a name.\n\n\n\n\nPython has only one type of module object.\n\n\n\n\n\nA Package is just a module that may contain other modules (or packages).\n\n\n\n\n\nIt is module with a path attribute.\n\n\n\n\nPackages organize modules into a named hierarchy.\n\n\n\n\nPackages : modules :: directories : files\n\n\n\n\nUsually corresponds to a directory with with an init.py file in it.\n\n\n\n\n\nThere are two kinds of packages (as of 3.3)\n\n\n\n\n\nRegular packages are traditional (2 and up to 3.2), they are a directory with an init.py file. They are dependent on the file system.\n\n\n\n\nNamespace packages are composed of portions. They do not have an init.py file. Portions can be anywhere. They are not dependent on the file system. They may be virtual.\n\n\n\n\n\nImport statements bring modules into modules. Combines two operations:\n\n\n\n\n\nSearches for named module.\n\n\n\n\nBinds results to local name, i.e. the fully qualified path or an alias.\n\n\n\n\nCompiles and runs the files and packages it imports.\n\n\n\n\n\nSome general ideas\n\n\n\n\n\nYou can think of a module as a supplemental file relative to a top-level program or script.\n\n\n\n\nModule files generally don’t do anything when run directly – they are used by other files.\n\n\n\n\nWhen modules are imported, their elements are called attributes\n\n\n\n\nImports execute init.py files from the context of the directory of execution. Think of this as the project directory.\n\n\n\n\nFile and directory names should follow variable and function naming conventions since they will be used to create the names used in the importing program.\n\n\n\n\nGlobal scope is always the file enclosing it, regardless of which module it is ultimately called from."
  },
  {
    "objectID": "modules/m10/m10-intro.html#topics",
    "href": "modules/m10/m10-intro.html#topics",
    "title": "M10 Basic R",
    "section": "Topics",
    "text": "Topics\n\nPresent R basics — syntax, data types, and operators\nPresent R data structures – vectors, lists, matrices, and data frames\nCreate a function in R, and use it in a program"
  },
  {
    "objectID": "modules/m10/m10-intro.html#readings",
    "href": "modules/m10/m10-intro.html#readings",
    "title": "M10 Basic R",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nW3Schools R Tutorial\n\n\nW3Schools R Data Structures\n\n\n\n\nOptional\n\n\nYau, R Tutorial, “R Introduction” ← Super concise"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#preliminaries",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#preliminaries",
    "title": "NB: Getting Started",
    "section": "Preliminaries",
    "text": "Preliminaries\n\nInstalling and Loading Packages\nPackages need to be installed once.\n\n## install.packages(\"tm\")  \n\nYou can also install thing using the Package window.\nOnce they are installed, you import them with the library() function:\n\nlibrary(tm)\n\nLoading required package: NLP\n\n\nNote that the library name is quoted in when installing, but not when using library.\n\n\nR’s Design\n\nDesigned to support statistical computing\nVery strong community\nMany domain-specific functions are built in\nVector first thinking\nEverything is an object\n\n\n\nR Syntax\n\nSyntax loosely follows traditional C-style\n\nBraces { and } are used to form blocks.\nSemi-colons are used optionally to end statements, required if on same line.\n\nAssignments are made with <- or ->\nDots . have no special meaning – they are not operators.\nSingle and double quotes have the same meaning, but double quotes tend to be preferred.\n\nUse single quotes if you expect your string to contain double quotes.\nBackslash escape applies to R strings, although since there are no raw strings – Python’s r\" \" – we often have to supply double backslashes in regular expressions."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "title": "NB: Getting Started",
    "section": "R Data Types",
    "text": "R Data Types\nThere are several basic R data types.\n\nNumeric\nInteger\nComplex\nLogical\nCharacter\n\n\nNumeric\nDecimal values are called “numerics” in R.\nIt is the default computational data type.\nIf we assign a decimal value to a variable x, x will be of numeric type:\n\nx <- 10.5       # assign a decimal value \nx              # print the value of x \n\n[1] 10.5\n\n\n\nclass(x)      # print the class name of x \n\n[1] \"numeric\"\n\n\nEve if we assign an integer to a variable k, it is will still be saved as a numeric value.\n\nk <- 1\nk              # print the value of k \n\n[1] 1\n\n\n\nclass(k)       # print the class name of k \n\n[1] \"numeric\"\n\n\nThat k is not an integer can be confirmed with is.integer():\n\nis.integer(k)  # is k an integer? \n\n[1] FALSE\n\n\n\n\nIntegers\nTo create an integer variable in R, we use as.integer().\n\ny <- as.integer(3) \ny              # print the value of y \n\n[1] 3\n\n\n\nclass(y)       # print the class name of y \n\n[1] \"integer\"\n\nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can also declare an integer by appending an L suffix.\n\ny <- 3L \nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can coerce, or cast, a numeric value into an integer with as.integer().\n\nas.integer(3.14)    # coerce a numeric value \n\n[1] 3\n\n\nAnd we can parse a string for decimal values in much the same way.\n\nas.integer(\"5.27\")  # coerce a decimal string \n\n[1] 5\n\n\nOn the other hand, it is erroneous trying to parse a non-decimal string.\n\nas.integer(\"Joe\")   # coerce an non-decimal string \n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\nWe can convert booleans to numbers this way, too.\n\nas.integer(TRUE)    # the numeric value of TRUE \n\n[1] 1\n\nas.integer(FALSE)   # the numeric value of FALSE \n\n[1] 0\n\n\n\nMath Operators\n\n\n\nOperator\nDescription\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\nx %% y\nmodulus (x mod y) 5%%2 is 1\n\n\nx %/% y\ninteger division 5%/%2 is 2\n\n\n\n\n\n\nLogical (Boolean)\nA logical value is often created via comparison between variables.\n\nx <- 1\ny <- 2   # sample values \nz <- x > y      # is x larger than y? \nz              # print the logical value \n\n[1] FALSE\n\n\n\nclass(z)       # print the class name of z \n\n[1] \"logical\"\n\n\n\nLogical Operators\nStandard logical operations are & (and), | (or), and ! (negation).\n\nu <- TRUE\nv <- FALSE\nu & v          # u AND v \n\n[1] FALSE\n\n\n\nu | v          # u OR v \n\n[1] TRUE\n\n\n\n!u             # negation of u \n\n[1] FALSE\n\n\nNote that you can use T and F instead of TRUE and FALSE.\n\na <- T\nb <- F\na & b\n\n[1] FALSE\n\n\n\n\n\nCharacters\nA character object is used to represent string values in R.\nWe convert objects into character values with the as.character() function:\n\nx <- as.character(3.14) \nx\n\n[1] \"3.14\"\n\n\n\nclass(x)       # print the class name of x \n\n[1] \"character\"\n\n\n\npaste()\nTwo character values can be concatenated with the paste() function.\n\nfname <- \"Joe\"\nlname <-\"Smith\" \npaste(fname, lname) \n\n[1] \"Joe Smith\"\n\n\npaste() takes a sep argument:\n\npaste(\"A\", \"B\", \"C\", sep=\"--\")\n\n[1] \"A--B--C\"\n\n\n\n\nsprintf()\nHowever, it is often more convenient to create a readable string with the sprintf() function, which has a C language syntax.\n\nsprintf(\"%s has %d dollars\", \"Sam\", 100) \n\n[1] \"Sam has 100 dollars\"\n\n\n\n\nsubstr()\nTo extract a substring, we apply the substr() function.\nHere is an example showing how to extract the substring between the third and twelfth positions in a string.\n\nsubstr(\"Mary has a little lamb.\", start=3, stop=12) \n\n[1] \"ry has a l\"\n\n\n\n\nsub()\nAnd to replace the first occurrence of the word “little” by another word “big” in the string, we apply the sub() function.\n\nsub(\"little\", \"big\", \"Mary has a little lamb.\") \n\n[1] \"Mary has a big lamb.\""
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "title": "NB: Getting Started",
    "section": "R Data Structures",
    "text": "R Data Structures\nBasic R comes with several data structures:\n\nVector\nMatrix\nArray\nList\nData frame\n\nA vector is what is called an array in many other programming languages\n\nA collection of cells with a fixed size where all cells hold the same data type (integers or characters or reals or whatever).\n\nA matrix is a two-dimensional vector (fixed size, all cell types the same).\nAn array is a vector with one or more dimensions.\n\nSo, an array with one dimension is (almost) the same as a vector.\nAn array with two dimensions is (almost) the same as a matrix.\nAn array with three or more dimensions is an n-dimensional array.\n\nA list can hold items of different types and the list size can be increased on the fly.\n\nList contents can be accessed either by index (like mylist[[1]]) or by name (like mylist$age).\n\nA data frame is called a table in many languages.\n\nEach column holds the same type, and the columns can have header names.\nA data frame is essential a kind of a list — a list of vectors each with the same length, but of varying data types.\n\nThe two most frequently uses are Vector and Data frame.\nSo, we will look at vectors and data frames.\n\nWe will also look at lists since they are used internally to construct data frames.\n\n\nVectors and c()\nA vector is a sequence of data elements of the same basic type.\nMembers in a vector are officially called components, but many call them members.\nVectors may be created with the c() function (“c” stands for combine).\nHere is a vector of three numeric values 2, 3 and 5.\n\nc(2, 3, 5) \n\n[1] 2 3 5\n\n\nAnd here is a vector of logical values.\n\nc(TRUE, FALSE, TRUE, FALSE, FALSE) \n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n\nA vector can contain character strings.\n\nc(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nVectors from sequences using :, seq(), and rep()\nVectors can be made out of sequences which may be generated in a few ways.\n\ns1 <- 2:5\ns1\n\n[1] 2 3 4 5\n\n\nThe seq() function is like Python’s range().\n\ns2 <- seq(from=1, to=5, by=2)  # You can drop the argument names write seq(1,5,2)\ns2\n\n[1] 1 3 5\n\n\nThe rep() function will create a series of repeated values:\n\ns3 <- rep(1, 5)\ns3\n\n[1] 1 1 1 1 1\n\n\n\n\nlength()\nThe number of members in a vector is given by the length() function.\n\nlength(c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")) \n\n[1] 5\n\n\n\n\nCombining Vectors with c()\nVectors can be combined via the function c().\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n c(n, s) \n\n[1] \"2\"  \"3\"  \"5\"  \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\n\nValue Coercion\nNotice how the numeric values are being coerced into character strings when the two vectors are combined.\nThis is necessary so as to maintain the same primitive data type for members in the same vector.\n\n\nVector Math\nArithmetic operations of vectors are performed member-by-member, i.e., member-wise.\nFor example, suppose we have two vectors a and b.\n\na <- c(1, 3, 5, 7) \nb <- c(1, 2, 4, 8)\n\nThen, if we multiply a by 5, we would get a vector with each of its members multiplied by 5.\n\n5 * a \n\n[1]  5 15 25 35\n\n\nAnd if we add a and b together, the sum would be a vector whose members are the sum of the corresponding members from a and b.\n\na + b\n\n[1]  2  5  9 15\n\n\nSimilarly for subtraction, multiplication and division, we get new vectors via member-wise operations.\n\na - b \n\n[1]  0  1  1 -1\n\n\n\na * b \n\n[1]  1  6 20 56\n\n\n\na / b \n\n[1] 1.000 1.500 1.250 0.875\n\n\n\n\nThe Recycling Rule\nIf two vectors are of unequal length, the shorter one will be recycled in order to match the longer vector.\nFor example, the following vectors u and v have different lengths, and their sum is computed by recycling values of the shorter vector u.\n\nu <- c(10, 20, 30) \nv <- c(1, 2, 3, 4, 5, 6, 7, 8, 9) \nu + v \n\n[1] 11 22 33 14 25 36 17 28 39\n\n\n\n\nVector Indexes\nWe retrieve values in a vector by declaring an index inside a single square bracket index [] operator.\nVector indexes are 1-based.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[3] \n\n[1] \"cc\"\n\n\n\n\nNegative Indexing\nUnlike Python, if the index is negative, it will remove the member whose position has the same absolute value as the negative index.\nIt really does mean subtraction!\nFor example, the following creates a vector slice with the third member removed.\n\ns[-3] \n\n[1] \"aa\" \"bb\" \"dd\" \"ee\"\n\n\n\n\nOut-of-Range Indexes\nValues for out-of-range indexes are reported as NA.\n\ns[10] \n\n[1] NA\n\n\n\n\nNumeric Index Vectors\nA new vector can be sliced from a given vector with a numeric vector passed to the indexing operator.\nIndex vectors consist of member positions of the original vector to be retrieved.\nHere we see how to retrieve a vector slice containing the second and third members of a given vector s.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[c(2, 3)] \n\n[1] \"bb\" \"cc\"\n\n\n\n\nDuplicate Indexes\nThe index vector allows duplicate values. Hence the following retrieves a member twice in one operation.\n\ns[c(2, 3, 3)] \n\n[1] \"bb\" \"cc\" \"cc\"\n\n\n\n\nOut-of-Order Indexes\nThe index vector can even be out-of-order. Here is a vector slice with the order of first and second members reversed.\n\ns[c(2, 1, 3)] \n\n[1] \"bb\" \"aa\" \"cc\"\n\n\n\n\nRange Index\nTo produce a vector slice between two indexes, we can use the colon operator “:”. This can be convenient for situations involving large vectors.\n\ns[2:4] \n\n[1] \"bb\" \"cc\" \"dd\"\n\n\n\n\nLogical Index Vectors\nA new vector can be sliced from a given vector with a logical index vector.\nThe logical vector must the same length as the original vector.\nIts members are TRUE if the corresponding members in the original vector are to be included in the slice, and FALSE if otherwise.\n\nThis is what we called boolean filtering and masking in Python.\n\nFor example, consider the following vector s of length 5.\n\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")\n\nTo retrieve the the second and fourth members of s, we define a logical vector L of the same length, and have its second and fourth members set as TRUE.\n\nL = c(FALSE, TRUE, FALSE, TRUE, FALSE)\ns[L] \n\n[1] \"bb\" \"dd\"\n\n\nThe code can be abbreviated into a single line.\n\ns[c(FALSE, TRUE, FALSE, TRUE, FALSE)]\n\n[1] \"bb\" \"dd\"\n\n\n\n\nNaming Vector Members with names()\nWe can assign names to vector members.\n\nv <- c(\"Mary\", \"Sue\") \nnames(v) <- c(\"First\", \"Last\") \nv \n\n First   Last \n\"Mary\"  \"Sue\" \n\n\nNow we can retrieve the first member by name.\n\nv[\"First\"] \n\n First \n\"Mary\" \n\n\nWe can also reverse the order with a character string index vector.\n\nv[c(\"Last\", \"First\")] \n\n  Last  First \n \"Sue\" \"Mary\" \n\n\n\n\n\nLists\nA list is a generic vector containing other objects.\nThe following variable x is a list containing copies of three vectors n, s, b, and a numeric value 3.\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \nb <- c(TRUE, FALSE, TRUE, FALSE, FALSE) \n\nx <- list(n, s, b, 3)   # x contains copies of n, s, b\nx\n\n[[1]]\n[1] 2 3 5\n\n[[2]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n[[4]]\n[1] 3\n\n\nNote that odd bracket notation.\nEach list member contains a vector.\n\nList Slicing\nWe retrieve a list slice with the single square bracket [] operator.\nThe following is a slice containing the second member of x, which is a copy of s.\n\nx[2] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWith an index vector, we can retrieve a slice with multiple members.\nHere a slice containing the second and fourth members of x.\n\nx[c(2, 4)] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[2]]\n[1] 3\n\n\n\n\nMember Reference with [[]]\nTo reference a list member directly, we use the double square bracket [[]] operator.\nThe following object x[[2]] is the second member of x.\nIn other words, x[[2]] is a copy of s, but is not a slice containing s or its copy.\n\nx[2]\n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nx[[2]]\n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWe can modify its content directly.\n\nx[[2]][1] = \"ta\" \nx[[2]] \n\n[1] \"ta\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nAnd s is unaffected.\n\ns \n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\n\n\nData Frames\nA data frame is used for storing data tables.\nIt is essentially a list of vectors of equal length. For example, the following variable df is a data frame containing three vectors n, s, b.\nYou can think of a data frame is a special kind of list.\n\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\") \nb <- c(TRUE, FALSE, TRUE) \ndf <- data.frame(n, s, b) # df is a data frame\ndf\n\n  n  s     b\n1 2 aa  TRUE\n2 3 bb FALSE\n3 5 cc  TRUE\n\n\nNotice that data frames are built column-wise – this is true of Pandas data frames as well.\nThe top line of the data frame is the header; it contains the column names.\nThe data type is list below the column name.\nEach horizontal line afterward denotes a data row, which begins with the name of the row, and then followed by the actual data.\nEach data member of a row is called a cell.\n\nBuilt-in Data Frames\nHere is a built-in data frame in R, called mtcars.\n\nmtcars \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nTo retrieve data in a cell, we would enter its row and column coordinates in the single square bracket [ ] operator.\nThe two coordinates are separated by a comma, e.g. [row, col].\nHere is the cell value from the first row, second column of mtcars.\n\nmtcars[1, 2] \n\n[1] 6\n\n\nWe can use names instead of the numeric coordinates.\n\nmtcars[\"Mazda RX4\", \"cyl\"] \n\n[1] 6\n\n\nLastly, the number of data rows in the data frame is given by the nrow() function.\n\nnrow(mtcars)    # number of data rows \n\n[1] 32\n\n\nAnd the number of columns of a data frame is given by the ncol() function.\n\nncol(mtcars)    # number of columns \n\n[1] 11\n\n\n\ndim(mtcars)\n\n[1] 32 11\n\n\nFurther details of the mtcars data set is available in the R documentation.\n\nhelp(mtcars)\n\n\n\nPreview with head()\nInstead of printing out the entire data frame, it is often desirable to preview it with the head function beforehand\n\nhead(mtcars) \n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\nData Frame Column Vectors\nWe reference a data frame column with the double square bracket [[]] operator, just as we do for lists.\nFor example, to retrieve the ninth column vector of the built-in data set mtcars, we write mtcars[[9]]\n\nmtcars[[9]] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can retrieve the same column vector by its name\n\nmtcars[[\"am\"]] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can also retrieve with the “$” operator in lieu of the double square bracket operator\n\nmtcars$am \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nYet another way to retrieve the same column vector is to use the single square bracket “[]” operator. We prepend the column name with a comma character, which signals a wildcard match for the row position\n\nmtcars[, \"am\"] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\n\n\nData Frame Column Slice\nWe retrieve a data frame column slice with the single square bracket [ ] operator.\nNote: This is like a one-column dataframe in Pandas, as opposed to a Series.\n\nNumeric Indexing\nThe following is a slice containing the first column of the built-in data set mtcars\n\nmtcars[1] \n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\n\n\nName Indexing\nWe can retrieve the same column slice by its name\n\nmtcars[\"mpg\"] \n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\nCompare to accessing the column vector data directly:\n\nmtcars[[\"mpg\"]]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\nThis is similar to the .values() method in Pandas, which returns the raw NumPy array\nTo retrieve a data frame slice with the two columns mpg and hp, we pack the column names in an index vector inside the single square bracket operator\n\nmtcars[c(\"mpg\", \"hp\")] \n\n                     mpg  hp\nMazda RX4           21.0 110\nMazda RX4 Wag       21.0 110\nDatsun 710          22.8  93\nHornet 4 Drive      21.4 110\nHornet Sportabout   18.7 175\nValiant             18.1 105\nDuster 360          14.3 245\nMerc 240D           24.4  62\nMerc 230            22.8  95\nMerc 280            19.2 123\nMerc 280C           17.8 123\nMerc 450SE          16.4 180\nMerc 450SL          17.3 180\nMerc 450SLC         15.2 180\nCadillac Fleetwood  10.4 205\nLincoln Continental 10.4 215\nChrysler Imperial   14.7 230\nFiat 128            32.4  66\nHonda Civic         30.4  52\nToyota Corolla      33.9  65\nToyota Corona       21.5  97\nDodge Challenger    15.5 150\nAMC Javelin         15.2 150\nCamaro Z28          13.3 245\nPontiac Firebird    19.2 175\nFiat X1-9           27.3  66\nPorsche 914-2       26.0  91\nLotus Europa        30.4 113\nFord Pantera L      15.8 264\nFerrari Dino        19.7 175\nMaserati Bora       15.0 335\nVolvo 142E          21.4 109\n\n\n\n\n\nData Frame Row Slice\nWe retrieve rows from a data frame with the single square bracket operator, just like what we did with columns. However, in additional to an index vector of row positions, we append an extra comma character. This is important, as the extra comma signals a wildcard match for the second coordinate for column positions.\n\nNumeric Indexing\nFor example, the following retrieves a row record of the built-in data set mtcars. Please notice the extra comma in the square bracket operator, and it is not a typo. It states that the 1974 Camaro Z28 has a gas mileage of 13.3 miles per gallon, and an eight cylinder 245 horse power engine, …, etc\n\nmtcars[24,] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nTo retrieve more than one rows, we use a numeric index vector\n\nmtcars[c(3, 24),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nName Indexing\nWe can retrieve a row by its name.\n\nmtcars[\"Camaro Z28\",] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nAnd we can pack the row names in an index vector in order to retrieve multiple rows.\n\nmtcars[c(\"Datsun 710\", \"Camaro Z28\"),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nLogical Indexing\nLastly, we can retrieve rows with a logical index vector. In the following vector L, the member value is TRUE if the car has automatic transmission, and FALSE if otherwise.\n\nL <- mtcars$am == 0 \nL \n\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nHere is the list of vehicles with automatic transmission\n\nmtcars[L,] \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n\n\nAnd here is the gas mileage data for automatic transmission\n\nmtcars[L,]$mpg \n\n [1] 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 21.5\n[16] 15.5 15.2 13.3 19.2\n\n\n\n\nChange the name of a column\n\nnames(df)[names(df) == 'old.var.name'] <- 'new.var.name'\n\n\n\n\nImporting Data\nIt is often necessary to import sample textbook data into R before you start working on your homework.\nExcel Files\nQuite frequently, the sample data is in Excel format, and needs to be imported into R prior to use. For this, we can use the function read.xls from the gdata package. It reads from an Excel spreadsheet and returns a data frame. The following shows how to load an Excel spreadsheet named “mydata.xls”. This method requires Perl runtime to be present in the system\n\n##library(gdata)                   # load gdata package \n##help(read.xls)                   # documentation \n##mydata <- read.xls(\"mydata.xls\")  # read from first sheet\n\nAlternatively, we can use the function loadWorkbook from the XLConnect package to read the entire workbook, and then load the worksheets with readWorksheet. The XLConnect package requires Java to be pre-installed\n\n##library(XLConnect)               # load XLConnect package \n##wk <- loadWorkbook(\"mydata.xls\") \n##df <- readWorksheet(wk, sheet=\"Sheet1\")\n\nTable Files\nA data table can resides in a text file.\nThe cells inside the table are separated by blank characters.\nHere is an example of a table with 4 rows and 3 columns.\n100 a1 b1 \n200 a2 b2 \n300 a3 b3 \n400 a4 b4\nNow copy and paste the table above in a file named “mydata.txt” with a text editor.\nThen load the data into the workspace with the function read.table\n\nmydata <- read.table(\"mydata.txt\")  # read text file \n\nWarning in read.table(\"mydata.txt\"): incomplete final line found by\nreadTableHeader on 'mydata.txt'\n\nmydata                             # print data frame \n\n   V1 V2 V3\n1 100 a1 b1\n2 200 a2 b2\n3 300 a3 b3\n4 400 a4 b4\n\n\nCSV Files\nThe sample data can also be in comma separated values (CSV) format. Each cell inside such data file is separated by a special character, which usually is a comma, although other characters can be used as well.\nThe first row of the data file should contain the column names instead of the actual data. Here is a sample of the expected format.\nCol1,Col2,Col3 \n100,a1,b1 \n200,a2,b2 \n300,a3,b3\nAfter we copy and paste the data above in a file named “mydata.csv” with a text editor, we can read the data with the function read.csv\n\nmydata <- read.csv(\"mydata.csv\")  # read csv file \n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'mydata.csv'\n\nmydata \n\n  Col1 Col2 Col3\n1  100   a1  b1 \n2  200   a2  b2 \n3  300   a3   b3\n\n\nIn various European locales, as the comma character serves as the decimal point, the function read.csv2 should be used instead. For further detail of the read.csv and read.csv2 functions, please consult the R documentation\n\nhelp(read.csv)\n\n\n\nWorking Directory\nFinally, the code samples above assume the data files are located in the R working directory, which can be found with the function getwd().\nNote that these things can also be set using the RStudio’s GUI.\n\ngetwd()               # get current working directory\n\n[1] \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M10_RBasics\"\n\n\nYou can select a different working directory with the function setwd(), and thus avoid entering the full path of the data files\n\n## setwd(\"<new path>\")   # set working directory\n\nNote that the forward slash should be used as the path separator even on Windows platform\n\n## setwd(\"C:/MyDoc\")"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "title": "NB: Getting Started",
    "section": "Extra",
    "text": "Extra\n\nPlots with plot()\nR is know for its high-quality visualizations, and we’ll explore at these in more detail when we look at GGPlot.\nFor now, consider the plot() function.\nLet’s plot the data from the built in data frame airquality.\n\nairquality\n\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n\n\n\nplot(airquality)\n\n\n\n\n\nplot(airquality[, c(\"Temp\", \"Wind\")])\n\n\n\n\n\nplot(airquality$Temp, type='l')\n\n\n\n\n\n?plot\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  graphics              /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  base                  /Library/Frameworks/R.framework/Resources/library\n\n\nUsing the first match ...\n\n\n\n\nValue Counts with table()\nThis function is like .value_counts() in Pandas. It does a quick count of all the value types of a feature or combination of them.\nHere we get a table of values and their counts for airquality$Temp, convert this into a data frame, and then plot the results.\n\ntemps <- table(airquality$Temp)\ntemps\n\n\n56 57 58 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \n 1  3  2  2  3  2  1  2  2  3  4  4  3  1  3  3  5  4  4  9  7  6  6  5 11  9 \n83 84 85 86 87 88 89 90 91 92 93 94 96 97 \n 4  5  5  7  5  3  2  3  2  5  3  2  1  1 \n\n\n\ntemps.df <- data.frame(temps)\ntemps.df\n\n   Var1 Freq\n1    56    1\n2    57    3\n3    58    2\n4    59    2\n5    61    3\n6    62    2\n7    63    1\n8    64    2\n9    65    2\n10   66    3\n11   67    4\n12   68    4\n13   69    3\n14   70    1\n15   71    3\n16   72    3\n17   73    5\n18   74    4\n19   75    4\n20   76    9\n21   77    7\n22   78    6\n23   79    6\n24   80    5\n25   81   11\n26   82    9\n27   83    4\n28   84    5\n29   85    5\n30   86    7\n31   87    5\n32   88    3\n33   89    2\n34   90    3\n35   91    2\n36   92    5\n37   93    3\n38   94    2\n39   96    1\n40   97    1\n\n\n\nplot(temps.df, xlab=\"Temp\", type=\"b\")"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "title": "NB: Control Structures and Functions",
    "section": "if/else Statements",
    "text": "if/else Statements\nYou’ve seen this in Python.\nThey work the same way in both languages.\nHere’s their syntax in R.\nif(<condition>) {\n        ## do something\n} \n\nif(<condition>) {\n        ## do something\n} \nelse {\n        ## do something else\n}\n\nif(<condition1>) {\n        ## do something\n} else if(<condition2>)  {\n        ## do something different\n} else {\n        ## do something different\n}\nGenerate a uniform random number:\n\nx <- runif(1, 0, 10) # From the Uniform Distribution\n\nif(x > 3) {\n  y <- 10\n} else {\n  y <- 0\n}\n\nx\n\n[1] 0.240206\n\ny\n\n[1] 0\n\n\nYou assign an if statement to a variable.\n\nz <- if(x > 3) {\n  10\n} else { \n  0\n}\n\nz\n\n[1] 0\n\n\nYou can stack if blocks, too.\nif(<condition1>) {\n\n}\n\nif(<condition2>) {\n\n}"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "title": "NB: Control Structures and Functions",
    "section": "Control Structures",
    "text": "Control Structures\n\nfor Loops\nFor loops are straight-forward. The take an interator variable, e.g. i, and assign it successive values from a sequence or vector.\nFor loops are often used to iteratE over the elements of an object (list, vector, etc.).\n\nfor(i in 1:10) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nAccording to Hadley Wickham, loops are pretty much the only looping construct that you will need in R.\nThe following three loops all have the same behavior.\n\nx <- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in 1:4) {\n  # Print out each element of 'x'\n  print(x[i])  \n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nseq_along()\nThe seq_along() function is commonly used in conjunction with for loops in order to generate an integer sequence based on the length of an object (in this case, the object x).\n\nx\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\n\nGenerate a sequence based on length of ‘x’:\n\nfor(i in seq_along(x)) {   \n  print(x[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nIt is not necessary to use an index-type variable.\n\nfor(letter in x) {\n  print(letter)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nFor one line loops, the curly braces are not strictly necessary.\n\nfor(i in 1:4) print(x[i])\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nNested for loops\nDor loops can be nested inside of each other.\n\nx <- matrix(1:6, 2, 3)\nfor(i in seq_len(nrow(x))) {\n  for(j in seq_len(ncol(x))) {\n    print(x[i, j])\n  }   \n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 2\n[1] 4\n[1] 6\n\n\nNested loops are used to generate multidimensional or hierarchical data structures (e.g. matrices, lists)."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "title": "NB: Control Structures and Functions",
    "section": "while Loops",
    "text": "while Loops\nAs with Python, while loops start with a condition. It loops while the condition is true and stops when it is false.\nRemembe, while loops can go on forever is the truth condition is never met.\n\ncount <- 0\nwhile(count < 10) {\n  print(count)\n  count <- count + 1\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "title": "NB: Control Structures and Functions",
    "section": "repeat Loops",
    "text": "repeat Loops\nrepeat loops are using by R. They initiate an infinite loop right from the start.\nThe only way to exit a repeat loop is to call break on an internal condition."
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "title": "NB: Control Structures and Functions",
    "section": "next and break",
    "text": "next and break\nnext is used to skip an iteration of a loop. Same as Python continue.\n\nfor (i in 1:100) {\n  if (i <= 20) {\n    # Skip the first 20 iterations\n    next                \n  }      # Do something here\n}\n\nbreak is used to exit a loop immediately.\n\nfor (i in 1:100) {\n  print(i)\n  if (i > 20) {\n    # Stop loop after 20 iterations\n    break  \n  }     \n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "title": "NB: Control Structures and Functions",
    "section": "Functions",
    "text": "Functions\nDefine some data\n\nx <- 5                \nxx <- c(4, 6, 7, 8, 2, 11)\n\nNow, define a function that does the following: - takes a value, vector of values as inputs - normalizes the value against the vector by subtracting the vector mean from value, and dividing by vector standard deviation.\n\ncompute_zscore <- function(val, vec) {\n  z <- (val - mean(vec)) / sd(vec)\n}\n\nprint(compute_zscore(x, xx))\n\n[1] -0.4244764\n\n\nIf vector contains identical values, sd is zero, and so the z-score is undefined.\n\nprint(compute_zscore(x, c(1, 1, 1, 1)))\n\n[1] Inf\n\n\nIf vector contains missing values, the result will be NA.\n\nxx_na <- c(1, NA, 3, 5) \nprint(compute_zscore(x, xx_na))\n\n[1] NA"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "title": "NB: Control Structures and Functions",
    "section": "Using conditions in functions",
    "text": "Using conditions in functions\nA function returns 1 if passed value is odd, 0 if even"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "title": "NB: Control Structures and Functions",
    "section": "%% is mod operator (returns remainder)",
    "text": "%% is mod operator (returns remainder)\n\nis_odd <- function(x){ if (x %% 2 == 1) { \n    return(1) \n  } else { \n    return(0)\n  } \n}\n\nCall to test some cases:\n\nis_odd(4)\n\n[1] 0\n\nis_odd(3)\n\n[1] 1\n\n\nFunction arguments can use default values:\n\nthreshold_vals <- function(p, thresh = 0.5) {\n  # for each element in p, returns TRUE if value > thresh, else FALSE\n  p > thresh\n}\n\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1))\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\nNow, pass a threshhold:\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1), 0.7)\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nAssert important preconditions\n\nadd_vectors <- function(x, y) {\n  # assert the lengths of vectors x and y match\n  # if they do, sum elementwise, else throw error with stop()\n\n  if (length(x) != length(y)) {\n    stop(\"x and y must be the same length\", call. = FALSE)\n  }\n  x + y\n}\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3))\n\n[1] 4 5 6\n\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks"
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "title": "NB: Control Structures and Functions",
    "section": "Scoping Rules",
    "text": "Scoping Rules\n\nz <- 4\ntest_fcn <- function(x) {\n  x^z\n}\n\nNow look at this:\n\ntest_fcn(2)\n\n[1] 16\n\n\nIf z isn’t defined in the function, how does this work?\nR’s scoping rules are similar to Python’s.\nSince z isn’t in the function, R looks in the function’s environment for it.\nFor more on scoping rules, see Chapter 15: Scoping Rules of R in Peng’s R Programming For Data Science."
  },
  {
    "objectID": "modules/m11/m11-intro.html#topics",
    "href": "modules/m11/m11-intro.html#topics",
    "title": "M11 Dplyr",
    "section": "Topics",
    "text": "Topics\n\nThe Tidyverse\nTibbles, a ligthweight version of data frames\nData transformations using dplyr verbs"
  },
  {
    "objectID": "modules/m11/m11-intro.html#readings",
    "href": "modules/m11/m11-intro.html#readings",
    "title": "M11 Dplyr",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nRFDS Explore 5 Data Transformation (dplyr)\n\n\nRDFS Wrangle 10 Tibbles\n\n\nRDFS Wrangle 11 Data Import\n\n\nRDFS Wrangle 12 Tidy data\n\n\n\n\nOptional\n\n\nPeng, 2022, “Managing Data Frames with the dplyr package”"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-00-Addenda.html#static-weirdness-explained",
    "href": "notebooks/M11_RDplyr/M11-00-Addenda.html#static-weirdness-explained",
    "title": "NB: Errata and Addenda",
    "section": "Static Weirdness Explained",
    "text": "Static Weirdness Explained\n\nclass Foo():\n    \n    my_list = []    # Lists are mutable\n    my_int = 1      # Integers are not\n    my_tuple = ()   # Tuples are not\n    \n    def mutate_things(self):\n        self.my_list.append(1) # MUTATING THE OBJECT DEFINE AT THE CLASS LEVEL\n        self.my_int = 2\n        self.my_tuple = (1,3)\n                \n    def change_things(self):\n        self.my_list = [1] # REMOVING THE CONNECTION TO THE CLASS LEVEL\n        self.my_int = 2\n        self.my_tuple = (1,3)\n        \n        # If you mutate a mutable, then it will change\n\n\ndef foo_state(foo): \n    global Foo\n    print(\"Class state:\", Foo.my_list, Foo.my_int, Foo.my_tuple)\n    print(\"Object state:\", foo.my_list, foo.my_int, foo.my_tuple)\n\n\nfoo1 = Foo()\n\n\nfoo1.mutate_things()\n\n\nfoo_state(foo1)\n\nClass state: [1] 1 ()\nObject state: [1] 2 (1, 3)\n\n\n\nfoo1.change_things()\n\n\nfoo_state(foo1)\n\nClass state: [1] 1 ()\nObject state: [1] 2 (1, 3)"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-00-Addenda.html#narrow-vs-wide-tables",
    "href": "notebooks/M11_RDplyr/M11-00-Addenda.html#narrow-vs-wide-tables",
    "title": "NB: Errata and Addenda",
    "section": "Narrow vs Wide Tables",
    "text": "Narrow vs Wide Tables\n\nimport pandas as pd\n\n\npets = pd.Series(\"cat dog ferret snake turtle parraot\".split()).sample(1000, replace=True).to_list()\npeople = pd.Series(\"A B C D E F G\".split()).sample(1000, replace=True).to_list()   \nNARROW = pd.DataFrame(dict(pet=pets, owner=people)).groupby(['owner', 'pet']).pet.count().to_frame('n')\n\nThis is a narrow table.\nIt has few columns and many rows.\nColumns are types of things, and values in rows are either instances or subtypes.\n\nNARROW\n\n\n\n\n\n  \n    \n      \n      \n      n\n    \n    \n      owner\n      pet\n      \n    \n  \n  \n    \n      A\n      cat\n      31\n    \n    \n      dog\n      26\n    \n    \n      ferret\n      19\n    \n    \n      parraot\n      18\n    \n    \n      snake\n      24\n    \n    \n      turtle\n      26\n    \n    \n      B\n      cat\n      29\n    \n    \n      dog\n      23\n    \n    \n      ferret\n      31\n    \n    \n      parraot\n      24\n    \n    \n      snake\n      29\n    \n    \n      turtle\n      22\n    \n    \n      C\n      cat\n      21\n    \n    \n      dog\n      22\n    \n    \n      ferret\n      19\n    \n    \n      parraot\n      23\n    \n    \n      snake\n      25\n    \n    \n      turtle\n      25\n    \n    \n      D\n      cat\n      17\n    \n    \n      dog\n      15\n    \n    \n      ferret\n      15\n    \n    \n      parraot\n      22\n    \n    \n      snake\n      20\n    \n    \n      turtle\n      28\n    \n    \n      E\n      cat\n      20\n    \n    \n      dog\n      30\n    \n    \n      ferret\n      21\n    \n    \n      parraot\n      25\n    \n    \n      snake\n      16\n    \n    \n      turtle\n      26\n    \n    \n      F\n      cat\n      22\n    \n    \n      dog\n      28\n    \n    \n      ferret\n      32\n    \n    \n      parraot\n      24\n    \n    \n      snake\n      25\n    \n    \n      turtle\n      26\n    \n    \n      G\n      cat\n      23\n    \n    \n      dog\n      19\n    \n    \n      ferret\n      20\n    \n    \n      parraot\n      28\n    \n    \n      snake\n      35\n    \n    \n      turtle\n      26\n    \n  \n\n\n\n\n\nWIDE = NARROW.n.unstack()\n\nThis is a wide table.\nOne column’s values are projected onto the feature space (as columns).\nThe othe column becomes a unique list (as is the feature space).\n\nWIDE\n\n\n\n\n\n  \n    \n      pet\n      cat\n      dog\n      ferret\n      parraot\n      snake\n      turtle\n    \n    \n      owner\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      A\n      31\n      26\n      19\n      18\n      24\n      26\n    \n    \n      B\n      29\n      23\n      31\n      24\n      29\n      22\n    \n    \n      C\n      21\n      22\n      19\n      23\n      25\n      25\n    \n    \n      D\n      17\n      15\n      15\n      22\n      20\n      28\n    \n    \n      E\n      20\n      30\n      21\n      25\n      16\n      26\n    \n    \n      F\n      22\n      28\n      32\n      24\n      25\n      26\n    \n    \n      G\n      23\n      19\n      20\n      28\n      35\n      26\n    \n  \n\n\n\n\nNarrow columns are more manageable by databases.\nWide columns are more usable for analysis.\nYou can do these things with narrow tables using .group_by()\n\nA = WIDE / WIDE.sum()\n\n\nB = WIDE.T / WIDE.T.sum()\n\n\nA\n\n\n\n\n\n  \n    \n      pet\n      cat\n      dog\n      ferret\n      parraot\n      snake\n      turtle\n    \n    \n      owner\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      A\n      0.190184\n      0.159509\n      0.121019\n      0.109756\n      0.137931\n      0.145251\n    \n    \n      B\n      0.177914\n      0.141104\n      0.197452\n      0.146341\n      0.166667\n      0.122905\n    \n    \n      C\n      0.128834\n      0.134969\n      0.121019\n      0.140244\n      0.143678\n      0.139665\n    \n    \n      D\n      0.104294\n      0.092025\n      0.095541\n      0.134146\n      0.114943\n      0.156425\n    \n    \n      E\n      0.122699\n      0.184049\n      0.133758\n      0.152439\n      0.091954\n      0.145251\n    \n    \n      F\n      0.134969\n      0.171779\n      0.203822\n      0.146341\n      0.143678\n      0.145251\n    \n    \n      G\n      0.141104\n      0.116564\n      0.127389\n      0.170732\n      0.201149\n      0.145251\n    \n  \n\n\n\n\n\nB\n\n\n\n\n\n  \n    \n      owner\n      A\n      B\n      C\n      D\n      E\n      F\n      G\n    \n    \n      pet\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      cat\n      0.184211\n      0.167883\n      0.169643\n      0.152778\n      0.192308\n      0.177215\n      0.198582\n    \n    \n      dog\n      0.157895\n      0.182482\n      0.187500\n      0.159722\n      0.224359\n      0.151899\n      0.212766\n    \n    \n      ferret\n      0.177632\n      0.124088\n      0.133929\n      0.152778\n      0.147436\n      0.126582\n      0.113475\n    \n    \n      parraot\n      0.217105\n      0.167883\n      0.169643\n      0.166667\n      0.153846\n      0.234177\n      0.163121\n    \n    \n      snake\n      0.131579\n      0.167883\n      0.196429\n      0.194444\n      0.102564\n      0.170886\n      0.127660\n    \n    \n      turtle\n      0.131579\n      0.189781\n      0.142857\n      0.173611\n      0.179487\n      0.139241\n      0.184397\n    \n  \n\n\n\n\n\nA.sum()\n\npet\ncat        1.0\ndog        1.0\nferret     1.0\nparraot    1.0\nsnake      1.0\nturtle     1.0\ndtype: float64\n\n\n\nB.sum()\n\nowner\nA    1.0\nB    1.0\nC    1.0\nD    1.0\nE    1.0\nF    1.0\nG    1.0\ndtype: float64"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "title": "NB: Introducing Tibbles",
    "section": "",
    "text": "Tibbles\nDplyr can work with different rectangular data structures:\nThe foundational data structure of the TV is the tibble.\nTibbles are data frames, but they tweak some older behaviors to make your life a little easier.\nTo learn more about tibbles, check out the vignette:\nThere are two main differences in the usage of a tibble vs. a classic dat frame:\nIf these difference cause problems when working with older packages, you can turn a tibble back to a regular data frame with as.data.frame()."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#the-tidyverse",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#the-tidyverse",
    "title": "NB: Introducing Tibbles",
    "section": "The Tidyverse",
    "text": "The Tidyverse\nTidyverse is a collection of essential R packages for data science.\nThe packages included in the Tidyverse are designed to support the pipeline of activities associated with data science, such as filtering, transforming, visualizing, etc.\n\nTidyverse was created by Hadley Wickham and his team with the aim of providing all these utilities to clean and work with data.\nHere’s a graphic of the packages associated with the TV:\n\nWe are going to focus on dplyr today and ggplot tomorrow."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "title": "NB: Introducing Tibbles",
    "section": "Dplyr",
    "text": "Dplyr\nDplyr introduces new set of functions that make working with data more intuitive.\n\nIt does this by introducing a set of functions that work together well to produce pipelines of actions.\n\nBut as important, it introduces a vocabulary for talking about data.\n\nThis makes it possible to imagine solutions verbally, and then to implement them in code.\n\nTo use the TV, we usually import everything:\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.5     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.1\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "title": "NB: Introducing Tibbles",
    "section": "Piping with %>%",
    "text": "Piping with %>%\nJust a quick note about this odd looking operator that you will start to see.\nOne of the key elements of the TV is the use of piping, or the ability of to pass the return values of one function to another, with without have to nest functions.\nFor example, instead of something like this:\n\na <- \"Hello\"\nb <- \"World\"\n\nvar1 <- c(a, b)\nvar2 <- paste(var1)\nprint(var2)\n\n[1] \"Hello\" \"World\"\n\n\nOr this:\n\nprint(paste(c(a,b)))\n\n[1] \"Hello\" \"World\"\n\n\nWe can do:\n\nc(a, b) %>%\n  paste() %>%\n  print()\n\n[1] \"Hello\" \"World\"\n\n\nAlthough the last pattern is longer than the preceding, it is much easier to read and write, especially when we are working with several connected functions.\nThis is similar to method chaining in Python, but is more pervasive.\n\nIn Python you can do it with individual objects that return themselves (as it were).\nIn TV, you can apply it to any two methods so long as it makes sense to pass the output of as the input of another.\nBasically, the output of one function becomes the first argument of the following the %>%.\n\nIt is similar to the pipe operator | in Unix shells."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "title": "NB: Introducing Tibbles",
    "section": "Creating tibbles",
    "text": "Creating tibbles\nIf you need to make a tibble “by hand”, you can use tibble() or tribble().\ntibble() works by assembling individual vectors, column-wise operation:\n\nx <- c(1, 2, 5)\ny <- c(\"a\", \"b\", \"h\")\ntibble(x, y)\n\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     5 h    \n\n\nYou can also optionally name the inputs, provide data inline with c(), and perform computation:\n\ntibble(\n  x1 = x,\n  x2 = c(10, 15, 25),\n  y = sqrt(x1^2 + x2^2)\n)\n\n# A tibble: 3 × 3\n     x1    x2     y\n  <dbl> <dbl> <dbl>\n1     1    10  10.0\n2     2    15  15.1\n3     5    25  25.5\n\n\nEvery column in a data frame or tibble must be same length, so you’ll get an error if the lengths are different:\nAs the error suggests, individual values will be recycled to the same length as everything else:\n\ntibble(\n  x = 1:5,\n  y = \"a\",\n  z = TRUE\n)\n\n# A tibble: 5 × 3\n      x y     z    \n  <int> <chr> <lgl>\n1     1 a     TRUE \n2     2 a     TRUE \n3     3 a     TRUE \n4     4 a     TRUE \n5     5 a     TRUE"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "title": "NB: Introducing Tibbles",
    "section": "Tribbles",
    "text": "Tribbles\nAnother way to create a tibble is with tribble(), which short for transposed tibble.\ntribble() is customized for data entry in code: column headings start with ~ and entries are separated by commas.\nThis makes it possible to lay out small amounts of data in an easy to read form:\n\ntribble(\n  ~x, ~y, ~z,\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)\n\n# A tibble: 2 × 3\n  x         y     z\n  <chr> <dbl> <dbl>\n1 a         2   3.6\n2 b         1   8.5\n\n\nFinally, if you have a regular data frame you can turn it into to a tibble with as_tibble():\n\nas_tibble(mtcars)\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nThe inverse of as_tibble() is as.data.frame(); it converts a tibble back into a regular data.frame."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "title": "NB: Introducing Tibbles",
    "section": "Non-syntactic names",
    "text": "Non-syntactic names\nIt’s possible for a tibble to have column names that are not valid R variable names, names that are non-syntactic.\nFor example, the variables might not start with a letter or they might contain unusual characters like a space.\nTo refer to these variables, you need to surround them with backticks, `:\n\ntb <- tibble(\n  `:)` = \"smile\", \n  ` ` = \"space\",\n  `2000` = \"number\"\n)\ntb\n\n# A tibble: 1 × 3\n  `:)`  ` `   `2000`\n  <chr> <chr> <chr> \n1 smile space number\n\n\nYou’ll also need the backticks when working with these variables in other packages, like ggplot2, dplyr, and tidyr."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "title": "NB: Introducing Tibbles",
    "section": "Printing",
    "text": "Printing\nThe print method:\n\nOnly the first 10 rows\nAll the columns that fit on screen.\n\nThis makes it much easier to work with large data.\n\ntibble(\n  a = lubridate::now() + runif(1e3) * 86400,\n  b = lubridate::today() + runif(1e3) * 30,\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n\n# A tibble: 1,000 × 5\n   a                   b              c      d e    \n   <dttm>              <date>     <int>  <dbl> <chr>\n 1 2023-06-20 06:50:09 2023-07-02     1 0.982  h    \n 2 2023-06-19 18:33:21 2023-07-13     2 0.0423 l    \n 3 2023-06-20 09:58:44 2023-07-17     3 0.0382 z    \n 4 2023-06-19 23:13:12 2023-07-14     4 0.430  w    \n 5 2023-06-20 09:40:44 2023-07-17     5 0.0412 h    \n 6 2023-06-19 14:02:25 2023-07-08     6 0.474  n    \n 7 2023-06-20 04:24:14 2023-06-19     7 0.425  i    \n 8 2023-06-19 14:26:35 2023-07-02     8 0.125  y    \n 9 2023-06-19 11:28:08 2023-07-07     9 0.877  q    \n10 2023-06-19 10:32:34 2023-07-18    10 0.191  d    \n# ℹ 990 more rows\n\n\nWhere possible, tibbles also use color to draw your eye to important differences.\nOne of the most important distinctions is between the string \"NA\" and the missing value, NA:\n\ntibble(x = c(\"NA\", NA))\n\n# A tibble: 2 × 1\n  x    \n  <chr>\n1 NA   \n2 <NA> \n\n\nTibbles are designed to avoid overwhelming your console when you print large data frames.\nBut sometimes you need more output than the default display.\nThere are a few options that can help.\nFirst, you can explicitly print() the data frame and control the number of rows (n) and the width of the display. width = Inf will display all columns:\n\nlibrary(nycflights13)\nflights %>%\n  print(n = 10, width = Inf)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n   arr_delay carrier flight tailnum origin dest  air_time distance  hour minute\n       <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>\n 1        11 UA        1545 N14228  EWR    IAH        227     1400     5     15\n 2        20 UA        1714 N24211  LGA    IAH        227     1416     5     29\n 3        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n 4       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45\n 5       -25 DL         461 N668DN  LGA    ATL        116      762     6      0\n 6        12 UA        1696 N39463  EWR    ORD        150      719     5     58\n 7        19 B6         507 N516JB  EWR    FLL        158     1065     6      0\n 8       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0\n 9        -8 B6          79 N593JB  JFK    MCO        140      944     6      0\n10         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0\n   time_hour          \n   <dttm>             \n 1 2013-01-01 05:00:00\n 2 2013-01-01 05:00:00\n 3 2013-01-01 05:00:00\n 4 2013-01-01 05:00:00\n 5 2013-01-01 06:00:00\n 6 2013-01-01 05:00:00\n 7 2013-01-01 06:00:00\n 8 2013-01-01 06:00:00\n 9 2013-01-01 06:00:00\n10 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\nYou can also control the default print behavior by setting options:\n\noptions(tibble.print_max = n, tibble.print_min = m): if more than n rows, print only m rows.\nUse options(tibble.print_min = Inf) to always show all rows.\nUse options(tibble.width = Inf) to always print all columns, regardless of the width of the screen.\n\nYou can see a complete list of options by looking at the package help with package?tibble."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-view",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-view",
    "title": "NB: Introducing Tibbles",
    "section": "Using View()",
    "text": "Using View()\nA final option is to use RStudio’s built-in data viewer to get a scrollable view of the complete dataset. This is also often useful at the end of a long chain of manipulations.\n\nflights %>%\n  View()"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "title": "NB: Introducing Tibbles",
    "section": "Extracting variables",
    "text": "Extracting variables\nSo far all the tools you’ve learned have worked with complete data frames.\nIf you want to pull out a single variable, you can use dplyr::pull():\n\ntb <- tibble(\n  id = LETTERS[1:5],\n  x1  = 1:5,\n  y1  = 6:10\n)\n\n\ntb %>%  \n  pull(x1) # by name\n\n[1] 1 2 3 4 5\n\n\n\ntb %>%  \n  pull(1)  # by position\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\npull() also takes an optional name argument that specifies the column to be used as names for a named vector, which you’ll learn about in ?sec-vectors.\n\ntb %>%  \n  pull(x1, name = id)\n\nA B C D E \n1 2 3 4 5 \n\n\nYou can also use the base R tools $ and [[. [[ can extract by name or position; $ only extracts by name but is a little less typing.\nExtract by name:\n\ntb$x1\n\n[1] 1 2 3 4 5\n\ntb[[\"x1\"]]\n\n[1] 1 2 3 4 5\n\n\nExtract by position:\n\ntb[[1]]\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\nCompared to a data frame, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.\n\n# Tibbles complain a lot:\ntb$x\n\nWarning: Unknown or uninitialised column: `x`.\n\n\nNULL\n\ntb$z\n\nWarning: Unknown or uninitialised column: `z`.\n\n\nNULL\n\n\n\n# Data frame use partial matching and don't complain if a column doesn't exist\ndf <- as.data.frame(tb)\ndf$x\n\n[1] 1 2 3 4 5\n\ndf$z\n\nNULL\n\n\nFor this reason we sometimes joke that tibbles are lazy and surly: they do less and complain more."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "title": "NB: Introducing Tibbles",
    "section": "Subsetting",
    "text": "Subsetting\nLastly, there are some important differences when using [.\nWith data.frames, [ sometimes returns a data.frame, and sometimes returns a vector.\n\nThis is a common source of bugs.\n\nWith tibbles, [ always returns another tibble.\n\nThis can sometimes cause problems when working with older code.\nIf you hit one of those functions, just use as.data.frame() to turn your tibble back to a data.frame."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "title": "NB: The dplyr package",
    "section": "",
    "text": "select()\nWe use the select() function to select columns you want to focus on.\nSuppose we wanted to take the first 3 columns only.\nThere are a few ways to do this.\nWe could for example use numerical indices.\nBut we can also use the names directly.\nNote the use of : inside the select() — you can use it to specify a range of variable names.\nYou can also omit variables using the select() function by using the negative sign. With select() you can do\nThis indicates that we should include every variable except the variables city through dptp.\nThe equivalent code in base R would be\nNot super intuitive, right?\nThe select() function also allows a special syntax that allows you to specify variable names based on patterns.\nSo, for example, if you wanted to keep every variable that ends with a “2”, we could do\nOr if we wanted to keep every variable that starts with a “d”, we could do\nThis is super useful if you have a table with prefixes, such as doc_.\nYou can also use more general regular expressions if necessary.\nSee ?select for more info.\nThe filter() function extracts subsets of rows from a data frame.\nThis function is similar to the existing subset() function in R but is quite a bit faster.\nSuppose we wanted to extract the rows of the chicago data frame where the levels of PM2.5 are greater than 30 (which is a reasonably high level), we could do\nYou can see that there are now only 194 rows in the data frame and the distribution of the pm25tmean2 values is.\nWe can place an arbitrarily complex logical sequence inside of filter(), so we could for example extract the rows where PM2.5 is greater than 30 and temperature is greater than 80 degrees Fahrenheit.\nUse arrange() to reorder rows of a data frame according to one or more of the columns.\nReordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R.\nThe arrange() function simplifies the process quite a bit.\nHere we order the rows of the data frame by date in ascending order:\nWe can now check the first few rows\nand the last few rows.\nColumns can be arranged in descending order too by using the special desc() operator.\nRenaming a variable in a data frame in R is surprisingly hard to do!\nThe rename() function is designed to make this process easier.\nHere we the names of the first five variables in the chicago data frame.\nThe dptp column is supposed to represent the dew point temperature and the pm25tmean2 column provides the PM2.5 data.\nHowever, these names are awkward and should be renamed to something more sensible.\nThe syntax inside the rename() function is to have the new name on the left-hand side of the = sign and the old name on the right-hand side.\nI leave it as an exercise for the reader to figure how you do this in base R without dplyr.\nThe mutate() function creates new columns based on computations usually involving the other columns.\nFor example, with air pollution data, we often want to detrend the data by subtracting the mean from the data.\nThat way we can look at whether a given day’s air pollution level is higher than or less than average (as opposed to looking at its absolute level).\nHere we create a pm25detrend variable that subtracts the mean from the pm25 variable.\nThere is also the related transmute() function, which does the same thing as mutate() but then drops all non-transformed variables.\nHere we detrend the PM10 and ozone (O3) variables.\nNote that there are only two columns in the transmuted data frame.\nThe group_by() function is used to generate summary or aggregate statistics from a data frame.\nFor example, in this air pollution dataset, you might want to know the average annual level of PM2.5.\nSo the stratum is the year, which we can derive from the date variable.\nIn conjunction with the group_by() function we often use the summarize() function. > Or summarise() for some parts of the world.\nThe general operation here is a combination of splitting a tabel into separate pieces defined by a variable or group of variables (group_by()), and then applying a summary function across those subsets (summarize()), then combining back into another table.\nFirst, we can create a year variable using as.POSIXlt().\nNow we can create a that computes summary statistics for each year in the data frame with the summarize() function.\nNote in the process, we implicitly created separate data frame that splits the original data frame by year, which is then passed to summarize().\nsummarize() then returns a data frame with columns for year and the annual averages of pm25, o3, and no2.\nIn a slightly more complicated example, we might want to know what are the average levels of ozone (o3) and nitrogen dioxide (no2) within quintiles of pm25.\nA slicker way to do this would be through a regression model, but we can actually do this quickly with group_by() and summarize().\nFirst, we can create a categorical variable of pm25 divided into quantiles.\nThen can group the data frame by the pm25.quint variable. and compute the mean of o3 and no2 within quantiles of pm25.\nFrom the table, it seems there isn’t a strong relationship between pm25 and o3, but there appears to be a positive correlation between pm25 and no2.\nMore sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of dplyr functions can often get you most of the way there.\nHere is another example:\nThe dplyr package provides a concise set of operations for managing data frames and tibbles.\nIt allows us to perform a number of complex operations in just a few lines of code.\nIn particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of group_by() and summarize().\nOnce you learn the dplyr grammar there are a few additional benefits - dplyr can work with other data frame “back ends” such as SQL databases. There is an SQL interface for relational databases via the DBI package - dplyr can be integrated with the data.table package for large fast tables\nThe dplyr package is handy way to both simplify and speed up your data frame management code. It’s rare that you get such a combination at the same time!"
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "title": "NB: The dplyr package",
    "section": "dplyr Grammar",
    "text": "dplyr Grammar\nSome of the key “verbs” provided by the dplyr package are\n\nselect: return a subset of the columns of a data frame, using a flexible notation\nfilter: extract a subset of rows from a data frame based on logical conditions\narrange: reorder rows of a data frame\nrename: rename variables in a data frame\nmutate: add new variables/columns or transform existing variables\nsummarise / summarize: generate summary statistics of different variables in the data frame, possibly within strata\n%>%: the “pipe” operator is used to connect multiple verb actions together into a pipeline\n\nThe dplyr package as a number of its own data types that it takes advantage of. For example, there is a handy print method that prevents you from printing a lot of data to the console. Most of the time, these additional data types are transparent to the user and do not need to be worried about."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "title": "NB: The dplyr package",
    "section": "Common dplyr Function Properties",
    "text": "Common dplyr Function Properties\nAll of the functions that we will discuss in this Chapter will have a few common characteristics. In particular,\n\nThe first argument is a data frame.\nThe subsequent arguments describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly without using the $ operator (just use the column names).\nThe return result of a function is a new data frame.\nData frames must be properly formatted and annotated for this to all be useful. In particular, the data must be tidy. In short, there should be one observation per row, and each column should represent a feature or characteristic of that observation."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "title": "NB: The dplyr package",
    "section": "Installing the dplyr package",
    "text": "Installing the dplyr package\nThe dplyr package can be installed from CRAN or from GitHub using the devtools package and the install_github() function. The GitHub repository will usually contain the latest updates to the package and the development version.\nTo install from CRAN, just run\n\ninstall.packages(\"dplyr\")\n\nTo install from GitHub you can run\n\ninstall_github(\"hadley/dplyr\")\n\nAfter installing the package it is important that you load it into your R session with the library() function.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nYou may get some warnings when the package is loaded because there are functions in the dplyr package that have the same name as functions in other packages. For now you can ignore the warnings."
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "title": "NB: The dplyr package",
    "section": "Getting a dataset",
    "text": "Getting a dataset\nLet’s use a dataset containing air pollution and temperature data for the city of Chicago in the U.S.\n\nYou will find the data in the directory for this module.\n\nLoad the data into R using the readRDS() function.\n\nchicago <- readRDS(\"chicago.rds\")\n\nYou can see some basic characteristics of the dataset with the dim() and str() functions.\n\ndim(chicago)\n\n[1] 6940    8\n\n\n\nstr(chicago)\n\n'data.frame':   6940 obs. of  8 variables:\n $ city      : chr  \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date, format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num  34 NA 34.2 47 NA ...\n $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...\n\n\n\nchicago\n\n     city  tmpd      dptp       date pm25tmean2 pm10tmean2   o3tmean2 no2tmean2\n1    chic  31.5  31.50000 1987-01-01         NA  34.000000  4.2500000 19.988095\n2    chic  33.0  29.87500 1987-01-02         NA         NA  3.3043478 23.190994\n3    chic  33.0  27.37500 1987-01-03         NA  34.166667  3.3333333 23.815476\n4    chic  29.0  28.62500 1987-01-04         NA  47.000000  4.3750000 30.434524\n5    chic  32.0  28.87500 1987-01-05         NA         NA  4.7500000 30.333333\n6    chic  40.0  35.12500 1987-01-06         NA  48.000000  5.8333333 25.772331\n7    chic  34.5  26.75000 1987-01-07         NA  41.000000  9.2916667 20.581710\n8    chic  29.0  22.00000 1987-01-08         NA  36.000000 11.2916667 17.037231\n9    chic  26.5  29.00000 1987-01-09         NA  33.285714  4.5000000 23.388889\n10   chic  32.5  27.75000 1987-01-10         NA         NA  4.9583333 19.541667\n11   chic  29.5  20.12500 1987-01-11         NA  22.000000 17.5416667 13.701389\n12   chic  34.5  26.00000 1987-01-12         NA  26.000000  8.0000000 33.020833\n13   chic  34.0  32.25000 1987-01-13         NA  53.000000  4.9583333 38.061418\n14   chic  37.5  36.37500 1987-01-14         NA  43.000000  4.2083333 32.194444\n15   chic  32.5  24.25000 1987-01-15         NA  28.833333  4.4583333 18.871310\n16   chic  25.0  21.50000 1987-01-16         NA  19.000000  7.9166667 19.466667\n17   chic  27.0  24.75000 1987-01-17         NA         NA  5.8333333 20.708333\n18   chic  17.5  11.12500 1987-01-18         NA  39.000000  6.3750000 21.033333\n19   chic  23.0  15.75000 1987-01-19         NA  32.000000 14.8750000 17.174094\n20   chic  20.5  11.50000 1987-01-20         NA  38.000000  7.2500000 21.610211\n21   chic  22.0  20.62500 1987-01-21         NA  32.857143  8.9130435 24.520833\n22   chic  19.5   7.37500 1987-01-22         NA  52.000000 10.5000000 16.987978\n23   chic   2.5 -12.25000 1987-01-23         NA  55.000000 14.6250000 14.662500\n24   chic   2.0  -5.62500 1987-01-24         NA  38.000000 10.0833333 18.691667\n25   chic   9.5  -5.25000 1987-01-25         NA         NA  6.6666667 26.304167\n26   chic  16.0   4.75000 1987-01-26         NA  71.000000  4.5833333 32.421429\n27   chic  17.5  17.75000 1987-01-27         NA  39.333333  6.0000000 30.693056\n28   chic  29.5  18.25000 1987-01-28         NA  47.000000  6.8750000 29.129428\n29   chic  29.5  32.87500 1987-01-29         NA  35.000000  2.9166667 28.145290\n30   chic  32.5  24.12500 1987-01-30         NA  59.000000  8.7916667 19.798611\n31   chic  27.5  26.50000 1987-01-31         NA  36.000000 10.3750000 25.267361\n32   chic  41.0  32.25000 1987-02-01         NA         NA  8.0416667 21.701389\n33   chic  36.5  34.00000 1987-02-02         NA  41.166667  6.0416667 30.784722\n34   chic  34.0  26.25000 1987-02-03         NA  59.000000  8.0416667 20.146149\n35   chic  31.5  24.25000 1987-02-04         NA  37.000000 10.5000000 29.999275\n36   chic  29.5  27.25000 1987-02-05         NA  70.000000  5.7291667 38.909091\n37   chic  37.0  30.37500 1987-02-06         NA  63.000000  6.4148551 27.994709\n38   chic  40.5  35.75000 1987-02-07         NA  44.000000  5.7500000 25.090278\n39   chic  32.5   3.50000 1987-02-08         NA  18.250000 24.9375000 10.646825\n40   chic  24.5  17.37500 1987-02-09         NA  42.000000  9.2083333 25.579861\n41   chic  35.0  27.37500 1987-02-10         NA  36.000000  8.3125000 31.327459\n42   chic  39.5  29.37500 1987-02-11         NA  83.000000  8.1215415 42.001125\n43   chic  34.0  24.75000 1987-02-12         NA  84.000000  7.6875000 34.993056\n44   chic  34.5  30.87500 1987-02-13         NA  39.000000 10.3695652 33.430857\n45   chic  31.5  22.00000 1987-02-14         NA  24.857143 11.1666667 21.243056\n46   chic  23.5  10.12500 1987-02-15         NA  12.000000 28.1041667 10.490972\n47   chic  24.0  18.12500 1987-02-16         NA  14.000000 24.1875000 15.854167\n48   chic  31.5  20.25000 1987-02-17         NA  23.000000 24.9375000 19.180556\n49   chic  31.5  20.00000 1987-02-18         NA  27.000000 24.1702899 29.860119\n50   chic  34.0  19.62500 1987-02-19         NA  49.000000 15.5018116 44.480676\n51   chic  32.5  17.00000 1987-02-20         NA  69.857143  8.5000000 51.253247\n52   chic  38.0  24.50000 1987-02-21         NA  59.000000  4.5833333 41.381944\n53   chic  35.5  25.12500 1987-02-22         NA  46.000000 10.8333333 21.861111\n54   chic  35.5  24.75000 1987-02-23         NA  47.000000 13.0416667 32.562500\n55   chic  31.5  25.25000 1987-02-24         NA  48.000000 13.2291667 36.477437\n56   chic  34.5  21.87500 1987-02-25         NA  48.000000 17.1250000 38.137716\n57   chic  36.0  18.50000 1987-02-26         NA  29.000000 16.0000000 32.854167\n58   chic  39.5  28.25000 1987-02-27         NA  56.000000 14.2083333 33.691964\n59   chic  40.0  38.37500 1987-02-28         NA  31.000000  6.8750000 23.458333\n60   chic  39.0  28.37500 1987-03-01         NA  15.000000 15.6208333 18.614583\n61   chic  41.0  27.87500 1987-03-02         NA  36.000000 20.8125000 21.631944\n62   chic  36.5  14.87500 1987-03-03         NA  32.000000 19.7500000 28.578208\n63   chic  38.0  26.75000 1987-03-04         NA  39.428571  5.5000000 38.409722\n64   chic  44.0  34.37500 1987-03-05         NA  30.000000 13.5833333 29.388889\n65   chic  48.5  39.50000 1987-03-06         NA  76.000000  9.0760870 47.169988\n66   chic  59.5  36.87500 1987-03-07         NA  49.000000 25.4166667 41.743056\n67   chic  54.5  33.62500 1987-03-08         NA  61.000000 31.1666667 39.045139\n68   chic  31.0  14.00000 1987-03-09         NA  25.000000 29.8333333 12.469381\n69   chic  25.5  13.62500 1987-03-10         NA  19.571429 28.3750000 19.747163\n70   chic  28.5  17.00000 1987-03-11         NA  38.000000 19.7708333 29.906099\n71   chic  33.5  22.37500 1987-03-12         NA  72.000000 20.4375000 41.127525\n72   chic  34.0  33.12500 1987-03-13         NA  47.000000 22.4791667 31.555556\n73   chic  37.0  33.00000 1987-03-14         NA  49.000000 17.7291667 27.652778\n74   chic  35.0  24.50000 1987-03-15         NA         NA 36.8958333 18.034722\n75   chic  37.5  17.87500 1987-03-16         NA  27.000000 36.3722826 22.423611\n76   chic  38.5  19.37500 1987-03-17         NA  55.000000 27.8125000 25.986111\n77   chic  39.5  30.25000 1987-03-18         NA  63.000000 18.6666667 32.207799\n78   chic  41.5  26.12500 1987-03-19         NA  32.000000 31.6755952 33.296014\n79   chic  43.0  16.62500 1987-03-20         NA  28.000000 36.6250000 45.958333\n80   chic  43.5  22.50000 1987-03-21         NA  40.000000 38.2083333 43.903080\n81   chic  48.0  32.37500 1987-03-22         NA  37.857143 37.6666667 36.239583\n82   chic  53.5  35.25000 1987-03-23         NA  70.000000 31.4541667 33.738647\n83   chic  57.5  46.12500 1987-03-24         NA  58.000000 25.6250000 30.555556\n84   chic  45.0  40.12500 1987-03-25         NA  14.000000 14.8750000 23.204545\n85   chic  45.0  40.25000 1987-03-26         NA  43.000000 15.1174242 23.493687\n86   chic  43.0  38.50000 1987-03-27         NA  47.000000 16.4375000 32.315025\n87   chic  46.0  35.00000 1987-03-28         NA  34.500000 20.1041667 31.180556\n88   chic  39.5  30.12500 1987-03-29         NA  37.000000 20.9722222 22.340278\n89   chic  29.0  12.87500 1987-03-30         NA  27.000000 30.4375000 19.655676\n90   chic  30.0  19.00000 1987-03-31         NA  43.000000 24.0448718 24.611111\n91   chic  41.5  22.87500 1987-04-01         NA  36.000000 21.4531250 19.298611\n92   chic  29.5  14.62500 1987-04-02         NA  44.000000 22.5663496 22.036534\n93   chic  28.0  17.37500 1987-04-03         NA  22.428571 16.8697917 35.481433\n94   chic  35.5  17.12500 1987-04-04         NA  26.000000 28.3906250 21.281250\n95   chic  43.5  33.00000 1987-04-05         NA  18.000000 36.0312500 12.190972\n96   chic  50.0  21.25000 1987-04-06         NA  19.000000 31.8020833 19.855745\n97   chic  49.5  30.87500 1987-04-07         NA  28.000000 25.4947917 28.246212\n98   chic  40.0  31.37500 1987-04-08         NA  19.000000 21.0104167 28.991244\n99   chic  50.0  28.50000 1987-04-09         NA  78.285714 15.4010417 57.525423\n100  chic  59.5  44.87500 1987-04-10         NA  69.000000 21.8593750 39.354167\n101  chic  51.0  45.62500 1987-04-11         NA  24.000000 28.9739583 23.145833\n102  chic  49.5  43.12500 1987-04-12         NA  37.000000 25.6785714 26.020833\n103  chic  48.0  47.25000 1987-04-13         NA  47.000000 17.7678571 37.932449\n104  chic  52.5  51.50000 1987-04-14         NA  33.000000 13.2440476 35.722222\n105  chic  51.5  50.12500 1987-04-15         NA  30.000000 17.1428571 32.020065\n106  chic  54.0  49.25000 1987-04-16         NA  28.000000 22.1071429 30.750000\n107  chic  57.5  47.00000 1987-04-17         NA  43.000000 19.3095238 44.208333\n108  chic  61.5  49.87500 1987-04-18         NA 106.000000 31.5297619 55.416667\n109  chic  64.0  53.00000 1987-04-19         NA         NA 32.8392857 45.159722\n110  chic  71.0  55.75000 1987-04-20         NA  55.000000 41.3906250 40.534722\n111  chic  56.0  39.00000 1987-04-21         NA  36.200000 20.4687500 19.177838\n112  chic  47.0  45.62500 1987-04-22         NA  28.000000  9.0781250 23.234217\n113  chic  52.0  43.75000 1987-04-23         NA  26.000000 10.0946558 23.493056\n114  chic  49.0  30.75000 1987-04-24         NA  16.000000 27.5729167 20.661156\n115  chic  51.0  32.50000 1987-04-25         NA  30.000000 28.0625000 27.766667\n116  chic  57.0  33.87500 1987-04-26         NA  58.000000 33.1458333 33.458333\n117  chic  56.5  31.62500 1987-04-27         NA  37.333333 35.9276042 27.052083\n118  chic  53.5  28.62500 1987-04-28         NA  72.000000 22.6458333 32.036534\n119  chic  64.5  34.62500 1987-04-29         NA  61.000000 34.8522727 24.106061\n120  chic  46.0  16.62500 1987-04-30         NA  19.000000 35.4895833 18.320572\n121  chic  53.5  39.00000 1987-05-01         NA  66.000000 19.5615942 45.944444\n122  chic  53.0  47.37500 1987-05-02         NA  30.000000 24.1845238 31.508333\n123  chic  45.0  35.00000 1987-05-03         NA  20.285714 27.2023810 22.116667\n124  chic  48.0  29.37500 1987-05-04         NA  26.000000 31.2243590 23.026175\n125  chic  50.5  32.62500 1987-05-05         NA  60.000000 23.4375000 39.609217\n126  chic  58.0  40.12500 1987-05-06         NA         NA 32.3705739 51.285354\n127  chic  59.5  40.87500 1987-05-07         NA  41.000000 30.1893116 29.518281\n128  chic  59.0  33.37500 1987-05-08         NA  54.000000 16.8048246 38.774123\n129  chic  69.5  43.75000 1987-05-09         NA  56.166667 42.7968750 22.152778\n130  chic  74.5  51.50000 1987-05-10         NA         NA 43.0125000 20.173611\n131  chic  71.0  58.00000 1987-05-11         NA  81.000000 44.9862745 24.222222\n132  chic  51.5  32.75000 1987-05-12         NA  12.000000 25.3385417 18.017677\n133  chic  59.0  53.00000 1987-05-13         NA  20.000000 26.5591033 35.523359\n134  chic  69.0  53.37500 1987-05-14         NA         NA 38.8489583 29.545139\n135  chic  56.5  33.87500 1987-05-15         NA  21.571429 24.0208333 19.023359\n136  chic  62.5  42.62500 1987-05-16         NA  47.000000 31.6755359 28.177234\n137  chic  70.5  63.62500 1987-05-17         NA  63.000000 50.4481431 22.879529\n138  chic  66.5  57.62500 1987-05-18         NA         NA 24.8336730 27.201389\n139  chic  67.5  61.12500 1987-05-19         NA  42.000000 26.0721726 28.051772\n140  chic  66.5  59.75000 1987-05-20         NA  47.000000 15.2747283 21.791982\n141  chic  74.0  66.75000 1987-05-21         NA  46.166667 33.2518116 26.697917\n142  chic  61.5  49.75000 1987-05-22         NA         NA 12.3206522 12.742150\n143  chic  51.0  45.62500 1987-05-23         NA  13.000000 10.5781250 11.714015\n144  chic  50.5  45.12500 1987-05-24         NA         NA 18.9843750 11.673611\n145  chic  57.5  62.87500 1987-05-25         NA  50.000000 13.0089286 19.256944\n146  chic  73.0  67.62500 1987-05-26         NA  28.000000 29.8712121 26.819444\n147  chic  78.5  67.37500 1987-05-27         NA  40.600000 30.5468750 25.158103\n148  chic  78.5  65.75000 1987-05-28         NA  49.000000 28.9122283 32.130435\n149  chic  78.5  67.12500 1987-05-29         NA  50.000000 26.1302083 36.056169\n150  chic  76.0  65.62500 1987-05-30         NA  35.000000 21.8593750 33.566667\n151  chic  76.0  60.12500 1987-05-31         NA  32.000000 31.4434524 22.208333\n152  chic  74.5  68.50000 1987-06-01         NA  30.000000 34.1875000 28.341667\n153  chic  72.0  64.75000 1987-06-02         NA  33.666667 18.3385417 37.350000\n154  chic  69.0  47.25000 1987-06-03         NA  42.000000 23.3133605 21.743056\n155  chic  63.0  45.00000 1987-06-04         NA  45.000000 20.4272274 25.611111\n156  chic  70.0  54.87500 1987-06-05         NA  61.000000 33.1927083 35.627525\n157  chic  71.0  54.62500 1987-06-06         NA  57.000000 43.7447917 34.167929\n158  chic  77.5  58.12500 1987-06-07         NA  46.000000 50.7916667 15.739583\n159  chic  74.5  60.25000 1987-06-08         NA  51.500000 49.2121830 23.107639\n160  chic  57.5  41.12500 1987-06-09         NA  15.000000 29.6111866 15.299306\n161  chic  61.0  51.00000 1987-06-10         NA  50.000000 28.7330163 29.298611\n162  chic  72.5  68.75000 1987-06-11         NA  46.000000 27.7461174 32.455177\n163  chic  80.0  62.00000 1987-06-12         NA  41.000000 29.2907691 24.245896\n164  chic  77.0  62.00000 1987-06-13         NA  73.000000 39.6510417 35.425000\n165  chic  83.0  68.50000 1987-06-14         NA  43.666667 45.4218750 25.995833\n166  chic  73.5  48.50000 1987-06-15         NA  28.000000 33.7540761 22.205918\n167  chic  75.0  52.87500 1987-06-16         NA  46.000000 33.2013889 30.632639\n168  chic  77.0  61.00000 1987-06-17         NA  71.000000 54.9618918 47.925423\n169  chic  80.5  62.75000 1987-06-18         NA  90.000000 62.9696558 43.816667\n170  chic  77.5  61.37500 1987-06-19         NA  80.000000 47.2689145 51.175000\n171  chic  77.0  73.62500 1987-06-20         NA  59.833333 45.6979167 32.875000\n172  chic  76.0  71.12500 1987-06-21         NA  42.000000 32.7782738 20.381944\n173  chic  67.0  59.00000 1987-06-22         NA  52.000000 25.0539349 25.232435\n174  chic  72.5  57.75000 1987-06-23         NA  49.000000 32.2184524 39.979167\n175  chic  76.0  65.75000 1987-06-24         NA  63.000000 49.0802083 42.871222\n176  chic  70.5  62.00000 1987-06-25         NA  53.000000 33.8786580 29.284906\n177  chic  69.0  50.75000 1987-06-26         NA  31.800000 20.4687500 20.697917\n178  chic  64.5  48.25000 1987-06-27         NA  36.000000 21.6197917 15.802083\n179  chic  72.0  53.62500 1987-06-28         NA  34.000000 31.9637681 15.935326\n180  chic  72.5  66.00000 1987-06-29         NA  43.000000 27.7812500 24.575000\n181  chic  70.5  63.00000 1987-06-30         NA  43.000000 18.4687500 28.152778\n182  chic  68.5  60.62500 1987-07-01         NA  22.000000 32.2968750 20.018579\n183  chic  71.0  60.25000 1987-07-02         NA  45.500000 36.2670455 27.246112\n184  chic  77.5  60.37500 1987-07-03         NA  48.000000 42.9166667 18.784722\n185  chic  72.5  59.50000 1987-07-04         NA  24.000000 31.8958333 13.871528\n186  chic  72.5  69.12500 1987-07-05         NA         NA 22.6302083 16.260417\n187  chic  80.0  69.00000 1987-07-06         NA  33.000000 31.1118421 22.660221\n188  chic  80.0  69.12500 1987-07-07         NA         NA 34.3426178 23.083333\n189  chic  80.5  69.25000 1987-07-08         NA  38.000000 30.8516757 23.014795\n190  chic  80.5  67.62500 1987-07-09         NA  31.000000 24.9479167 20.157828\n191  chic  80.0  67.62500 1987-07-10         NA  33.000000 23.3802083 21.625000\n192  chic  80.0  73.50000 1987-07-11         NA  79.000000 29.1250000 16.548611\n193  chic  79.5  65.50000 1987-07-12         NA  47.000000 29.6406250 13.017361\n194  chic  64.5  58.75000 1987-07-13         NA  33.000000  9.6912202 18.666667\n195  chic  67.0  53.00000 1987-07-14         NA  21.400000 21.8638393 20.562500\n196  chic  63.0  54.37500 1987-07-15         NA  17.000000 23.1822917 20.879104\n197  chic  65.5  58.62500 1987-07-16         NA  28.000000 31.5208333 19.961422\n198  chic  78.0  67.00000 1987-07-17         NA  39.000000 42.8727679 25.000992\n199  chic  79.5  68.37500 1987-07-18         NA  51.000000 47.7916667 19.190972\n200  chic  84.5  73.62500 1987-07-19         NA  72.000000 47.0520833 13.371528\n201  chic  81.5  67.62500 1987-07-20         NA  65.428571 40.4989583 18.458333\n202  chic  81.0  71.25000 1987-07-21         NA  58.000000 58.1679121 36.628011\n203  chic  80.5  69.62500 1987-07-22         NA  98.000000 45.2827381 36.354167\n204  chic  82.0  70.00000 1987-07-23         NA 117.000000 59.1562500 25.981061\n205  chic  83.0  71.25000 1987-07-24         NA  79.000000 35.6902174 23.213225\n206  chic  84.5  71.12500 1987-07-25         NA  53.000000 43.8154762 22.654167\n207  chic  78.5  66.25000 1987-07-26         NA  29.500000 27.7738095 20.004167\n208  chic  71.0  62.62500 1987-07-27         NA  32.000000 15.7738095 30.754167\n209  chic  72.5  63.25000 1987-07-28         NA  37.000000 20.2678571 29.615909\n210  chic  78.0  70.25000 1987-07-29         NA  25.000000 25.0290116 33.510714\n211  chic  79.5  72.37500 1987-07-30         NA  75.000000 50.3690476 27.391667\n212  chic  80.5  75.75000 1987-07-31         NA  48.000000 38.4171843 28.429499\n213  chic  87.0  75.25000 1987-08-01         NA  57.571429 40.2321429 21.694444\n214  chic  86.0  73.87500 1987-08-02         NA  46.000000 46.6547619 15.486111\n215  chic  83.0  68.62500 1987-08-03         NA  54.000000 30.9745671 29.805556\n216  chic  75.0  60.62500 1987-08-04         NA  21.000000 20.5492788 14.288194\n217  chic  72.0  55.75000 1987-08-05         NA  15.000000 20.2916667 12.784722\n218  chic  72.0  62.12500 1987-08-06         NA  50.000000 29.5766446 32.699206\n219  chic  79.5  67.37500 1987-08-07         NA  51.285714 45.3229167 27.652778\n220  chic  73.5  73.62500 1987-08-08         NA  56.000000 23.0312500 24.600694\n221  chic  72.5  64.12500 1987-08-09         NA  29.000000 26.7552083 10.305556\n222  chic  71.0  63.12500 1987-08-10         NA  24.000000 29.4107143 20.023810\n223  chic  74.5  61.87500 1987-08-11         NA  41.000000 33.8437500 25.666667\n224  chic  76.0  63.62500 1987-08-12         NA  80.000000 37.0885417 33.645833\n225  chic  75.5  69.50000 1987-08-13         NA  63.400000 36.1979167 36.482186\n226  chic  74.0  74.62500 1987-08-14         NA  49.500000 24.2328431 18.595734\n227  chic  79.5  75.87500 1987-08-15         NA  41.000000 33.3750000 13.159269\n228  chic  80.0  73.87500 1987-08-16         NA  44.500000 32.2729592  9.338294\n229  chic  73.5  60.25000 1987-08-17         NA  39.000000 26.6763393 14.927083\n230  chic  69.5  64.25000 1987-08-18         NA  48.000000 14.0587798 31.393720\n231  chic  70.0  56.75000 1987-08-19         NA  31.666667 18.3888889 23.345644\n232  chic  70.0  62.62500 1987-08-20         NA  49.000000 30.5187500 26.729167\n233  chic  76.0  72.50000 1987-08-21         NA  43.000000 37.9427083 20.905934\n234  chic  71.5  54.62500 1987-08-22         NA  32.000000 23.8645833 12.909722\n235  chic  63.0  49.00000 1987-08-23         NA  24.000000 17.7278080 14.427778\n236  chic  61.5  51.37500 1987-08-24         NA  43.000000 12.5949836 21.585417\n237  chic  59.0  58.00000 1987-08-25         NA  36.000000  6.6656250 30.631944\n238  chic  62.0  63.25000 1987-08-26         NA  50.000000  8.2075216 22.983333\n239  chic  63.5  61.37500 1987-08-27         NA  20.000000 13.7187500 19.690025\n240  chic  63.5  54.62500 1987-08-28         NA  32.000000 21.9427083 22.045833\n241  chic  65.5  57.00000 1987-08-29         NA         NA 18.1562500 26.399306\n242  chic  72.0  59.62500 1987-08-30         NA  35.000000 22.6227355 16.859409\n243  chic  62.0  46.50000 1987-08-31         NA  25.000000 15.9218750 18.118293\n244  chic  64.0  49.50000 1987-09-01         NA  38.500000 17.9322917 22.520833\n245  chic  61.5  50.12500 1987-09-02         NA  17.000000 21.1614583 15.746528\n246  chic  60.5  49.25000 1987-09-03         NA  24.000000 20.3020833 22.481065\n247  chic  69.0  59.12500 1987-09-04         NA         NA 31.3385417 37.317235\n248  chic  73.0  57.37500 1987-09-05         NA         NA 46.0572917 36.465278\n249  chic  75.0  66.25000 1987-09-06         NA  60.666667 38.1979167 32.510417\n250  chic  70.5  65.62500 1987-09-07         NA         NA 22.7869112 21.312500\n251  chic  72.0  63.50000 1987-09-08         NA         NA 25.4010417 31.868056\n252  chic  68.5  56.12500 1987-09-09         NA         NA 18.8333333 22.885417\n253  chic  67.5  57.75000 1987-09-10         NA         NA 26.5052083 27.686896\n254  chic  69.0  57.00000 1987-09-11         NA         NA 22.4402174 31.030797\n255  chic  68.0  50.37500 1987-09-12         NA  33.500000 15.8125000 23.503472\n256  chic  59.0  53.25000 1987-09-13         NA         NA 12.3593750 21.166667\n257  chic  61.5  58.00000 1987-09-14         NA         NA 18.8958333 27.961806\n258  chic  72.0  66.00000 1987-09-15         NA         NA 15.4347826 28.386171\n259  chic  69.0  66.87500 1987-09-16         NA  33.000000 10.2047101 25.618056\n260  chic  67.5  64.25000 1987-09-17         NA  30.000000 13.5238095 18.876263\n261  chic  63.5  60.37500 1987-09-18         NA  25.250000  6.8928571 17.644886\n262  chic  61.0  50.25000 1987-09-19         NA         NA 12.6428571 16.395833\n263  chic  57.0  50.87500 1987-09-20         NA         NA  7.4047619 11.820833\n264  chic  55.5  54.75000 1987-09-21         NA  29.000000  4.9523810 16.641667\n265  chic  61.0  52.50000 1987-09-22         NA         NA  7.2639752 15.906813\n266  chic  63.0  51.00000 1987-09-23         NA  38.000000 13.1369048 20.427083\n267  chic  59.5  46.25000 1987-09-24         NA  23.000000 16.1309524 16.267361\n268  chic  56.5  43.00000 1987-09-25         NA  55.000000 14.0178571 30.210145\n269  chic  65.0  53.37500 1987-09-26         NA  42.000000 22.4940476 35.895833\n270  chic  75.5  54.00000 1987-09-27         NA  49.000000 27.5476190 30.091667\n271  chic  69.0  61.12500 1987-09-28         NA  57.000000 30.0178571 33.758333\n272  chic  61.5  52.37500 1987-09-29         NA  34.000000 12.7321429 16.118452\n273  chic  55.0  35.62500 1987-09-30         NA  26.800000 10.9097222 18.558333\n274  chic  55.5  46.37500 1987-10-01         NA  44.000000 17.3035714 20.962500\n275  chic  47.0  32.25000 1987-10-02         NA  52.000000 15.0282091  9.966848\n276  chic  42.5  29.87500 1987-10-03         NA  52.000000 15.3928571 19.545833\n277  chic  52.0  30.75000 1987-10-04         NA  50.000000 19.1488095 19.566667\n278  chic  60.0  41.25000 1987-10-05         NA  48.000000 14.8130952 18.313333\n279  chic  45.5  38.00000 1987-10-06         NA  24.166667  6.9729437  9.258333\n280  chic  39.5  26.87500 1987-10-07         NA  36.000000 13.3154762 13.863587\n281  chic  41.5  26.87500 1987-10-08         NA  41.000000 10.5181159 27.595833\n282  chic  53.5  31.25000 1987-10-09         NA  38.000000 11.5636646 19.609028\n283  chic  42.5  32.62500 1987-10-10         NA  28.000000  8.7380952 21.152778\n284  chic  39.0  25.50000 1987-10-11         NA  32.000000 14.6333333 23.298611\n285  chic  42.5  30.37500 1987-10-12         NA  41.500000 12.4146825 39.048611\n286  chic  49.5  33.37500 1987-10-13         NA         NA 15.1156093 40.270652\n287  chic  55.5  38.12500 1987-10-14         NA  41.000000 10.7985934 40.230676\n288  chic  63.0  36.00000 1987-10-15         NA  52.000000 24.4475932 43.208333\n289  chic  62.5  55.12500 1987-10-16         NA  58.000000 28.5654762 35.803571\n290  chic  48.0  42.12500 1987-10-17         NA  19.000000  9.2202381 11.263889\n291  chic  53.5  43.75000 1987-10-18         NA  26.857143 15.9702381 23.086806\n292  chic  49.5  40.25000 1987-10-19         NA  11.000000 18.8690476 22.225694\n293  chic  45.5  32.37500 1987-10-20         NA  24.000000 15.2810990 17.855655\n294  chic  37.0  33.25000 1987-10-21         NA  20.500000  6.4679487 14.982639\n295  chic  43.0  34.25000 1987-10-22         NA  25.000000  6.7532468 23.254227\n296  chic  39.0  31.12500 1987-10-23         NA  50.000000  8.3148810 25.238636\n297  chic  38.5  33.50000 1987-10-24         NA  28.400000  7.5357143 23.812500\n298  chic  42.0  31.12500 1987-10-25         NA         NA 11.1250000 23.892361\n299  chic  44.5  45.37500 1987-10-26         NA  33.000000  5.0714286 27.041667\n300  chic  44.5  34.50000 1987-10-27         NA  31.000000 10.1757246 19.588068\n301  chic  38.5  28.87500 1987-10-28         NA  31.000000  5.0713364 24.832054\n302  chic  44.5  37.75000 1987-10-29         NA  48.000000  7.2569444 33.360205\n303  chic  54.5  42.87500 1987-10-30         NA  50.666667 16.9345238 31.461806\n304  chic  52.0  49.37500 1987-10-31         NA  60.000000 12.5714286 22.510417\n305  chic  58.0  58.50000 1987-11-01         NA  30.000000  9.7445652 30.340278\n306  chic  64.0  56.62500 1987-11-02         NA  46.000000 11.5508658 35.236111\n307  chic  66.0  49.87500 1987-11-03         NA         NA 29.4583333 32.503788\n308  chic  56.5  38.25000 1987-11-04         NA  47.000000 19.1666667 19.041604\n309  chic  40.5  19.87500 1987-11-05         NA  25.500000 20.1666667 19.131439\n310  chic  39.5  25.75000 1987-11-06         NA  43.000000  9.5000000 27.254167\n311  chic  45.5  29.50000 1987-11-07         NA  46.000000  2.7500000 31.687500\n312  chic  49.5  41.75000 1987-11-08         NA  66.000000 23.2916667 25.416667\n313  chic  35.0  18.50000 1987-11-09         NA  18.000000 25.6666667 24.619792\n314  chic  34.0  24.87500 1987-11-10         NA  12.000000 27.7500000 25.354167\n315  chic  35.0  23.75000 1987-11-11         NA  31.285714  7.9583333 27.569444\n316  chic  43.5  31.12500 1987-11-12         NA  47.000000  7.0000000 31.238678\n317  chic  48.5  31.37500 1987-11-13         NA  55.000000  2.8750000 29.825181\n318  chic  47.0  31.12500 1987-11-14         NA  18.000000  9.8750000 28.666667\n319  chic  50.5  32.00000 1987-11-15         NA  51.000000 19.2500000 36.916667\n320  chic  56.0  56.00000 1987-11-16         NA  34.000000 17.6666667 30.385417\n321  chic  50.0  35.37500 1987-11-17         NA  18.333333 12.7083333 10.677989\n322  chic  38.0  29.25000 1987-11-18         NA         NA 10.3478261 15.733360\n323  chic  37.5  26.00000 1987-11-19         NA  29.000000 10.8333333 20.044643\n324  chic  27.5  10.37500 1987-11-20         NA  34.000000 25.0416667 13.951894\n325  chic  25.5  11.50000 1987-11-21         NA  27.000000 11.2916667 23.741667\n326  chic  42.0  28.75000 1987-11-22         NA         NA 11.3333333 18.966667\n327  chic  43.5  31.75000 1987-11-23         NA  30.333333  8.7727273 12.654167\n328  chic  39.5  39.37500 1987-11-24         NA  52.000000  8.8333333 14.596491\n329  chic  40.0  36.87500 1987-11-25         NA  10.000000 13.1250000 14.988561\n330  chic  40.0  35.87500 1987-11-26         NA  15.000000 23.5833333  7.866667\n331  chic  40.5  39.50000 1987-11-27         NA         NA 11.0000000 13.041667\n332  chic  47.0  45.50000 1987-11-28         NA         NA  4.4583333 17.491667\n333  chic  39.0  34.62500 1987-11-29         NA  12.142857  2.1250000 11.645833\n334  chic  37.0  35.50000 1987-11-30         NA         NA  4.1666667 13.620833\n335  chic  32.0  24.12500 1987-12-01         NA  28.000000 13.4782609 16.891667\n336  chic  30.0  26.37500 1987-12-02         NA  23.000000  9.2500000 15.241667\n337  chic  30.5  26.25000 1987-12-03         NA  30.000000  6.6250000 19.433333\n338  chic  27.0  19.62500 1987-12-04         NA  35.000000 12.5416667 21.457576\n339  chic  27.0  24.62500 1987-12-05         NA  24.666667 13.8750000 24.675000\n340  chic  31.5  29.00000 1987-12-06         NA  22.000000 15.2916667 21.966667\n341  chic  38.5  36.25000 1987-12-07         NA  25.000000  6.4166667 21.766667\n342  chic  46.5  49.50000 1987-12-08         NA  28.000000  2.9583333 22.649638\n343  chic  49.5  34.37500 1987-12-09         NA  21.000000  9.0416667 12.475000\n344  chic  38.0  31.12500 1987-12-10         NA  32.000000  7.2500000 17.917935\n345  chic  41.0  33.62500 1987-12-11         NA  23.000000  2.5833333 23.375000\n346  chic  35.0  23.75000 1987-12-12         NA  29.000000 11.0416667  9.204167\n347  chic  31.5  23.50000 1987-12-13         NA  34.000000 13.1666667 13.295833\n348  chic  30.0  27.50000 1987-12-14         NA  43.000000 13.0000000 24.991667\n349  chic  31.0  24.25000 1987-12-15         NA  19.000000  9.0526316 11.124123\n350  chic  27.5  16.62500 1987-12-16         NA  36.000000 12.0833333 11.262500\n351  chic  20.5  11.75000 1987-12-17         NA  27.200000  8.0869565 23.483333\n352  chic  23.0  25.75000 1987-12-18         NA  36.000000  2.8704710 22.741667\n353  chic  34.0  35.00000 1987-12-19         NA  21.500000  2.3958333 21.945833\n354  chic  34.0  21.25000 1987-12-20         NA  25.000000  9.8125000 15.675000\n355  chic  33.0  26.12500 1987-12-21         NA         NA  6.8750000 21.953804\n356  chic  35.0  29.12500 1987-12-22         NA         NA  2.7391304 29.456522\n357  chic  35.5  31.25000 1987-12-23         NA  36.000000  3.5000000 24.966667\n358  chic  41.0  39.75000 1987-12-24         NA         NA  2.3958333 21.675000\n359  chic  33.0  25.50000 1987-12-25         NA  16.000000 15.1458333 11.133333\n360  chic  27.5  23.75000 1987-12-26         NA         NA 18.6250000 17.391667\n361  chic  29.0  28.37500 1987-12-27         NA  45.000000 10.0416667 26.691667\n362  chic  33.5  30.75000 1987-12-28         NA         NA 18.2291667 15.641667\n363  chic  24.5  20.25000 1987-12-29         NA  20.666667 19.4166667 23.804924\n364  chic  25.5  27.62500 1987-12-30         NA         NA  4.3458333 31.690657\n365  chic  23.5   7.25000 1987-12-31         NA  21.000000 16.0833333 16.770833\n366  chic   3.5  -3.62500 1988-01-01         NA         NA 19.9583333 14.138889\n367  chic  15.0  15.37500 1988-01-02         NA         NA  7.8125000 25.736111\n368  chic  24.5  16.75000 1988-01-03         NA  25.000000  8.6458333 21.722222\n369  chic   5.0 -15.87500 1988-01-04         NA  26.000000 18.2113095 12.665714\n370  chic  -6.5 -15.75000 1988-01-05         NA  24.000000 13.1666667 17.220833\n371  chic  -5.5 -15.12500 1988-01-06         NA  75.000000  7.1458333 27.665942\n372  chic   3.0  -1.87500 1988-01-07         NA  74.000000  2.5208333 52.100000\n373  chic   8.5   2.75000 1988-01-08         NA  87.000000  4.6594203 42.885041\n374  chic   0.5 -12.25000 1988-01-09         NA  48.000000  7.3958333 26.450000\n375  chic   1.5  -1.62500 1988-01-10         NA  36.333333  6.9166667 31.175000\n376  chic  24.0  22.25000 1988-01-11         NA  39.000000  6.4791667 25.883333\n377  chic  28.5  15.50000 1988-01-12         NA  43.000000 16.9375000 16.528623\n378  chic  12.0  -0.37500 1988-01-13         NA  51.000000 13.8541667 21.423485\n379  chic  11.0   9.37500 1988-01-14         NA  46.000000  3.4583333 32.825000\n380  chic  28.0  22.75000 1988-01-15         NA  28.000000  4.2291667 24.600000\n381  chic  39.0  29.25000 1988-01-16         NA  32.000000 14.1458333 19.229167\n382  chic  37.0  32.25000 1988-01-17         NA  26.000000  6.3541667 24.820833\n383  chic  33.5  32.37500 1988-01-18         NA         NA  8.7171053 28.923810\n384  chic  35.5  34.62500 1988-01-19         NA  39.000000 13.1250000 23.518182\n385  chic  34.0  27.37500 1988-01-20         NA  23.500000  6.5069444 21.038043\n386  chic  28.5  21.12500 1988-01-21         NA  20.000000 16.2291667 21.358333\n387  chic  27.0  23.62500 1988-01-22         NA  27.166667  6.6250000 19.928114\n388  chic  21.0  25.75000 1988-01-23         NA  23.000000  7.0000000 17.495833\n389  chic  24.5  17.00000 1988-01-24         NA  26.000000  7.5000000 16.037500\n390  chic  14.5  -2.75000 1988-01-25         NA  34.000000  6.7083333 18.766667\n391  chic   9.0  -0.50000 1988-01-26         NA  45.000000  6.8750000 27.124729\n392  chic   7.0  11.25000 1988-01-27         NA  51.000000  7.3043478 33.983788\n393  chic  21.5  19.25000 1988-01-28         NA  46.000000  9.3333333 31.377536\n394  chic  35.5  40.50000 1988-01-29         NA  37.000000 13.4583333 33.374848\n395  chic  50.5  47.50000 1988-01-30         NA  23.000000 26.5416667 15.466667\n396  chic  46.0  31.87500 1988-01-31         NA  42.000000 19.1250000 13.845833\n397  chic  28.0  21.37500 1988-02-01         NA  13.000000 24.1250000 16.515909\n398  chic  22.5  17.75000 1988-02-02         NA  23.000000 29.0833333 16.725000\n399  chic  24.0  20.12500 1988-02-03         NA  36.000000 13.2916667 28.466667\n400  chic  16.5   6.62500 1988-02-04         NA  52.000000 13.6250000 25.327536\n401  chic   4.0 -10.75000 1988-02-05         NA  37.000000 18.2083333 16.566667\n402  chic   3.0  -3.12500 1988-02-06         NA  39.000000 19.8333333 13.854167\n403  chic  16.5   8.37500 1988-02-07         NA  32.000000 20.3750000 15.733333\n404  chic  14.5  16.25000 1988-02-08         NA  43.000000 12.4166667 29.954762\n405  chic  17.5   7.12500 1988-02-09         NA  38.800000 12.6666667 31.241667\n406  chic  16.0  17.62500 1988-02-10         NA  36.000000 24.8750000 29.183333\n407  chic  16.0   9.00000 1988-02-11         NA  28.000000 28.0416667 17.062500\n408  chic   9.0   0.25000 1988-02-12         NA  44.000000 20.3750000 26.800000\n409  chic   7.0   3.50000 1988-02-13         NA  42.000000 13.0833333 37.966667\n410  chic  27.5  38.62500 1988-02-14         NA         NA  9.8333333 30.766667\n411  chic  26.0  11.87500 1988-02-15         NA  29.000000 20.6666667 20.625000\n412  chic  26.5  27.12500 1988-02-16         NA  34.000000  6.4166667 29.487500\n413  chic  31.0  23.12500 1988-02-17         NA  60.000000  9.9583333 39.709369\n414  chic  31.5  27.00000 1988-02-18         NA  62.000000  9.2500000 44.310606\n415  chic  32.0  29.37500 1988-02-19         NA  77.000000  8.6666667 49.018939\n416  chic  21.5  -2.62500 1988-02-20         NA  37.000000 24.2916667 14.348958\n417  chic  16.5  20.12500 1988-02-21         NA  23.333333 17.8333333 21.489583\n418  chic  40.0  29.00000 1988-02-22         NA  23.000000 17.3541667 16.796875\n419  chic  27.0  13.00000 1988-02-23         NA  44.000000 23.0000000 13.645833\n420  chic  22.0   7.87500 1988-02-24         NA  65.000000 22.2500000 24.922348\n421  chic  20.5   9.75000 1988-02-25         NA         NA 15.0000000 25.986111\n422  chic  39.5  29.62500 1988-02-26         NA  54.000000 15.0833333 28.625000\n423  chic  32.0  22.75000 1988-02-27         NA  25.666667 37.3750000 17.986111\n424  chic  34.5  31.62500 1988-02-28         NA  54.000000 19.2916667 28.236111\n425  chic  39.5  26.37500 1988-02-29         NA  29.000000 17.0000000 27.780208\n426  chic  41.0  29.37500 1988-03-01         NA  30.000000 25.7083333 22.611568\n427  chic  35.5  24.37500 1988-03-02         NA  33.000000 28.2083333 18.718750\n428  chic  27.0  17.00000 1988-03-03         NA  17.000000 37.3750000 13.806818\n429  chic  28.5  16.25000 1988-03-04         NA  24.200000 34.2916667 20.513889\n430  chic  31.0  19.25000 1988-03-05         NA  40.000000 11.8333333 44.027778\n431  chic  36.0  32.50000 1988-03-06         NA         NA 18.3750000 29.208333\n432  chic  42.0  40.00000 1988-03-07         NA  58.000000 11.2916667 29.625000\n433  chic  48.5  42.75000 1988-03-08         NA         NA 15.9565217 27.222222\n434  chic  34.0  27.62500 1988-03-09         NA         NA 18.5416667 21.890625\n435  chic  38.0  21.37500 1988-03-10         NA  44.000000 22.0416667 35.458333\n436  chic  46.5  35.12500 1988-03-11         NA  36.000000 10.5833333 32.836905\n437  chic  43.0  28.25000 1988-03-12         NA  23.000000 22.5416667 12.145833\n438  chic  26.5  17.62500 1988-03-13         NA         NA 27.1250000  7.733333\n439  chic  24.0  17.50000 1988-03-14         NA  27.000000 26.1250000 15.423333\n440  chic  23.5  19.50000 1988-03-15         NA  37.000000 21.7083333 19.515530\n441  chic  32.5  23.50000 1988-03-16         NA  27.833333 19.9583333 21.863095\n442  chic  34.0  26.00000 1988-03-17         NA         NA 11.8541667 27.483333\n443  chic  34.5  17.37500 1988-03-18         NA  47.000000 17.3125000 21.675000\n444  chic  32.0  29.50000 1988-03-19         NA  30.000000 22.0833333 18.654167\n445  chic  28.5  15.00000 1988-03-20         NA   8.000000 35.3541667 12.125000\n446  chic  30.0  15.75000 1988-03-21         NA  24.000000 36.5625000 16.662500\n447  chic  46.5  35.00000 1988-03-22         NA  59.666667 18.8055556 26.064312\n448  chic  56.0  36.25000 1988-03-23         NA  84.000000 30.3888889 24.815909\n449  chic  56.5  54.75000 1988-03-24         NA  52.000000 24.2896825 30.023979\n450  chic  53.0  35.50000 1988-03-25         NA  25.000000 22.0024155 16.995833\n451  chic  39.0  18.50000 1988-03-26         NA  59.000000 20.3969298 12.273246\n452  chic  40.0  28.25000 1988-03-27         NA  55.000000 22.6388889 15.500000\n453  chic  48.5  42.62500 1988-03-28         NA  31.000000  9.6190476 31.729167\n454  chic  45.5  35.75000 1988-03-29         NA  29.000000 13.5654762 23.291667\n455  chic  40.5  27.25000 1988-03-30         NA  33.000000 18.6369048 25.262578\n456  chic  42.0  32.00000 1988-03-31         NA  43.000000 17.0178571 32.191667\n457  chic  42.0  34.25000 1988-04-01         NA  30.000000 37.8260870 23.333333\n458  chic  54.0  56.62500 1988-04-02         NA  40.000000  9.4107143 21.702381\n459  chic  53.5  44.12500 1988-04-03         NA  20.166667 22.6666667 20.782143\n460  chic  57.5  51.62500 1988-04-04         NA         NA 27.4663561 23.115424\n461  chic  69.5  57.50000 1988-04-05         NA  42.000000 30.6666667 26.653125\n462  chic  50.0  28.75000 1988-04-06         NA  18.000000 31.2678571 11.883605\n463  chic  50.0  25.25000 1988-04-07         NA  32.000000 23.4373706 22.819180\n464  chic  51.5  28.75000 1988-04-08         NA  32.000000 18.8750000 38.178571\n465  chic  52.5  37.75000 1988-04-09         NA  53.750000 19.9464286 33.437500\n466  chic  43.0  33.75000 1988-04-10         NA  35.000000 17.4642857 16.663194\n467  chic  46.0  22.87500 1988-04-11         NA  31.000000 28.8732993 11.940901\n468  chic  47.5  23.25000 1988-04-12         NA  38.000000 27.6904762 20.755952\n469  chic  53.0  38.50000 1988-04-13         NA         NA 28.5833333 35.814589\n470  chic  43.0  28.87500 1988-04-14         NA  25.000000 26.0561224 19.623718\n471  chic  41.5  25.50000 1988-04-15         NA  27.000000 24.1123387 21.036092\n472  chic  47.5  27.50000 1988-04-16         NA  43.000000 21.7738095 25.684896\n473  chic  59.0  37.87500 1988-04-17         NA  76.000000 39.0000000 16.380208\n474  chic  42.5  17.87500 1988-04-18         NA  41.000000 30.1011905 19.442708\n475  chic  40.5  14.75000 1988-04-19         NA  52.000000 21.7738095 31.804688\n476  chic  45.5  35.25000 1988-04-20         NA  52.000000 20.9940476 33.296875\n477  chic  37.0  28.75000 1988-04-21         NA  35.600000 18.4940476 39.934290\n478  chic  45.5  30.37500 1988-04-22         NA  51.000000 25.5595238 21.323661\n479  chic  44.0  34.37500 1988-04-23         NA  44.000000 21.3154762 15.732639\n480  chic  45.0  30.12500 1988-04-24         NA  34.000000 24.8869048 17.963542\n481  chic  54.0  36.37500 1988-04-25         NA  44.000000 21.5357143 28.177197\n482  chic  48.5  35.87500 1988-04-26         NA  19.000000 22.3831522 21.613095\n483  chic  39.5  34.62500 1988-04-27         NA  16.800000 24.9591097 10.976902\n484  chic  48.5  28.37500 1988-04-28         NA  33.000000 26.3157350 19.777656\n485  chic  49.0  25.37500 1988-04-29         NA  48.000000 22.3460884 31.223214\n486  chic  54.0  26.50000 1988-04-30         NA  33.000000 22.9583333 35.923295\n487  chic  53.0  29.62500 1988-05-01         NA  33.000000 32.2738095 32.911458\n488  chic  57.0  27.75000 1988-05-02         NA  50.000000 35.3214286 31.283114\n489  chic  56.5  39.12500 1988-05-03         NA  46.000000 35.2916667 26.319414\n490  chic  52.5  31.87500 1988-05-04         NA  48.000000 33.4387077 26.079543\n491  chic  54.5  34.87500 1988-05-05         NA  53.000000 28.1089976 26.427872\n492  chic  61.5  38.12500 1988-05-06         NA  60.000000 26.4692029 29.361693\n493  chic  62.0  40.87500 1988-05-07         NA  83.000000 34.0625000 27.145833\n494  chic  67.5  53.25000 1988-05-08         NA 365.000000 48.8055556 12.249547\n495  chic  56.0  52.62500 1988-05-09         NA  28.000000 25.7013889 12.833333\n496  chic  57.0  49.50000 1988-05-10         NA  36.000000 19.1416667 22.024057\n497  chic  60.5  41.25000 1988-05-11         NA  59.000000 24.5500000 31.017495\n498  chic  67.0  52.50000 1988-05-12         NA  55.000000 33.7638889 29.003633\n499  chic  58.0  33.62500 1988-05-13         NA  30.000000 30.0357143 14.563350\n500  chic  60.0  39.87500 1988-05-14         NA  60.000000 28.4535714 21.669643\n501  chic  71.0  54.12500 1988-05-15         NA  61.600000 35.8928571 14.829175\n502  chic  55.5  40.25000 1988-05-16         NA         NA 23.8750000 13.097222\n503  chic  52.0  34.37500 1988-05-17         NA  29.000000 26.8700828 12.298810\n504  chic  55.0  44.87500 1988-05-18         NA  35.000000 27.6726190 16.979070\n505  chic  60.0  36.62500 1988-05-19         NA  43.000000 30.5238095 23.405248\n506  chic  63.0  51.75000 1988-05-20         NA  63.000000 29.4624741 27.585859\n507  chic  64.5  50.25000 1988-05-21         NA  48.250000 41.4702381 25.908333\n508  chic  66.0  53.62500 1988-05-22         NA         NA 41.3888889 13.420833\n509  chic  53.5  52.25000 1988-05-23         NA  43.000000 19.9880952 18.720083\n510  chic  53.0  28.00000 1988-05-24         NA  26.000000 32.2948413 10.751894\n511  chic  48.5  35.50000 1988-05-25         NA  25.000000 24.0773810 18.548913\n512  chic  60.5  42.37500 1988-05-26         NA  52.000000 27.8690476 26.029390\n513  chic  69.5  45.37500 1988-05-27         NA  63.750000 41.5714286 27.336310\n514  chic  73.0  49.75000 1988-05-28         NA         NA 41.7559524 29.535714\n515  chic  74.0  51.87500 1988-05-29         NA         NA 46.5892857 26.588029\n516  chic  75.5  52.00000 1988-05-30         NA  75.000000 52.7500000 24.091636\n517  chic  76.0  52.75000 1988-05-31         NA 148.000000 50.9047619 39.352176\n518  chic  76.5  54.00000 1988-06-01         NA 142.000000 49.2016807 44.596639\n519  chic  63.0  47.00000 1988-06-02         NA  46.600000 31.1420068 17.333929\n520  chic  58.5  37.50000 1988-06-03         NA  28.000000 26.7763975 14.300725\n521  chic  62.5  40.50000 1988-06-04         NA  54.000000 24.4209184 23.860679\n522  chic  73.0  49.12500 1988-06-05         NA  68.000000 44.5238095 20.000000\n523  chic  78.0  48.75000 1988-06-06         NA         NA 50.4365942 26.053942\n524  chic  79.0  51.12500 1988-06-07         NA 139.000000 54.1785714 34.679770\n525  chic  63.0  46.12500 1988-06-08         NA  70.800000 31.0178571 26.315279\n526  chic  56.0  32.37500 1988-06-09         NA         NA 31.6834886 13.687364\n527  chic  56.0  34.62500 1988-06-10         NA  30.000000 26.1190476 25.774621\n528  chic  67.0  41.62500 1988-06-11         NA  50.000000 34.1488095 29.848958\n529  chic  72.0  48.25000 1988-06-12         NA  50.000000 47.6822917 30.968750\n530  chic  78.0  48.50000 1988-06-13         NA  75.000000 49.3565958 33.522367\n531  chic  82.0  53.62500 1988-06-14         NA  88.250000 54.1083333 26.758356\n532  chic  81.5  53.62500 1988-06-15         NA  78.000000 47.4427083 23.693759\n533  chic  71.0  47.12500 1988-06-16         NA  39.000000 28.7023810 19.099297\n534  chic  68.5  53.25000 1988-06-17         NA  46.000000 32.3281250 31.212121\n535  chic  74.5  52.87500 1988-06-18         NA  55.000000 41.2313988 38.978940\n536  chic  82.0  55.87500 1988-06-19         NA         NA 59.1250000 20.114583\n537  chic  88.5  70.25000 1988-06-20         NA  88.000000 61.6770833 25.640269\n538  chic  86.5  66.12500 1988-06-21         NA  81.000000 52.8759058 33.124188\n539  chic  82.5  67.25000 1988-06-22         NA  84.000000 54.6411732 19.838095\n540  chic  70.0  50.75000 1988-06-23         NA  26.000000 28.8452381 16.159170\n541  chic  77.5  63.25000 1988-06-24         NA         NA 36.0260417 31.673654\n542  chic  84.5  57.50000 1988-06-25         NA         NA 59.0677083 15.276786\n543  chic  63.5  44.87500 1988-06-26         NA  20.600000 25.4166667  7.872024\n544  chic  64.0  42.87500 1988-06-27         NA  21.000000 18.4293155 19.049320\n545  chic  72.5  58.50000 1988-06-28         NA         NA 36.0189951 25.195323\n546  chic  63.0  44.37500 1988-06-29         NA  17.000000 26.9821429 14.285455\n547  chic  61.5  46.12500 1988-06-30         NA  11.000000 23.6197917 13.523810\n548  chic  66.0  47.37500 1988-07-01         NA  19.000000 22.7656250 20.863095\n549  chic  65.0  44.37500 1988-07-02         NA  26.600000 22.5312500 21.625000\n550  chic  69.5  47.87500 1988-07-03         NA         NA 38.3802083 32.494048\n551  chic  73.0  49.87500 1988-07-04         NA  51.000000 47.0758605 38.056603\n552  chic  79.5  56.75000 1988-07-05         NA         NA 57.7484149 51.448681\n553  chic  82.5  60.62500 1988-07-06         NA 116.000000 55.0861185 62.479984\n554  chic  85.0  58.37500 1988-07-07         NA 116.000000 58.8864254 46.273421\n555  chic  83.0  59.87500 1988-07-08         NA 106.800000 48.8906250 44.497024\n556  chic  82.5  57.25000 1988-07-09         NA  85.000000 49.0260417 38.491071\n557  chic  75.5  64.62500 1988-07-10         NA         NA 41.4226190 21.700521\n558  chic  76.5  57.50000 1988-07-11         NA  42.000000 34.8729620 24.445911\n559  chic  71.5  60.37500 1988-07-12         NA  14.000000 27.5416667 21.947205\n560  chic  80.0  65.87500 1988-07-13         NA  50.000000 32.6093750 22.851786\n561  chic  87.0  57.75000 1988-07-14         NA  62.000000 45.9257246 25.979798\n562  chic  86.5  70.50000 1988-07-15         NA  78.000000 41.9620098 34.799720\n563  chic  85.0  69.62500 1988-07-16         NA  53.000000 37.7291667 21.854167\n564  chic  78.0  61.00000 1988-07-17         NA  22.000000 30.4843750 18.960938\n565  chic  71.5  66.25000 1988-07-18         NA         NA 23.1927083 31.624900\n566  chic  75.0  58.37500 1988-07-19         NA  35.000000 26.0208333 26.169913\n567  chic  74.0  63.87500 1988-07-20         NA  33.500000 27.1639493 24.102614\n568  chic  71.5  61.12500 1988-07-21         NA  32.000000 25.0572917 28.563923\n569  chic  71.0  59.12500 1988-07-22         NA  15.000000 26.6770833 19.305736\n570  chic  72.0  59.50000 1988-07-23         NA  28.000000 27.5729167 21.401786\n571  chic  75.5  57.37500 1988-07-24         NA  54.000000 35.9322917 27.782738\n572  chic  75.5  64.75000 1988-07-25         NA  39.000000 38.9597538 24.762269\n573  chic  73.5  55.75000 1988-07-26         NA  22.000000 23.0104167 15.630952\n574  chic  76.0  60.37500 1988-07-27         NA  59.000000 32.3353714 31.333333\n575  chic  84.0  62.50000 1988-07-28         NA  68.000000 49.0989583 30.944048\n576  chic  83.0  68.50000 1988-07-29         NA  73.000000 59.5416667 28.183300\n577  chic  82.5  68.87500 1988-07-30         NA  40.000000 48.2083333 23.151042\n578  chic  79.0  62.75000 1988-07-31         NA         NA 42.3645833 23.854367\n579  chic  89.0  71.12500 1988-08-01         NA  67.200000 44.1499094 25.963089\n580  chic  89.5  70.37500 1988-08-02         NA  67.000000 49.8494867 25.919730\n581  chic  88.0  67.37500 1988-08-03         NA  65.000000 40.6417572 27.739583\n582  chic  87.0  71.50000 1988-08-04         NA  66.000000 42.1845562 30.262390\n583  chic  76.5  60.12500 1988-08-05         NA  64.000000 36.5052083 23.125000\n584  chic  76.5  51.75000 1988-08-06         NA         NA 36.5625000 30.473214\n585  chic  78.0  53.62500 1988-08-07         NA  38.333333 41.8834135 28.630390\n586  chic  84.0  70.75000 1988-08-08         NA  67.000000 53.9670139 23.277868\n587  chic  79.0  73.00000 1988-08-09         NA  68.000000 30.9166667 34.123551\n588  chic  76.5  72.00000 1988-08-10         NA  36.000000 30.4791667 34.997619\n589  chic  82.0  73.37500 1988-08-11         NA         NA 28.4675325 31.126701\n590  chic  83.5  69.62500 1988-08-12         NA  66.000000 26.6093750 35.062500\n591  chic  83.5  73.62500 1988-08-13         NA  70.200000 35.9218750 22.171262\n592  chic  83.0  76.62500 1988-08-14         NA         NA 40.3489583 13.351190\n593  chic  84.0  70.50000 1988-08-15         NA  32.000000 38.5979864 24.906567\n594  chic  86.0  73.12500 1988-08-16         NA  69.000000 34.3906250 34.386572\n595  chic  88.0  66.37500 1988-08-17         NA  71.000000 39.3123971 23.505208\n596  chic  80.5  68.37500 1988-08-18         NA  63.000000 34.6972373 22.805952\n597  chic  71.5  62.87500 1988-08-19         NA  28.750000 14.9270833 17.886285\n598  chic  73.0  62.12500 1988-08-20         NA  31.000000 37.1145833 20.342799\n599  chic  70.5  54.87500 1988-08-21         NA         NA 27.2291667 22.604846\n600  chic  70.0  59.75000 1988-08-22         NA  39.000000 24.6927083 29.989583\n601  chic  75.0  55.37500 1988-08-23         NA  47.000000 32.7083333 19.994792\n602  chic  71.0  52.37500 1988-08-24         NA  89.000000 21.7968750 26.347799\n603  chic  69.5  42.62500 1988-08-25         NA  50.400000 21.3854167 23.851190\n604  chic  66.0  45.37500 1988-08-26         NA  41.000000 16.5104167 24.988008\n605  chic  65.0  60.12500 1988-08-27         NA         NA 11.1666667 33.408967\n606  chic  64.0  41.87500 1988-08-28         NA  89.000000 22.0000000 19.359375\n607  chic  60.0  49.00000 1988-08-29         NA  29.000000 19.8677083 28.050595\n608  chic  63.0  49.37500 1988-08-30         NA  37.000000 20.1770833 36.426501\n609  chic  70.5  49.00000 1988-08-31         NA  47.400000 30.8906250 37.807446\n610  chic  72.0  52.50000 1988-09-01         NA  48.000000 36.8593750 44.351393\n611  chic  73.0  57.87500 1988-09-02         NA  65.000000 34.3349185 47.387455\n612  chic  72.0  53.62500 1988-09-03         NA  38.000000 32.6562500 22.760417\n613  chic  63.0  52.37500 1988-09-04         NA  28.000000 33.7678571 12.511905\n614  chic  54.0  38.00000 1988-09-05         NA         NA 24.2023810 12.413690\n615  chic  55.0  39.62500 1988-09-06         NA  30.750000 15.9114583 30.125000\n616  chic  60.5  37.62500 1988-09-07         NA  33.000000 27.4531250 35.282609\n617  chic  70.0  47.12500 1988-09-08         NA  54.000000 35.6718750 38.283754\n618  chic  66.0  34.75000 1988-09-09         NA  66.000000 17.4062500 40.382378\n619  chic  67.5  39.75000 1988-09-10         NA  77.000000 19.2656250 51.447917\n620  chic  71.0  62.37500 1988-09-11         NA         NA 30.2239583 33.981431\n621  chic  75.5  64.75000 1988-09-12         NA  33.333333 18.6770833 23.536458\n622  chic  63.0  46.87500 1988-09-13         NA  58.000000 15.2260417 25.072834\n623  chic  66.0  48.87500 1988-09-14         NA  58.000000 23.7844298 30.752629\n624  chic  64.5  50.37500 1988-09-15         NA  38.000000 19.5826540 21.497396\n625  chic  65.5  59.75000 1988-09-16         NA  55.000000 15.3854167 36.647491\n626  chic  78.0  61.75000 1988-09-17         NA         NA 25.2395833 24.885417\n627  chic  76.5  62.37500 1988-09-18         NA  43.400000 19.7604167 19.992527\n628  chic  67.0  51.25000 1988-09-19         NA  26.000000 17.0833333 19.109375\n629  chic  60.0  47.25000 1988-09-20         NA  34.000000 13.8715278 12.135384\n630  chic  58.5  49.75000 1988-09-21         NA         NA  9.3244048 23.845934\n631  chic  70.0  66.25000 1988-09-22         NA         NA 17.4828928 33.468591\n632  chic  60.0  42.12500 1988-09-23         NA         NA 19.1754982 23.000000\n633  chic  56.5  42.87500 1988-09-24         NA  49.000000 15.4739583 29.601190\n634  chic  61.5  48.25000 1988-09-25         NA         NA 23.7855114 39.398810\n635  chic  64.5  45.87500 1988-09-26         NA         NA 34.8988095 46.051242\n636  chic  71.0  56.37500 1988-09-27         NA         NA 27.0079365 32.686688\n637  chic  61.5  51.62500 1988-09-28         NA         NA 17.5208333 19.273438\n638  chic  67.5  56.87500 1988-09-29         NA         NA 17.4947917 39.308475\n639  chic  68.5  60.75000 1988-09-30         NA  51.000000 12.7291667 37.405118\n640  chic  62.0  56.87500 1988-10-01         NA  12.000000 10.5555556 25.547619\n641  chic  56.5  45.00000 1988-10-02         NA  22.000000 19.6510417 17.700521\n642  chic  53.5  38.12500 1988-10-03         NA         NA  9.3627451 22.947917\n643  chic  43.0  30.25000 1988-10-04         NA  33.000000 11.7202381 15.961310\n644  chic  43.0  32.25000 1988-10-05         NA  30.000000 10.6024845 19.033514\n645  chic  43.5  32.75000 1988-10-06         NA  33.333333  9.6428571 27.538393\n646  chic  47.5  33.00000 1988-10-07         NA         NA 11.8630952 38.265625\n647  chic  52.0  41.12500 1988-10-08         NA  56.000000 12.6190476 36.348958\n648  chic  54.5  47.50000 1988-10-09         NA         NA 11.9404762 32.085145\n649  chic  58.0  34.62500 1988-10-10         NA  39.000000 20.7500000 17.321429\n650  chic  42.5  26.12500 1988-10-11         NA  48.000000 13.4940476 19.420327\n651  chic  39.0  24.37500 1988-10-12         NA  28.600000 14.5156250 23.563665\n652  chic  39.5  23.87500 1988-10-13         NA         NA 11.5275298 34.629329\n653  chic  58.0  42.25000 1988-10-14         NA  59.000000 18.2291667 37.372412\n654  chic  66.5  52.00000 1988-10-15         NA  51.000000 35.0357143 25.453416\n655  chic  62.5  47.87500 1988-10-16         NA  43.000000 26.0595238 21.145833\n656  chic  53.0  55.12500 1988-10-17         NA         NA  4.9166667 28.869048\n657  chic  49.5  36.37500 1988-10-18         NA  23.600000 11.1977814 18.823374\n658  chic  43.5  32.25000 1988-10-19         NA  28.000000 11.5705904 21.758172\n659  chic  42.0  37.87500 1988-10-20         NA  24.000000  6.6250000 28.053571\n660  chic  46.5  39.00000 1988-10-21         NA  31.000000  6.9270833 21.369048\n661  chic  42.0  32.50000 1988-10-22         NA  32.000000 10.2656250 20.755952\n662  chic  43.5  30.62500 1988-10-23         NA  30.000000 10.2500000 15.610119\n663  chic  33.5  27.12500 1988-10-24         NA  27.400000  7.1202857 16.566319\n664  chic  35.0  22.12500 1988-10-25         NA  34.000000  8.5989583 23.323596\n665  chic  36.5  26.00000 1988-10-26         NA  34.000000  7.0520833 24.903302\n666  chic  45.0  40.87500 1988-10-27         NA         NA  9.8437500 26.767187\n667  chic  37.0  21.00000 1988-10-28         NA  39.000000 13.5208333 19.648438\n668  chic  33.5  12.75000 1988-10-29         NA  28.000000 13.1250000 26.465580\n669  chic  33.0  25.87500 1988-10-30         NA  26.000000 10.5416667 29.012002\n670  chic  39.0  27.62500 1988-10-31         NA  36.000000  9.5200893 34.022321\n671  chic  40.0  28.00000 1988-11-01         NA  35.000000 12.5572917 22.751235\n672  chic  43.5  35.75000 1988-11-02         NA  28.000000 12.2068603 30.771212\n673  chic  50.5  50.62500 1988-11-03         NA  34.000000  3.3750000 36.061458\n674  chic  52.5  51.50000 1988-11-04         NA  28.000000  2.6470588 33.837121\n675  chic  41.5  36.12500 1988-11-05         NA  15.600000  2.7916667 13.997024\n676  chic  33.5  30.62500 1988-11-06         NA         NA 13.6250000 11.812500\n677  chic  39.0  38.00000 1988-11-07         NA  12.000000  5.8695652 23.990819\n678  chic  42.0  36.87500 1988-11-08         NA  40.000000  4.5416667 26.088542\n679  chic  43.5  46.00000 1988-11-09         NA  25.000000  2.3750000 29.333051\n680  chic  42.5  30.62500 1988-11-10         NA  15.000000  7.0416667 18.827381\n681  chic  39.5  29.25000 1988-11-11         NA  23.200000  8.9583333 23.127976\n682  chic  41.5  44.00000 1988-11-12         NA  15.000000  4.5416667 22.666667\n683  chic  45.0  40.87500 1988-11-13         NA  12.000000 10.5833333 16.845238\n684  chic  47.5  34.50000 1988-11-14         NA         NA  5.0833333 34.232660\n685  chic  56.0  60.37500 1988-11-15         NA         NA  2.9166667 25.966097\n686  chic  48.0  24.25000 1988-11-16         NA  23.000000 11.6250000 11.895221\n687  chic  38.5  28.12500 1988-11-17         NA  24.200000 10.2916667 23.708333\n688  chic  43.5  30.12500 1988-11-18         NA   9.000000  2.7083333 34.699905\n689  chic  44.0  40.12500 1988-11-19         NA  14.000000  2.3750000 27.343750\n690  chic  36.5  28.12500 1988-11-20         NA  21.000000  6.2500000 17.339725\n691  chic  33.0  23.37500 1988-11-21         NA  21.000000  5.4166667 26.420846\n692  chic  34.5  28.12500 1988-11-22         NA  31.000000  4.7500000 27.928125\n693  chic  41.5  35.50000 1988-11-23         NA  39.000000  3.4166667 31.905461\n694  chic  46.5  35.00000 1988-11-24         NA  22.000000  7.7916667 30.739583\n695  chic  49.0  44.37500 1988-11-25         NA  28.000000 13.0416667 35.718750\n696  chic  54.0  51.25000 1988-11-26         NA  13.000000 11.9166667 24.002604\n697  chic  37.0  25.00000 1988-11-27         NA   9.000000 14.9583333  8.270833\n698  chic  28.0  21.87500 1988-11-28         NA   6.000000  7.8333333 18.642083\n699  chic  33.5  31.37500 1988-11-29         NA  26.200000  7.1250000 24.430157\n700  chic  30.5  23.87500 1988-11-30         NA  22.000000  4.6250000 18.131341\n701  chic  23.5  16.37500 1988-12-01         NA  27.000000  8.2083333 22.111580\n702  chic  34.0  32.50000 1988-12-02         NA  29.000000  4.5833333 27.057065\n703  chic  43.0  26.00000 1988-12-03         NA         NA  9.2916667 21.880952\n704  chic  32.5  23.25000 1988-12-04         NA  23.000000  8.9166667 23.174479\n705  chic  38.5  31.25000 1988-12-05         NA  39.000000  3.8750000 23.238163\n706  chic  42.0  34.87500 1988-12-06         NA  40.000000  5.0000000 30.234375\n707  chic  35.0  20.00000 1988-12-07         NA  30.000000  6.6458333 25.661458\n708  chic  27.0  11.25000 1988-12-08         NA  40.000000  9.6666667 27.553571\n709  chic  21.5  14.25000 1988-12-09         NA  37.000000  6.4166667 24.369048\n710  chic  18.5   2.12500 1988-12-10         NA         NA  8.9166667 23.380952\n711  chic  11.0   6.12500 1988-12-11         NA  30.000000  7.0833333 23.927536\n712  chic  18.5  19.37500 1988-12-12         NA  29.000000  6.2500000 29.968168\n713  chic  34.5  28.62500 1988-12-13         NA  48.000000  5.3333333 26.555788\n714  chic  37.5  24.87500 1988-12-14         NA         NA  5.9166667 21.726190\n715  chic  18.0  -0.75000 1988-12-15         NA         NA 14.3500000 20.410102\n716  chic  10.5  12.12500 1988-12-16         NA  35.000000  6.5416667 26.809524\n717  chic  16.0   7.00000 1988-12-17         NA  25.400000  7.5416667 22.172619\n718  chic  22.0  21.87500 1988-12-18         NA  39.000000  4.8750000 24.250000\n719  chic  39.0  32.25000 1988-12-19         NA         NA 10.7916667 27.424784\n720  chic  44.5  27.00000 1988-12-20         NA         NA 12.6086957 16.398810\n721  chic  33.0  22.50000 1988-12-21         NA         NA 10.5000000 22.507846\n722  chic  36.0  38.75000 1988-12-22         NA         NA  4.2916667 23.353520\n723  chic  41.0  26.75000 1988-12-23         NA  23.000000 11.5652174 19.952381\n724  chic  33.5  26.50000 1988-12-24         NA         NA  4.5416667 24.803571\n725  chic  23.0  16.62500 1988-12-25         NA         NA 10.0833333 13.776656\n726  chic  27.0  29.87500 1988-12-26         NA         NA  9.0000000 23.785714\n727  chic  27.5  14.12500 1988-12-27         NA  27.000000  4.5000000 21.346435\n728  chic  14.5   6.87500 1988-12-28         NA  17.000000 13.1250000 23.037879\n729  chic  13.5  12.62500 1988-12-29         NA  29.666667  6.9473684 30.285673\n730  chic  24.5  21.87500 1988-12-30         NA         NA  5.6666667 35.900000\n731  chic  26.0  27.00000 1988-12-31         NA  61.000000  2.7500000 44.666667\n732  chic  26.5  26.87500 1989-01-01         NA  66.000000  9.3913043 33.131567\n733  chic  22.0  10.87500 1989-01-02         NA  28.000000 11.3333333 18.328125\n734  chic  23.0  15.75000 1989-01-03         NA         NA  7.8750000 22.615942\n735  chic  19.0  15.87500 1989-01-04         NA  43.400000  5.1250000 30.972661\n736  chic  29.5  31.87500 1989-01-05         NA  20.000000  3.1250000 33.144907\n737  chic  35.0  32.37500 1989-01-06         NA  27.000000  2.0000000 30.708333\n738  chic  40.0  39.62500 1989-01-07         NA         NA  2.8750000 25.794271\n739  chic  15.0   1.50000 1989-01-08         NA         NA 17.9583333  9.580729\n740  chic  16.5  14.62500 1989-01-09         NA  52.000000 13.4666667 20.080350\n741  chic  31.5  21.37500 1989-01-10         NA  37.428571  4.8666667 26.239394\n742  chic  34.5  37.37500 1989-01-11         NA  31.000000  8.5000000 25.424716\n743  chic  31.5  15.87500 1989-01-12         NA         NA  9.0000000 23.716486\n744  chic  26.0  17.62500 1989-01-13         NA         NA  6.4285714 27.541667\n745  chic  26.5  26.12500 1989-01-14         NA  20.000000  3.5833333 23.327381\n746  chic  29.5  23.87500 1989-01-15         NA         NA  7.6666667 15.029762\n747  chic  31.5  26.62500 1989-01-16         NA  27.142857  6.2500000 19.886905\n748  chic  37.0  29.12500 1989-01-17         NA  24.000000  6.9583333 24.775023\n749  chic  37.5  27.87500 1989-01-18         NA         NA  9.6956522 21.457860\n750  chic  38.0  30.12500 1989-01-19         NA         NA 11.2083333 22.241745\n751  chic  28.5  11.62500 1989-01-20         NA         NA 15.6250000 19.156250\n752  chic  26.5  19.75000 1989-01-21         NA  27.000000  8.3750000 28.190476\n753  chic  40.0  25.75000 1989-01-22         NA  22.875000  8.7500000 23.321429\n754  chic  41.5  32.62500 1989-01-23         NA  17.000000  4.9166667 33.184453\n755  chic  38.0  34.12500 1989-01-24         NA  45.000000  6.2272727 27.774715\n756  chic  42.5  42.25000 1989-01-25         NA  36.000000  5.4166667 24.188466\n757  chic  34.0  23.62500 1989-01-26         NA  37.000000  8.2500000 21.831245\n758  chic  37.0  30.75000 1989-01-27         NA  25.000000  7.5000000 26.568213\n759  chic  42.0  31.87500 1989-01-28         NA  27.125000  6.5833333 26.140625\n760  chic  40.0  37.75000 1989-01-29         NA         NA  3.5000000 20.546875\n761  chic  40.5  35.50000 1989-01-30         NA         NA  7.7916667 20.877944\n762  chic  52.5  44.12500 1989-01-31         NA         NA  9.8333333 24.047279\n763  chic  40.5  21.87500 1989-02-01         NA  12.000000 19.0000000 14.140077\n764  chic  25.5  20.37500 1989-02-02         NA  49.000000 16.0416667 19.109375\n765  chic  14.5   2.50000 1989-02-03         NA  20.571429 11.3888889 21.750000\n766  chic   4.5   2.00000 1989-02-04         NA  45.000000  6.5882353 22.322917\n767  chic   9.0   5.25000 1989-02-05         NA         NA  6.0833333 24.614583\n768  chic   2.0  -0.25000 1989-02-06         NA  32.000000 12.0000000 21.175663\n769  chic  12.0   9.12500 1989-02-07         NA  56.000000 14.7500000 28.512681\n770  chic  11.5  -3.75000 1989-02-08         NA  86.000000 17.0000000 16.970170\n771  chic   7.0   3.50000 1989-02-09         NA  34.857143 16.2727273 21.229167\n772  chic  15.0  12.37500 1989-02-10         NA  36.000000 14.3750000 28.448822\n773  chic  24.0  19.12500 1989-02-11         NA  33.000000 15.4166667 26.244048\n774  chic  26.5  16.87500 1989-02-12         NA  26.000000 15.0416667 27.875000\n775  chic  32.0  31.12500 1989-02-13         NA         NA  7.8750000 29.291667\n776  chic  27.5  20.75000 1989-02-14         NA  52.000000 19.2916667 25.646480\n777  chic  27.5  13.12500 1989-02-15         NA  30.125000  8.6250000 38.382162\n778  chic  17.5   1.87500 1989-02-16         NA  25.000000 11.4761905 31.580782\n779  chic  17.5  14.62500 1989-02-17         NA  13.000000 14.6250000 30.630952\n780  chic  22.0  20.87500 1989-02-18         NA  23.000000 16.9166667 30.636905\n781  chic  28.0  19.12500 1989-02-19         NA         NA 12.2916667 32.321429\n782  chic  27.0  25.25000 1989-02-20         NA         NA 16.9583333 33.077381\n783  chic  26.0  17.25000 1989-02-21         NA  43.750000 19.9583333 33.241300\n784  chic  17.0   1.62500 1989-02-22         NA  56.000000 21.3750000 25.635426\n785  chic  13.5  10.25000 1989-02-23         NA  37.000000 13.3333333 29.148592\n786  chic  13.0   9.12500 1989-02-24         NA  61.000000 12.7083333 42.183333\n787  chic  27.5  27.75000 1989-02-25         NA         NA 15.2500000 37.916667\n788  chic  28.5  15.87500 1989-02-26         NA         NA 28.7500000 17.974896\n789  chic  18.5  10.75000 1989-02-27         NA  33.714286 15.0714286 29.361134\n790  chic  23.0   8.50000 1989-02-28         NA  57.000000 18.0416667 28.443750\n791  chic  17.0   8.75000 1989-03-01         NA         NA 20.0588235 24.312554\n792  chic  21.5  20.00000 1989-03-02         NA  32.000000 16.6666667 28.958333\n793  chic  32.0  32.12500 1989-03-03         NA         NA 11.3333333 26.479167\n794  chic  34.5  24.37500 1989-03-04         NA  30.000000  7.2083333 23.521280\n795  chic  21.5  17.00000 1989-03-05         NA  13.625000 26.3750000 10.411458\n796  chic  26.0  14.62500 1989-03-06         NA  20.000000 33.3750000 12.715672\n797  chic  23.0  10.75000 1989-03-07         NA  41.000000 29.2916667 18.471354\n798  chic  26.5  18.62500 1989-03-08         NA  68.000000  9.8750000 40.875000\n799  chic  34.0  26.12500 1989-03-09         NA  77.000000  8.5416667 50.260160\n800  chic  42.5  32.50000 1989-03-10         NA         NA 13.4166667 46.658333\n801  chic  46.0  31.50000 1989-03-11         NA  73.333333  2.0000000 35.383333\n802  chic  35.0  29.25000 1989-03-12         NA  30.000000 36.2727273 20.083333\n803  chic  42.5  36.25000 1989-03-13         NA  43.000000 13.6363636 37.919508\n804  chic  47.0  47.50000 1989-03-14         NA         NA  8.0833333 40.225835\n805  chic  33.5  16.00000 1989-03-15         NA         NA 18.4583333 23.247056\n806  chic  35.5  27.25000 1989-03-16         NA  36.000000 12.3333333 31.843750\n807  chic  32.0  28.87500 1989-03-17         NA  19.500000 26.9583333 20.910069\n808  chic  24.5  17.37500 1989-03-18         NA  23.000000 26.8333333 22.921875\n809  chic  26.0  26.50000 1989-03-19         NA         NA 16.6666667 32.765625\n810  chic  32.5  22.62500 1989-03-20         NA  31.000000 22.2272727 30.658356\n811  chic  28.5  11.75000 1989-03-21         NA  22.000000 24.4166667 27.664062\n812  chic  32.0  22.75000 1989-03-22         NA  27.000000 12.0416667 42.647254\n813  chic  41.5  25.25000 1989-03-23         NA  58.428571 12.5416667 43.283333\n814  chic  48.5  36.25000 1989-03-24         NA  40.000000 11.3750000 42.343750\n815  chic  49.0  34.87500 1989-03-25         NA  41.000000 23.4166667 26.890625\n816  chic  55.5  54.75000 1989-03-26         NA         NA 35.3750000 30.815444\n817  chic  66.5  58.75000 1989-03-27         NA  22.000000 17.5791667 25.310606\n818  chic  60.5  56.50000 1989-03-28         NA  28.000000 12.8611111 22.358057\n819  chic  44.0  31.00000 1989-03-29         NA  15.000000 27.0411905 17.922101\n820  chic  42.0  33.00000 1989-03-30         NA  34.000000 17.4916667 23.254836\n821  chic  35.5  22.50000 1989-03-31         NA  32.000000 25.8437500 20.675000\n822  chic  36.5  33.87500 1989-04-01         NA  23.000000 23.1250000 28.447917\n823  chic  46.5  44.62500 1989-04-02         NA         NA 22.1250000 25.177083\n824  chic  47.0  47.25000 1989-04-03         NA         NA 13.2083333 33.152433\n825  chic  51.0  34.62500 1989-04-04         NA  32.625000 18.8260870 25.619630\n826  chic  41.0  35.50000 1989-04-05         NA  33.000000 19.3571429 26.593786\n827  chic  41.5  24.62500 1989-04-06         NA  50.000000 19.6091393 31.648438\n828  chic  40.0  27.75000 1989-04-07         NA  42.000000 22.1964286 26.520833\n829  chic  38.0  15.62500 1989-04-08         NA  35.000000 24.1369048 22.117188\n830  chic  29.5  13.37500 1989-04-09         NA         NA 27.6979167 10.464286\n831  chic  28.5  20.87500 1989-04-10         NA  29.375000 16.5362319 26.289773\n832  chic  37.0  28.87500 1989-04-11         NA  44.000000 23.2857143 26.154830\n833  chic  43.0  26.87500 1989-04-12         NA  31.000000 27.0295031 28.369318\n834  chic  41.0  19.37500 1989-04-13         NA  49.000000 21.7981293 38.743195\n835  chic  52.0  33.00000 1989-04-14         NA  39.000000 26.3273810 32.288826\n836  chic  48.5  30.50000 1989-04-15         NA  54.000000 25.5238095 39.182292\n837  chic  57.0  49.25000 1989-04-16         NA  46.125000 26.8333333 34.947917\n838  chic  48.5  31.87500 1989-04-17         NA  23.000000 30.9223602 23.834651\n839  chic  39.5  35.50000 1989-04-18         NA  49.000000 16.9464286 36.173897\n840  chic  43.5  19.25000 1989-04-19         NA  56.000000 18.8333333 41.239130\n841  chic  54.0  38.00000 1989-04-20         NA  69.000000 27.0153162 39.613839\n842  chic  53.0  36.12500 1989-04-21         NA  49.000000 31.4940476 32.758832\n843  chic  52.0  34.25000 1989-04-22         NA  44.375000 30.5520833 28.020833\n844  chic  50.5  31.37500 1989-04-23         NA  61.000000 33.4739583 21.828125\n845  chic  55.5  41.37500 1989-04-24         NA  74.000000 32.2716837 41.500045\n846  chic  62.5  52.37500 1989-04-25         NA         NA 36.3695652 36.867113\n847  chic  58.0  45.25000 1989-04-26         NA         NA 45.6166667 30.468006\n848  chic  54.0  43.00000 1989-04-27         NA  69.000000 34.6488095 33.197917\n849  chic  49.5  42.00000 1989-04-28         NA  39.714286 18.0773810 30.135417\n850  chic  55.5  42.00000 1989-04-29         NA         NA 19.6250000 25.786458\n851  chic  50.0  35.50000 1989-04-30         NA         NA 34.5892857 16.276042\n852  chic  47.5  33.25000 1989-05-01         NA  24.000000 32.0833333 23.185012\n853  chic  45.0  37.50000 1989-05-02         NA  26.000000 26.2521645 24.768643\n854  chic  53.5  32.62500 1989-05-03         NA         NA 24.7729861 32.222917\n855  chic  55.5  49.75000 1989-05-04         NA  46.250000 25.1884058 36.691168\n856  chic  50.5  19.87500 1989-05-05         NA         NA 30.9404762 17.119906\n857  chic  35.5  24.75000 1989-05-06         NA  33.000000 20.3333333 16.303571\n858  chic  43.0  35.75000 1989-05-07         NA         NA 18.2395833 17.247024\n859  chic  50.5  40.75000 1989-05-08         NA         NA 25.3214286 36.127145\n860  chic  50.5  25.37500 1989-05-09         NA  20.000000 33.8993742 20.221875\n861  chic  49.5  23.50000 1989-05-10         NA  27.000000 35.7142857 19.708807\n862  chic  48.0  20.25000 1989-05-11         NA         NA 33.7142857 21.791152\n863  chic  51.5  36.75000 1989-05-12         NA         NA 28.5654762 24.345170\n864  chic  52.0  43.25000 1989-05-13         NA  17.000000 30.4067460 17.739583\n865  chic  55.5  41.37500 1989-05-14         NA  65.000000 32.5654762 24.479167\n866  chic  56.0  43.75000 1989-05-15         NA         NA 27.6829945 42.913542\n867  chic  59.0  44.50000 1989-05-16         NA  79.875000 35.6324013 51.115530\n868  chic  63.5  45.37500 1989-05-17         NA  98.000000 47.1192094 44.950634\n869  chic  68.0  51.62500 1989-05-18         NA  99.000000 37.1689312 42.635681\n870  chic  65.5  61.75000 1989-05-19         NA  35.000000 30.0364583 33.068452\n871  chic  64.0  38.62500 1989-05-20         NA         NA 26.6510417 24.109375\n872  chic  64.5  44.75000 1989-05-21         NA  47.000000 33.5937500 30.791667\n873  chic  63.0  49.62500 1989-05-22         NA  65.250000 29.5115489 41.171463\n874  chic  69.0  42.87500 1989-05-23         NA  68.000000 37.8125000 43.731793\n875  chic  75.0  65.50000 1989-05-24         NA         NA 43.5929677 30.211180\n876  chic  67.5  60.87500 1989-05-25         NA  33.000000 26.3035038 35.524943\n877  chic  62.0  40.12500 1989-05-26         NA         NA 25.3372790 21.017203\n878  chic  56.0  39.62500 1989-05-27         NA  34.000000 26.1927083 18.997396\n879  chic  57.0  39.62500 1989-05-28         NA  33.000000 31.2362689 26.572917\n880  chic  67.5  68.25000 1989-05-29         NA         NA 39.0451389 20.273810\n881  chic  73.5  67.25000 1989-05-30         NA  25.000000 39.2528409 24.504735\n882  chic  75.0  66.50000 1989-05-31         NA         NA 26.3734149 27.027497\n883  chic  68.5  63.37500 1989-06-01         NA  28.000000 15.0260417 32.051989\n884  chic  67.5  52.50000 1989-06-02         NA         NA 29.6250000 30.962474\n885  chic  56.5  51.62500 1989-06-03         NA  29.000000 21.8095238 30.148810\n886  chic  62.5  49.50000 1989-06-04         NA         NA 27.7380952 24.324405\n887  chic  66.0  47.75000 1989-06-05         NA  79.000000 26.0000000 47.054422\n888  chic  71.0  51.50000 1989-06-06         NA         NA 31.7445652 37.759740\n889  chic  71.5  55.62500 1989-06-07         NA  89.000000 41.5553977 38.564182\n890  chic  73.0  57.87500 1989-06-08         NA         NA 43.9285714 32.883163\n891  chic  61.0  46.87500 1989-06-09         NA  38.750000 23.2723214 16.614583\n892  chic  58.5  43.75000 1989-06-10         NA         NA 21.0000000 13.846354\n893  chic  60.0  50.50000 1989-06-11         NA  35.000000 27.1927083 28.031250\n894  chic  66.0  62.75000 1989-06-12         NA  43.000000 23.6562500 32.299851\n895  chic  66.5  58.75000 1989-06-13         NA  45.000000 27.4881629 32.325613\n896  chic  64.0  52.37500 1989-06-14         NA         NA 30.8865901 28.597545\n897  chic  54.5  50.87500 1989-06-15         NA  27.714286 13.6884470 17.178646\n898  chic  61.0  46.75000 1989-06-16         NA  35.000000 14.6659873 22.341146\n899  chic  65.5  47.62500 1989-06-17         NA  43.000000 28.7438447 26.091146\n900  chic  72.5  62.25000 1989-06-18         NA         NA 32.8579545 23.989583\n901  chic  71.0  62.87500 1989-06-19         NA  26.000000 39.2457386 32.267889\n902  chic  68.5  60.87500 1989-06-20         NA  28.000000 49.6128472 23.752841\n903  chic  69.0  56.37500 1989-06-21         NA  57.428571 59.7272727 31.734420\n904  chic  79.0  64.37500 1989-06-22         NA         NA 47.6897998 34.139752\n905  chic  79.0  68.00000 1989-06-23         NA         NA 37.0714286 33.287817\n906  chic  75.0  59.37500 1989-06-24         NA         NA 35.4574830 21.880208\n907  chic  73.0  61.50000 1989-06-25         NA  53.000000 34.2785714 28.421875\n908  chic  77.5  64.00000 1989-06-26         NA  89.000000 32.4107143 34.561368\n909  chic  70.5  64.75000 1989-06-27         NA  51.428571 21.0649586 38.831813\n910  chic  64.5  46.25000 1989-06-28         NA  33.000000 20.5937500 22.972335\n911  chic  61.0  48.62500 1989-06-29         NA  28.000000 23.0620471 19.692142\n912  chic  65.5  52.12500 1989-06-30         NA         NA 32.8541667 39.770833\n913  chic  72.5  54.50000 1989-07-01         NA         NA 52.1754202 43.463542\n914  chic  73.5  66.25000 1989-07-02         NA  65.000000 47.3650794 32.291667\n915  chic  74.0  59.00000 1989-07-03         NA  57.285714 40.6269493 29.604959\n916  chic  75.0  50.50000 1989-07-04         NA         NA 35.1990741 23.815476\n917  chic  75.5  62.12500 1989-07-05         NA  59.000000 40.4074074 24.896861\n918  chic  79.0  63.25000 1989-07-06         NA  85.000000 48.0277778 43.898438\n919  chic  78.5  53.50000 1989-07-07         NA  56.000000 32.7301587 30.464286\n920  chic  75.0  65.62500 1989-07-08         NA  50.000000 33.4444444 31.011905\n921  chic  83.0  68.25000 1989-07-09         NA  57.750000 51.6203704 17.500000\n922  chic  86.5  61.37500 1989-07-10         NA  43.000000 46.5972222 21.520833\n923  chic  76.0  64.50000 1989-07-11         NA         NA 28.1481481 29.728316\n924  chic  71.0  62.12500 1989-07-12         NA         NA 26.3240741 23.802795\n925  chic  69.0  50.12500 1989-07-13         NA  21.000000 27.0740741 19.029601\n926  chic  68.0  45.62500 1989-07-14         NA  12.000000 23.0553543 19.071429\n927  chic  71.0  49.62500 1989-07-15         NA  30.000000 25.7083333 22.827381\n928  chic  72.5  48.87500 1989-07-16         NA  32.000000 36.1419173 25.357143\n929  chic  71.0  54.87500 1989-07-17         NA  68.000000 28.6607143 49.435096\n930  chic  70.0  60.75000 1989-07-18         NA  56.000000 36.1599327 35.933114\n931  chic  67.5  65.12500 1989-07-19         NA  47.000000 39.1399136 23.270442\n932  chic  67.5  61.37500 1989-07-20         NA  26.000000 31.4907407 12.909935\n933  chic  69.0  64.37500 1989-07-21         NA  41.500000 33.2037037 22.000000\n934  chic  74.0  63.75000 1989-07-22         NA  39.000000 36.4629630 26.234375\n935  chic  74.5  65.12500 1989-07-23         NA  54.000000 38.3842593 28.257812\n936  chic  77.0  68.75000 1989-07-24         NA  77.000000 43.4009662 34.942708\n937  chic  78.5  73.87500 1989-07-25         NA  55.000000 39.7708333 47.690632\n938  chic  79.5  72.37500 1989-07-26         NA  61.000000 20.7049366 34.765625\n939  chic  82.5  66.75000 1989-07-27         NA  43.000000 33.2653894 22.014699\n940  chic  67.5  57.50000 1989-07-28         NA  37.500000 30.7447917 13.877232\n941  chic  69.0  67.00000 1989-07-29         NA  29.000000 41.8593750 22.302083\n942  chic  71.5  61.00000 1989-07-30         NA  46.000000 44.9114583 11.157986\n943  chic  71.0  60.50000 1989-07-31         NA  69.000000 57.3072917 22.440104\n944  chic  72.5  60.12500 1989-08-01         NA  48.000000 51.7239583 33.779624\n945  chic  74.0  66.62500 1989-08-02         NA  74.625000 35.4218750 44.781250\n946  chic  79.5  72.62500 1989-08-03         NA  52.000000 27.7656250 24.544837\n947  chic  81.0  77.00000 1989-08-04         NA  64.000000 29.9948207 19.411458\n948  chic  77.0  66.00000 1989-08-05         NA  38.000000 38.1250000 20.600000\n949  chic  63.0  48.75000 1989-08-06         NA  25.000000 21.7361111 16.181548\n950  chic  62.0  50.25000 1989-08-07         NA  29.000000 23.3392857 24.750000\n951  chic  65.0  57.12500 1989-08-08         NA  50.500000 16.7261905 27.067857\n952  chic  70.5  58.75000 1989-08-09         NA  47.000000 21.5803571 39.669950\n953  chic  72.5  62.37500 1989-08-10         NA  50.000000 27.4490132 41.193277\n954  chic  70.5  62.25000 1989-08-11         NA  96.000000 31.1191878 55.905215\n955  chic  72.0  60.00000 1989-08-12         NA  86.000000 28.3072917 44.255208\n956  chic  71.0  62.50000 1989-08-13         NA  53.000000 35.2604167 32.130208\n957  chic  71.0  63.25000 1989-08-14         NA  58.375000 22.9237939 32.130952\n958  chic  69.0  61.62500 1989-08-15         NA  18.000000 20.8740530 21.213194\n959  chic  66.5  56.62500 1989-08-16         NA         NA 24.0667614 24.439062\n960  chic  66.0  55.87500 1989-08-17         NA  34.000000 24.6390399 24.461458\n961  chic  66.5  53.87500 1989-08-18         NA         NA 26.8630394 25.552083\n962  chic  67.5  60.87500 1989-08-19         NA         NA 36.1267361 27.572917\n963  chic  74.5  61.12500 1989-08-20         NA  37.571429 30.3863636 14.437500\n964  chic  74.0  65.50000 1989-08-21         NA  59.000000 27.8750000 32.084754\n965  chic  77.5  72.12500 1989-08-22         NA  31.000000 18.9051178 25.196237\n966  chic  70.5  63.00000 1989-08-23         NA  25.000000 28.1051136 19.040483\n967  chic  70.0  61.50000 1989-08-24         NA  37.000000 32.0291667 14.976326\n968  chic  70.0  58.25000 1989-08-25         NA         NA 31.7836792 20.432292\n969  chic  71.5  66.12500 1989-08-26         NA  49.285714 33.2083333 37.798532\n970  chic  74.5  69.25000 1989-08-27         NA  50.000000 35.8072917 30.450521\n971  chic  77.0  70.75000 1989-08-28         NA  49.000000 20.1197917 28.637153\n972  chic  75.0  60.75000 1989-08-29         NA  50.000000 16.7343750 22.375947\n973  chic  70.5  58.87500 1989-08-30         NA  54.000000 20.8645833 30.901042\n974  chic  72.5  67.62500 1989-08-31         NA  35.000000 19.1822917 31.488095\n975  chic  71.0  61.87500 1989-09-01         NA  21.875000 26.9270833 18.184508\n976  chic  64.0  50.50000 1989-09-02         NA  15.000000 24.0885417 14.822917\n977  chic  65.0  53.50000 1989-09-03         NA  23.000000 22.4947917 20.755208\n978  chic  68.0  62.25000 1989-09-04         NA  37.000000 28.7187500 21.976562\n979  chic  70.0  66.62500 1989-09-05         NA         NA 25.8906250 39.236639\n980  chic  71.5  69.87500 1989-09-06         NA  43.000000 15.4531250 30.396307\n981  chic  74.5  71.75000 1989-09-07         NA  57.142857 19.6809330 34.247218\n982  chic  76.5  69.00000 1989-09-08         NA  38.000000 17.5416667 29.098011\n983  chic  68.0  60.50000 1989-09-09         NA         NA 19.1250000 16.375000\n984  chic  63.0  51.25000 1989-09-10         NA  23.000000 16.7291667 14.429688\n985  chic  65.0  57.12500 1989-09-11         NA  40.000000 16.4375000 31.209280\n986  chic  60.5  45.62500 1989-09-12         NA  32.000000 18.8667037 21.208704\n987  chic  56.5  50.50000 1989-09-13         NA  14.000000 20.5534420 19.217957\n988  chic  58.0  51.37500 1989-09-14         NA  15.000000 21.6927083 16.773438\n989  chic  57.5  49.12500 1989-09-15         NA         NA 23.6576705 22.674953\n990  chic  59.5  51.87500 1989-09-16         NA  33.000000 22.8281250 28.169271\n991  chic  63.5  54.12500 1989-09-17         NA  51.000000 26.8273810 33.036458\n992  chic  65.0  55.75000 1989-09-18         NA  49.000000 31.7423469 44.815641\n993  chic  65.0  55.50000 1989-09-19         NA  47.500000 23.7050866 41.935033\n994  chic  65.5  56.87500 1989-09-20         NA  61.000000 27.3645833 43.975379\n995  chic  66.0  58.00000 1989-09-21         NA  76.000000 25.3958333 46.408267\n996  chic  61.5  44.75000 1989-09-22         NA 115.000000 25.1979167 31.972633\n997  chic  45.5  31.62500 1989-09-23         NA  35.000000 17.0625000 13.351562\n998  chic  48.0  36.75000 1989-09-24         NA  24.000000 12.8541667 24.095238\n999  chic  54.5  43.12500 1989-09-25         NA  46.625000 15.8125000 31.523263\n1000 chic  51.5  39.62500 1989-09-26         NA  24.000000 19.5104167 16.692595\n1001 chic  51.0  38.75000 1989-09-27         NA  41.000000 16.9895833 33.281629\n1002 chic  58.0  39.50000 1989-09-28         NA  53.000000 16.4046649 36.627976\n1003 chic  59.5  47.62500 1989-09-29         NA  37.000000 19.1302083 26.140625\n1004 chic  60.0  52.62500 1989-09-30         NA  45.000000 25.3452381 34.062500\n1005 chic  65.5  59.62500 1989-10-01         NA  51.714286 19.3511905 31.119792\n1006 chic  56.5  38.75000 1989-10-02         NA  54.500000  8.2031250 15.070833\n1007 chic  44.5  24.87500 1989-10-03         NA  41.500000 12.2031250 22.480881\n1008 chic  47.0  29.37500 1989-10-04         NA  69.000000 10.5999053 33.345833\n1009 chic  52.5  55.25000 1989-10-05         NA  46.000000  5.8925070 35.338542\n1010 chic  51.5  36.00000 1989-10-06         NA  25.000000 11.6995265 19.678883\n1011 chic  45.0  33.37500 1989-10-07         NA  23.857143 11.4375000 20.406250\n1012 chic  44.0  32.37500 1989-10-08         NA  22.500000 14.3593750 21.195312\n1013 chic  45.5  37.37500 1989-10-09         NA         NA 14.4270833 28.119792\n1014 chic  51.0  39.62500 1989-10-10         NA  39.000000 12.6302083 23.859860\n1015 chic  59.0  39.62500 1989-10-11         NA  52.000000 18.7395833 27.953125\n1016 chic  61.0  47.12500 1989-10-12         NA  58.000000 18.4791667 32.621686\n1017 chic  62.5  45.75000 1989-10-13         NA  91.875000 11.0416667 59.515625\n1018 chic  69.5  55.62500 1989-10-14         NA  62.000000 23.7916667 48.359375\n1019 chic  70.5  53.50000 1989-10-15         NA  47.500000 29.1354167 26.223958\n1020 chic  58.5  44.12500 1989-10-16         NA  27.000000 19.5357143 15.908659\n1021 chic  43.0  31.62500 1989-10-17         NA   9.500000 17.7007576 13.030324\n1022 chic  36.0  29.87500 1989-10-18         NA  13.500000 23.4285714 15.984848\n1023 chic  36.0  33.00000 1989-10-19         NA   9.375000 21.1371636 15.049172\n1024 chic  37.0  34.25000 1989-10-20         NA  19.000000  9.0515010 23.918737\n1025 chic  46.0  37.00000 1989-10-21         NA  29.000000 11.7321429 24.627976\n1026 chic  48.0  38.75000 1989-10-22         NA  20.500000 10.8750000 34.708333\n1027 chic  58.5  54.50000 1989-10-23         NA  40.000000 10.0357143 45.357143\n1028 chic  64.0  57.87500 1989-10-24         NA  47.500000 11.7857790 43.156446\n1029 chic  65.5  55.75000 1989-10-25         NA  52.625000 15.4166667 42.884502\n1030 chic  62.5  50.12500 1989-10-26         NA  64.000000 18.5564182 50.670996\n1031 chic  62.5  42.87500 1989-10-27         NA  66.500000 18.0535714 56.230072\n1032 chic  63.5  41.50000 1989-10-28         NA  52.500000 19.1964286 45.802083\n1033 chic  64.5  49.87500 1989-10-29         NA  44.500000 25.5654762 35.979167\n1034 chic  65.0  52.50000 1989-10-30         NA  42.000000 19.1845238 30.531250\n1035 chic  45.5  31.12500 1989-10-31         NA  24.000000  4.7500000 16.715744\n1036 chic  43.0  34.75000 1989-11-01         NA  32.000000  5.3750000 26.617898\n1037 chic  35.0  24.12500 1989-11-02         NA  25.000000  8.8333333 17.281114\n1038 chic  31.0  25.75000 1989-11-03         NA  27.000000  5.9583333 24.200284\n1039 chic  46.5  29.75000 1989-11-04         NA  27.500000  8.2916667 20.973958\n1040 chic  54.0  50.00000 1989-11-05         NA  35.500000 18.8333333 18.161458\n1041 chic  45.5  37.75000 1989-11-06         NA  26.250000  6.3913043 17.196483\n1042 chic  45.5  39.62500 1989-11-07         NA  28.000000  7.5416667 25.023398\n1043 chic  45.0  35.00000 1989-11-08         NA  26.000000  5.9166667 21.005303\n1044 chic  39.5  35.50000 1989-11-09         NA  20.000000  8.4583333 15.607481\n1045 chic  38.0  28.12500 1989-11-10         NA  25.000000  7.9583333 12.925595\n1046 chic  46.5  30.12500 1989-11-11         NA  28.000000  6.0833333 18.305556\n1047 chic  38.5  30.37500 1989-11-12         NA  19.000000  9.5833333 18.768750\n1048 chic  59.0  53.00000 1989-11-13         NA         NA 22.8333333 24.981291\n1049 chic  54.0  45.00000 1989-11-14         NA  26.500000  7.8333333 17.030419\n1050 chic  40.5  32.87500 1989-11-15         NA  15.000000  3.4444444 14.952863\n1051 chic  26.0  11.37500 1989-11-16         NA  11.000000 15.6250000 13.012309\n1052 chic  24.5  19.75000 1989-11-17         NA  34.500000  9.8333333 15.439878\n1053 chic  21.0  11.75000 1989-11-18         NA  21.571429 10.2291667 15.738095\n1054 chic  37.0  30.00000 1989-11-19         NA  25.500000  9.9583333 21.026786\n1055 chic  45.5  19.50000 1989-11-20         NA  43.500000 12.4375000 16.005952\n1056 chic  30.0  19.62500 1989-11-21         NA  29.000000 18.6666667 22.294203\n1057 chic  26.5  21.25000 1989-11-22         NA  24.000000 10.1666667 29.410229\n1058 chic  18.5  16.87500 1989-11-23         NA  29.000000 10.2500000 20.705729\n1059 chic  27.5  24.37500 1989-11-24         NA  29.285714  6.6250000 24.791667\n1060 chic  44.0  35.00000 1989-11-25         NA  31.500000  6.3750000 21.572917\n1061 chic  38.5  29.00000 1989-11-26         NA  23.000000  4.6666667 30.875000\n1062 chic  51.0  42.37500 1989-11-27         NA         NA  6.7916667 23.865845\n1063 chic  28.5  12.62500 1989-11-28         NA  25.500000 19.0000000 15.461222\n1064 chic  20.5  14.75000 1989-11-29         NA  20.000000  9.1250000 19.629261\n1065 chic  34.0  25.12500 1989-11-30         NA  32.500000  6.0833333 25.412341\n1066 chic  38.0  28.00000 1989-12-01         NA  49.000000  5.3750000 31.767857\n1067 chic  29.0   9.00000 1989-12-02         NA  52.000000 16.1250000 12.375000\n1068 chic  20.0   5.00000 1989-12-03         NA  14.000000 20.2500000 14.385417\n1069 chic  33.5  24.62500 1989-12-04         NA  31.000000  5.0416667 21.088068\n1070 chic  39.5  31.87500 1989-12-05         NA  38.000000  2.3333333 26.708333\n1071 chic  29.0   7.25000 1989-12-06         NA  24.250000 13.6666667 19.158535\n1072 chic  17.0   2.62500 1989-12-07         NA  32.000000 16.7916667 25.821558\n1073 chic  21.5  13.62500 1989-12-08         NA  37.500000 17.5416667 31.167655\n1074 chic  28.5  19.62500 1989-12-09         NA  30.500000  5.2083333 29.041667\n1075 chic  31.0  22.87500 1989-12-10         NA  26.000000 13.2500000 16.921875\n1076 chic  19.5   6.50000 1989-12-11         NA  35.000000 11.5416667 24.668252\n1077 chic  11.0   0.50000 1989-12-12         NA  38.714286  8.2916667 27.794508\n1078 chic  13.0  14.37500 1989-12-13         NA  43.000000  6.2916667 34.157835\n1079 chic   8.0  -6.87500 1989-12-14         NA  34.000000  5.4583333 24.205228\n1080 chic   3.5   2.62500 1989-12-15         NA  45.500000  8.8750000 26.696875\n1081 chic   2.5  -4.50000 1989-12-16         NA  33.000000  7.9583333 25.708333\n1082 chic   9.5   2.62500 1989-12-17         NA  31.000000  6.3333333 26.182292\n1083 chic   9.5   2.62500 1989-12-18         NA  43.875000  6.0833333 29.406250\n1084 chic   7.5  -3.62500 1989-12-19         NA  39.000000  9.0416667 30.132843\n1085 chic   0.0  -2.87500 1989-12-20         NA  22.500000 10.5000000 25.826746\n1086 chic  -6.5 -23.00000 1989-12-21         NA  49.000000 16.6666667 19.500000\n1087 chic  -4.5 -11.87500 1989-12-22         NA  49.000000  9.4166667 29.416667\n1088 chic  -1.0  -9.37500 1989-12-23         NA  38.000000  5.2500000 30.135417\n1089 chic   5.0   7.50000 1989-12-24         NA  25.166667  8.2916667 25.166667\n1090 chic  24.5  26.75000 1989-12-25         NA         NA 13.2083333 17.906250\n1091 chic  12.0   3.25000 1989-12-26         NA         NA 15.9583333 22.921082\n1092 chic  20.5  20.00000 1989-12-27         NA  34.000000 12.2500000 21.996280\n1093 chic  27.0  32.00000 1989-12-28         NA  20.000000  5.5833333 30.918964\n1094 chic  34.5  30.62500 1989-12-29         NA  40.000000  5.7500000 27.099432\n1095 chic  32.5  32.00000 1989-12-30         NA  38.000000  2.1666667 27.156250\n1096 chic  30.5  24.62500 1989-12-31         NA  42.000000  7.4583333 19.114583\n1097 chic  27.5  19.75000 1990-01-01         NA         NA 16.4166667 11.330729\n1098 chic  33.0  28.75000 1990-01-02         NA         NA  6.5416667 21.511905\n1099 chic  39.0  39.75000 1990-01-03         NA  37.000000  5.7916667 24.549242\n1100 chic  36.0  23.50000 1990-01-04         NA  23.500000  8.2500000 22.404356\n1101 chic  29.5  27.62500 1990-01-05         NA  35.142857  4.4583333 27.156250\n1102 chic  30.0  25.00000 1990-01-06         NA  42.500000  7.9166667 24.541667\n1103 chic  35.0  30.37500 1990-01-07         NA  27.000000  6.4583333 23.069940\n1104 chic  37.0  33.62500 1990-01-08         NA  28.000000  6.1250000 29.550858\n1105 chic  38.0  31.12500 1990-01-09         NA  30.000000  9.2916667 23.113765\n1106 chic  32.5  29.12500 1990-01-10         NA  28.000000  7.0416667 15.611526\n1107 chic  38.0  21.62500 1990-01-11         NA 104.625000 17.8750000 12.424479\n1108 chic  26.0  10.50000 1990-01-12         NA  55.000000 20.0833333 13.197917\n1109 chic  23.0  18.37500 1990-01-13         NA  18.000000  7.2500000 19.635417\n1110 chic  36.5  27.00000 1990-01-14         NA  23.000000  6.1250000 21.151042\n1111 chic  41.0  31.12500 1990-01-15         NA  44.000000  4.5416667 31.848958\n1112 chic  47.5  52.12500 1990-01-16         NA         NA  3.0833333 29.306386\n1113 chic  45.0  37.12500 1990-01-17         NA  27.000000 12.4583333 19.167572\n1114 chic  32.0  22.50000 1990-01-18         NA  37.000000 12.0416667 16.605161\n1115 chic  30.5  22.87500 1990-01-19         NA  48.000000  9.9583333 27.612798\n1116 chic  35.5  34.00000 1990-01-20         NA  31.500000  4.7916667 20.739583\n1117 chic  30.0  27.62500 1990-01-21         NA  16.000000  7.4375000 14.377604\n1118 chic  36.5  30.62500 1990-01-22         NA  19.500000  5.3125000 21.304564\n1119 chic  39.5  38.37500 1990-01-23         NA  34.250000  7.7916667 26.346354\n1120 chic  40.0  31.87500 1990-01-24         NA  18.500000  7.7916667 20.299479\n1121 chic  30.5  20.00000 1990-01-25         NA  22.000000 11.0555556 17.508117\n1122 chic  25.5  27.75000 1990-01-26         NA  30.000000  8.5000000 27.309524\n1123 chic  37.5  19.50000 1990-01-27         NA  25.000000 17.0000000 16.510417\n1124 chic  30.5  18.12500 1990-01-28         NA  27.000000  7.0416667 21.036458\n1125 chic  34.0  17.50000 1990-01-29         NA  50.125000  3.2916667 41.353039\n1126 chic  34.5  21.37500 1990-01-30         NA  28.500000  9.0869565 21.586215\n1127 chic  30.5  33.87500 1990-01-31         NA  35.000000  8.4583333 28.289025\n1128 chic  41.0  31.75000 1990-02-01         NA  32.000000 14.9583333 21.696332\n1129 chic  30.0  25.87500 1990-02-02         NA  32.000000 20.8333333 17.099977\n1130 chic  33.0  31.00000 1990-02-03         NA  25.500000  7.8750000 21.026042\n1131 chic  34.0  28.50000 1990-02-04         NA  20.875000 20.0416667 19.268229\n1132 chic  41.5  36.75000 1990-02-05         NA  24.000000  8.5416667 24.763258\n1133 chic  38.5  36.62500 1990-02-06         NA  31.500000  2.5000000 28.570340\n1134 chic  37.0  37.25000 1990-02-07         NA  36.500000  5.4583333 24.379386\n1135 chic  50.0  47.62500 1990-02-08         NA  31.000000 21.2500000 24.596875\n1136 chic  41.5  22.37500 1990-02-09         NA  40.000000 17.5416667 21.541667\n1137 chic  32.0  24.75000 1990-02-10         NA  23.375000 12.5000000 25.890625\n1138 chic  28.5  20.12500 1990-02-11         NA  29.500000 15.8750000 24.666667\n1139 chic  38.5  40.37500 1990-02-12         NA  36.000000  7.4166667 28.328125\n1140 chic  41.0  23.50000 1990-02-13         NA         NA 20.8750000 17.000710\n1141 chic  27.0  25.00000 1990-02-14         NA  14.000000 28.9166667 12.095342\n1142 chic  29.5  29.00000 1990-02-15         NA  22.500000 22.7500000 16.353074\n1143 chic  27.5  15.62500 1990-02-16         NA  23.500000 17.2916667 21.535486\n1144 chic  21.0  14.75000 1990-02-17         NA  22.000000 16.2916667 26.506944\n1145 chic  32.0  26.37500 1990-02-18         NA  28.000000 20.1666667 21.595238\n1146 chic  24.0   6.87500 1990-02-19         NA  30.500000 22.2916667 26.692708\n1147 chic  20.5  15.50000 1990-02-20         NA  53.000000  8.4761905 44.859046\n1148 chic  34.0  30.12500 1990-02-21         NA  30.500000  7.1250000 40.127936\n1149 chic  36.0  32.00000 1990-02-22         NA  23.000000 11.9166667 28.320749\n1150 chic  32.5  25.75000 1990-02-23         NA  19.000000 21.0416667 26.718750\n1151 chic  21.0  -2.50000 1990-02-24         NA  75.000000 29.1250000 11.471354\n1152 chic  11.0  -2.62500 1990-02-25         NA  23.500000 23.5000000 19.288690\n1153 chic  23.0  22.00000 1990-02-26         NA  25.000000 11.3750000 27.511732\n1154 chic  32.5  14.50000 1990-02-27         NA  34.000000 16.8333333 28.327536\n1155 chic  24.5  12.62500 1990-02-28         NA  31.500000 19.6666667 30.244339\n1156 chic  30.5  25.25000 1990-03-01         NA  35.000000 15.4583333 30.645833\n1157 chic  39.5  28.25000 1990-03-02         NA  44.000000 13.6666667 27.999337\n1158 chic  29.0   9.00000 1990-03-03         NA  20.500000 26.1666667 18.855729\n1159 chic  30.5  22.62500 1990-03-04         NA  33.000000 16.0416667 29.031250\n1160 chic  33.0  26.62500 1990-03-05         NA  24.500000 22.0416667 20.694792\n1161 chic  29.0  13.75000 1990-03-06         NA  28.333333 32.2500000 17.006168\n1162 chic  29.5  21.75000 1990-03-07         NA  41.500000 24.2916667 26.784400\n1163 chic  40.5  46.62500 1990-03-08         NA  29.000000  8.3636364 31.005855\n1164 chic  46.0  43.37500 1990-03-09         NA  33.000000  9.9583333 27.461466\n1165 chic  51.0  45.62500 1990-03-10         NA  36.000000  6.2916667 29.761905\n1166 chic  57.5  61.12500 1990-03-11         NA  26.500000 16.7083333 21.833333\n1167 chic  70.5  56.62500 1990-03-12         NA  26.857143 25.8750000 16.840368\n1168 chic  67.0  61.37500 1990-03-13         NA  28.500000 11.8888889 24.863122\n1169 chic  65.0  55.75000 1990-03-14         NA  27.000000 20.8333333 25.153341\n1170 chic  57.5  39.12500 1990-03-15         NA  20.500000 23.9166667 22.854167\n1171 chic  51.0  35.75000 1990-03-16         NA  28.000000 26.6250000 21.169196\n1172 chic  41.0  26.25000 1990-03-17         NA  26.000000 31.2083333  9.856771\n1173 chic  36.0  22.50000 1990-03-18         NA  16.285714 29.5416667 11.372396\n1174 chic  26.5  11.00000 1990-03-19         NA  27.500000 21.8095238 18.555999\n1175 chic  33.0  24.50000 1990-03-20         NA  35.000000 14.7979798 31.562405\n1176 chic  47.5  34.50000 1990-03-21         NA  44.000000 20.3020833 31.395154\n1177 chic  45.0  37.12500 1990-03-22         NA  36.000000 19.0666667 27.218750\n1178 chic  31.0   9.12500 1990-03-23         NA  28.000000 28.7297390 16.142992\n1179 chic  31.0  15.37500 1990-03-24         NA  25.625000 24.6145833 20.203125\n1180 chic  34.5  22.37500 1990-03-25         NA  26.000000 22.2656250 18.083333\n1181 chic  33.0  20.50000 1990-03-26         NA  19.000000 22.9702381 22.181839\n1182 chic  35.5  21.37500 1990-03-27         NA  58.000000 13.5286797 42.348958\n1183 chic  41.5  25.75000 1990-03-28         NA  41.000000 16.5923316 41.567708\n1184 chic  41.5  40.37500 1990-03-29         NA  39.000000 13.1904762 27.604167\n1185 chic  41.5  35.75000 1990-03-30         NA  38.000000 19.5449811 24.705348\n1186 chic  41.5  41.50000 1990-03-31         NA  57.000000 17.3281250 29.140625\n1187 chic  48.0  43.00000 1990-04-01         NA  34.000000 14.9583333 27.002976\n1188 chic  38.0  29.87500 1990-04-02         NA  17.500000 16.9702381 15.132143\n1189 chic  41.5  27.25000 1990-04-03         NA  27.000000 21.9166667 23.171372\n1190 chic  43.0  37.00000 1990-04-04         NA  46.000000 11.7029221 40.327381\n1191 chic  38.0  16.62500 1990-04-05         NA  29.625000 18.0476190 26.120748\n1192 chic  31.0  17.12500 1990-04-06         NA  37.500000 17.4345238 27.318452\n1193 chic  33.5  16.50000 1990-04-07         NA  23.000000 18.2023810 26.913690\n1194 chic  46.0  30.37500 1990-04-08         NA  28.000000 21.3630952 31.904762\n1195 chic  51.0  44.12500 1990-04-09         NA  36.000000 17.6562500 32.768892\n1196 chic  41.5  22.25000 1990-04-10         NA  23.000000 20.0476190 23.508023\n1197 chic  36.0  17.50000 1990-04-11         NA  25.428571 18.9979296 24.398810\n1198 chic  35.0  23.62500 1990-04-12         NA  28.500000 18.8750000 28.168245\n1199 chic  41.5  41.62500 1990-04-13         NA  32.000000 16.1845238 33.680556\n1200 chic  48.5  36.37500 1990-04-14         NA  32.000000 21.6428571 23.944444\n1201 chic  48.5  32.75000 1990-04-15         NA  37.000000 24.6964286 22.180556\n1202 chic  48.0  39.87500 1990-04-16         NA         NA 21.4254658 31.083333\n1203 chic  39.0  20.37500 1990-04-17         NA  25.750000 26.2782091 21.002200\n1204 chic  41.5  22.12500 1990-04-18         NA  30.000000 21.7968426 34.812771\n1205 chic  49.5  45.75000 1990-04-19         NA  40.000000 18.9802632 31.670455\n1206 chic  56.0  56.87500 1990-04-20         NA  29.500000  7.2409656 32.649940\n1207 chic  55.5  39.12500 1990-04-21         NA  28.000000 17.8988095 26.285714\n1208 chic  55.5  44.75000 1990-04-22         NA  95.000000 24.6904762 43.869048\n1209 chic  65.5  58.37500 1990-04-23         NA  50.125000 29.7797619 42.222222\n1210 chic  76.5  56.87500 1990-04-24         NA  41.500000 29.3750000 25.393892\n1211 chic  76.5  61.00000 1990-04-25         NA  58.000000 25.1488095 26.612013\n1212 chic  75.0  57.00000 1990-04-26         NA  53.000000 31.3214286 20.835910\n1213 chic  73.5  56.12500 1990-04-27         NA  61.000000 35.5238095 24.586735\n1214 chic  61.0  48.75000 1990-04-28         NA  26.000000 24.9464286 17.800595\n1215 chic  58.5  51.00000 1990-04-29         NA  33.142857 16.8273810 15.854167\n1216 chic  55.0  31.25000 1990-04-30         NA  47.000000 15.7916667 21.783550\n1217 chic  52.0  26.00000 1990-05-01         NA  55.000000 26.1469979 23.863672\n1218 chic  54.0  33.62500 1990-05-02         NA  61.500000 23.8750000 34.251553\n1219 chic  51.5  44.50000 1990-05-03         NA  55.000000 22.8333333 28.829710\n1220 chic  46.5  41.62500 1990-05-04         NA  21.500000 33.7708333 17.542749\n1221 chic  51.0  45.12500 1990-05-05         NA  34.125000 33.4427083 24.470238\n1222 chic  52.5  44.50000 1990-05-06         NA  26.000000 24.7656250 27.659864\n1223 chic  62.5  48.87500 1990-05-07         NA  49.000000 34.3876812 24.443237\n1224 chic  70.5  55.75000 1990-05-08         NA  63.000000 44.7321429 18.606710\n1225 chic  62.5  56.87500 1990-05-09         NA  80.000000 30.6502193 24.555556\n1226 chic  43.5  36.75000 1990-05-10         NA  17.000000 18.3802083 12.699405\n1227 chic  49.5  36.25000 1990-05-11         NA  32.250000 24.3593750 32.536616\n1228 chic  50.5  48.00000 1990-05-12         NA  26.500000 27.2812500 21.839209\n1229 chic  54.5  43.00000 1990-05-13         NA  33.000000 43.6822917 14.629167\n1230 chic  56.5  59.12500 1990-05-14         NA  27.500000 23.4732143 29.572619\n1231 chic  55.5  54.00000 1990-05-15         NA  51.500000 15.5449811 27.200560\n1232 chic  66.5  57.25000 1990-05-16         NA  26.500000 24.8910985 21.063889\n1233 chic  56.0  41.62500 1990-05-17         NA  71.000000 28.2552083 11.229167\n1234 chic  60.5  43.62500 1990-05-18         NA  60.000000 32.1225091 22.150794\n1235 chic  62.5  63.00000 1990-05-19         NA  25.000000 27.8593750 25.680556\n1236 chic  54.5  46.12500 1990-05-20         NA  17.000000 21.1145833 12.557143\n1237 chic  52.5  41.50000 1990-05-21         NA  15.000000 21.1145833 14.210921\n1238 chic  52.5  40.75000 1990-05-22         NA  18.500000 22.9424819 23.106061\n1239 chic  57.0  50.12500 1990-05-23         NA  52.625000 22.0389493 38.378586\n1240 chic  61.5  50.00000 1990-05-24         NA  47.000000 30.9958004 40.011905\n1241 chic  56.5  56.25000 1990-05-25         NA  39.000000 26.4177989 30.136128\n1242 chic  59.5  51.37500 1990-05-26         NA  46.500000 39.3120471 19.386905\n1243 chic  63.0  46.00000 1990-05-27         NA  41.000000 50.4166667 18.351190\n1244 chic  62.5  44.25000 1990-05-28         NA  28.000000 40.8072917 14.223214\n1245 chic  55.0  29.37500 1990-05-29         NA  28.875000 30.6116395 13.456263\n1246 chic  53.5  33.37500 1990-05-30         NA  41.000000 30.2343750 23.732649\n1247 chic  57.5  41.12500 1990-05-31         NA  68.000000 28.5939078 39.108586\n1248 chic  74.0  65.62500 1990-06-01         NA  59.000000 36.8697917 31.070449\n1249 chic  74.5  55.62500 1990-06-02         NA  85.000000 30.5052083 15.027778\n1250 chic  61.0  41.50000 1990-06-03         NA 103.000000 25.8430060  7.572313\n1251 chic  53.0  30.62500 1990-06-04         NA  25.285714 22.7154768 17.919571\n1252 chic  53.0  51.37500 1990-06-05         NA  38.000000 14.0112607 34.449517\n1253 chic  69.0  48.87500 1990-06-06         NA  50.000000 20.3778409 30.368687\n1254 chic  65.5  53.87500 1990-06-07         NA  46.500000 23.6444129 32.475694\n1255 chic  70.0  63.87500 1990-06-08         NA  51.000000 19.4300272 30.607076\n1256 chic  72.5  55.00000 1990-06-09         NA  33.500000 32.3802083 20.135417\n1257 chic  64.5  50.75000 1990-06-10         NA  17.875000 31.8593750 15.989583\n1258 chic  65.5  55.37500 1990-06-11         NA  41.500000 30.4062500 32.868056\n1259 chic  78.0  62.50000 1990-06-12         NA  92.000000 46.6278409 24.644626\n1260 chic  81.5  69.00000 1990-06-13         NA  60.000000 48.7223011 23.750000\n1261 chic  71.0  61.50000 1990-06-14         NA  27.000000 32.2699275 21.806263\n1262 chic  71.0  57.87500 1990-06-15         NA  40.500000 35.6954257 29.458829\n1263 chic  74.0  68.87500 1990-06-16         NA  54.875000 35.3645833 29.697917\n1264 chic  78.5  71.37500 1990-06-17         NA  37.500000 41.7187500  8.930060\n1265 chic  71.0  55.87500 1990-06-18         NA  34.000000 33.8009511 12.604861\n1266 chic  63.0  52.87500 1990-06-19         NA  31.500000 19.3286397 20.478261\n1267 chic  69.0  63.87500 1990-06-20         NA  32.000000 21.5208333 26.152778\n1268 chic  72.0  62.75000 1990-06-21         NA  41.500000 19.4360795 26.902942\n1269 chic  66.5  57.12500 1990-06-22         NA  24.571429 20.2812500 18.977959\n1270 chic  65.0  54.87500 1990-06-23         NA  28.500000 18.9791667  9.333333\n1271 chic  64.0  45.75000 1990-06-24         NA  27.000000 23.2500000 18.135417\n1272 chic  69.5  58.50000 1990-06-25         NA  37.000000 23.5208333 30.632842\n1273 chic  75.5  69.37500 1990-06-26         NA  42.000000 29.9338235 29.974508\n1274 chic  74.5  55.62500 1990-06-27         NA  43.000000 30.7291667 32.912563\n1275 chic  72.5  68.12500 1990-06-28         NA  52.375000 29.3489583 32.902929\n1276 chic  73.5  69.12500 1990-06-29         NA  21.500000 33.5354167 27.320350\n1277 chic  80.0  70.37500 1990-06-30         NA  40.000000 35.3281250 24.381944\n1278 chic  66.5  55.50000 1990-07-01         NA  18.000000 20.7135417 11.256944\n1279 chic  69.5  61.25000 1990-07-02         NA  36.000000 29.0285326 25.829861\n1280 chic  77.0  71.75000 1990-07-03         NA  51.500000 47.4022974 28.624303\n1281 chic  86.5  73.37500 1990-07-04         NA  60.625000 52.2291667 12.816789\n1282 chic  73.5  55.25000 1990-07-05         NA  33.000000 29.0260417 17.532382\n1283 chic  63.0  50.12500 1990-07-06         NA  16.000000 21.2667572 11.829861\n1284 chic  67.0  57.37500 1990-07-07         NA  28.000000 31.7291667 19.225694\n1285 chic  83.5  70.62500 1990-07-08         NA  53.000000 45.2500000 14.961806\n1286 chic  81.0  64.00000 1990-07-09         NA  38.500000 37.3697917 22.283252\n1287 chic  70.5  61.62500 1990-07-10         NA  37.500000 23.7755888 27.036859\n1288 chic  67.0  54.87500 1990-07-11         NA  17.000000 28.3072917 15.128517\n1289 chic  66.0  54.62500 1990-07-12         NA  18.000000 24.4627193 11.504816\n1290 chic  62.5  53.62500 1990-07-13         NA  13.000000 22.9739583 13.714286\n1291 chic  62.0  58.75000 1990-07-14         NA  28.000000 17.2080270 15.122024\n1292 chic  65.0  62.12500 1990-07-15         NA  29.000000 16.0677083 22.458333\n1293 chic  70.5  68.50000 1990-07-16         NA  32.250000 27.1086957 25.846014\n1294 chic  78.0  63.75000 1990-07-17         NA  41.000000 41.4218750 25.167831\n1295 chic  78.5  67.62500 1990-07-18         NA  47.000000 26.3803282 29.241071\n1296 chic  77.5  68.00000 1990-07-19         NA  47.500000 18.4901316 26.910714\n1297 chic  68.0  63.25000 1990-07-20         NA  20.000000 19.5520833 22.897998\n1298 chic  69.5  57.87500 1990-07-21         NA  24.000000 23.6242560 21.122024\n1299 chic  68.5  61.00000 1990-07-22         NA  15.375000 29.3750000 12.035714\n1300 chic  68.5  57.75000 1990-07-23         NA  36.500000 20.2110919 26.303258\n1301 chic  69.5  61.50000 1990-07-24         NA  48.000000 18.6197917 34.357483\n1302 chic  72.0  63.00000 1990-07-25         NA  37.500000 24.8831198 32.579099\n1303 chic  75.5  62.50000 1990-07-26         NA  51.000000 31.2620389 30.907468\n1304 chic  74.5  65.75000 1990-07-27         NA  74.000000 47.5416667 30.035714\n1305 chic  79.0  70.50000 1990-07-28         NA  87.750000 51.0833333 21.339286\n1306 chic  79.5  70.37500 1990-07-29         NA  55.000000 33.1562500 13.559524\n1307 chic  69.5  58.12500 1990-07-30         NA  23.000000 18.5758929 10.316249\n1308 chic  62.0  49.62500 1990-07-31         NA  14.500000 18.9055707 11.766810\n1309 chic  63.5  57.62500 1990-08-01         NA  42.000000 23.1309524 22.557065\n1310 chic  69.0  57.37500 1990-08-02         NA  38.000000 31.1622024 30.434524\n1311 chic  75.5  69.37500 1990-08-03         NA  66.000000 38.2696687 30.567177\n1312 chic  76.5  66.00000 1990-08-04         NA  19.000000 28.8958333 28.666667\n1313 chic  68.5  57.75000 1990-08-05         NA  13.000000 20.0451389 11.267857\n1314 chic  61.0  49.62500 1990-08-06         NA   9.500000 17.3671875 10.600298\n1315 chic  63.5  54.50000 1990-08-07         NA  38.000000 19.7537879 24.015847\n1316 chic  69.0  56.00000 1990-08-08         NA  48.500000 21.4490166 36.179113\n1317 chic  69.0  56.50000 1990-08-09         NA  55.857143 33.7916667 38.496212\n1318 chic  72.0  63.62500 1990-08-10         NA  45.000000 38.1458333 42.395833\n1319 chic  73.0  65.37500 1990-08-11         NA  60.500000 48.1458333 21.114583\n1320 chic  68.5  64.25000 1990-08-12         NA  29.000000 31.2291667 22.812500\n1321 chic  63.0  51.37500 1990-08-13         NA  20.500000 17.1960565 13.273552\n1322 chic  65.5  62.12500 1990-08-14         NA  26.000000 17.1834239 21.779796\n1323 chic  74.5  66.75000 1990-08-15         NA  54.285714 28.4107143 20.538690\n1324 chic  73.0  68.62500 1990-08-16         NA  55.000000 30.9642857 23.191558\n1325 chic  72.0  71.00000 1990-08-17         NA  40.500000 15.0833333 22.753364\n1326 chic  80.5  75.25000 1990-08-18         NA  25.000000 35.1614583 18.988095\n1327 chic  75.5  68.50000 1990-08-19         NA  18.500000 31.4375000  7.735119\n1328 chic  71.5  69.37500 1990-08-20         NA  16.000000 12.1406250 13.810606\n1329 chic  68.0  66.25000 1990-08-21         NA  18.500000  9.8333333 11.780110\n1330 chic  69.0  63.25000 1990-08-22         NA  21.500000 24.9314182 13.732639\n1331 chic  70.5  64.25000 1990-08-23         NA  39.000000 24.1517210 20.280770\n1332 chic  75.0  67.12500 1990-08-24         NA  28.000000 25.9180254 28.451389\n1333 chic  76.5  69.75000 1990-08-25         NA  50.000000 29.7497736 25.069444\n1334 chic  78.5  73.25000 1990-08-26         NA  82.000000 42.1190476 18.766455\n1335 chic  82.5  75.87500 1990-08-27         NA  90.285714 36.3097826 22.996683\n1336 chic  82.5  70.50000 1990-08-28         NA  53.500000 33.4047619 22.595833\n1337 chic  75.5  57.87500 1990-08-29         NA  36.000000 29.4863807 21.707477\n1338 chic  69.0  53.87500 1990-08-30         NA  25.500000 40.9166667 30.166667\n1339 chic  70.0  60.75000 1990-08-31         NA  58.000000 50.6388889 46.194444\n1340 chic  78.0  69.12500 1990-09-01         NA  64.000000 39.8802083 34.777778\n1341 chic  73.0  61.25000 1990-09-02         NA  34.166667 24.2410714 21.437500\n1342 chic  71.0  60.87500 1990-09-03         NA  23.500000 22.8571429 23.027778\n1343 chic  79.0  73.37500 1990-09-04         NA  84.000000 28.5654762 29.381121\n1344 chic  77.0  69.12500 1990-09-05         NA  52.000000 30.8928571 25.943182\n1345 chic  83.0  70.50000 1990-09-06         NA  56.500000 30.6738095 31.047619\n1346 chic  72.0  63.25000 1990-09-07         NA  13.500000 28.5781250 14.495942\n1347 chic  72.0  64.62500 1990-09-08         NA  41.000000 19.7447917 17.431548\n1348 chic  73.0  65.75000 1990-09-09         NA  43.000000 22.6979167 26.473214\n1349 chic  75.5  68.37500 1990-09-10         NA  69.000000 36.1736111 34.218795\n1350 chic  74.0  67.87500 1990-09-11         NA  58.500000 30.3722826 22.125129\n1351 chic  74.5  64.50000 1990-09-12         NA  94.000000 28.3810688 42.130952\n1352 chic  74.5  65.62500 1990-09-13         NA  69.500000 25.1390399 39.066259\n1353 chic  65.5  54.62500 1990-09-14         NA  38.625000 15.2864583 15.576441\n1354 chic  63.0  54.00000 1990-09-15         NA  23.500000 15.2968750 18.491071\n1355 chic  57.0  47.50000 1990-09-16         NA  10.500000 20.3645833 11.820833\n1356 chic  56.0  46.25000 1990-09-17         NA  19.000000 17.7500000 17.892857\n1357 chic  55.5  49.87500 1990-09-18         NA  17.000000 11.8961730 28.154374\n1358 chic  57.5  50.50000 1990-09-19         NA  28.000000  5.5066288 19.921433\n1359 chic  59.5  50.75000 1990-09-20         NA  37.428571 17.2822176 30.337407\n1360 chic  62.0  46.62500 1990-09-21         NA  26.000000 10.5535714 29.527778\n1361 chic  56.5  42.25000 1990-09-22         NA  21.000000  9.0476190 17.843750\n1362 chic  50.5  35.25000 1990-09-23         NA  17.500000 15.3273810 16.111111\n1363 chic  53.5  38.50000 1990-09-24         NA  34.000000 16.8979592 24.854437\n1364 chic  67.0  51.75000 1990-09-25         NA  42.000000 20.9642857 25.738095\n1365 chic  67.5  52.62500 1990-09-26         NA  46.875000 14.6785714 31.351732\n1366 chic  65.5  51.75000 1990-09-27         NA  45.500000 19.6007493 40.898026\n1367 chic  61.0  54.12500 1990-09-28         NA  48.000000 18.1815908 26.439218\n1368 chic  58.5  51.12500 1990-09-29         NA  12.500000 15.2738095 10.381944\n1369 chic  52.5  40.25000 1990-09-30         NA  17.000000 11.7440476 14.177976\n1370 chic  57.0  38.25000 1990-10-01         NA  43.500000  9.4800725 26.854814\n1371 chic  56.5  41.12500 1990-10-02         NA  47.750000 15.4671325 34.520526\n1372 chic  67.0  58.12500 1990-10-03         NA  28.500000 21.6568323 21.453487\n1373 chic  57.5  40.50000 1990-10-04         NA  32.000000 10.2678571 18.399660\n1374 chic  68.5  55.00000 1990-10-05         NA  29.000000 24.3452381 21.010359\n1375 chic  75.0  56.37500 1990-10-06         NA  39.000000 34.9464286 15.423137\n1376 chic  55.0  48.50000 1990-10-07         NA   5.500000 20.2380952  6.726172\n1377 chic  50.5  46.75000 1990-10-08         NA   8.000000 13.0238095  9.726190\n1378 chic  47.0  43.50000 1990-10-09         NA         NA 20.1283644 10.336310\n1379 chic  41.5  35.25000 1990-10-10         NA  10.000000 11.2440476 11.947360\n1380 chic  46.5  35.87500 1990-10-11         NA  46.500000  9.4216486 28.239130\n1381 chic  48.5  42.12500 1990-10-12         NA  65.000000  9.6262940 41.480590\n1382 chic  52.0  45.37500 1990-10-13         NA  50.500000 14.8392857 30.982143\n1383 chic  53.5  48.50000 1990-10-14         NA  25.857143 18.3214286 20.589286\n1384 chic  51.0  40.62500 1990-10-15         NA  30.500000  5.0195578 21.789441\n1385 chic  56.0  52.25000 1990-10-16         NA  27.000000 13.2440476 26.627976\n1386 chic  65.0  55.37500 1990-10-17         NA  45.000000 34.6726190 17.565476\n1387 chic  43.0  28.87500 1990-10-18         NA  16.500000 13.5595238  8.327252\n1388 chic  40.5  32.87500 1990-10-19         NA  21.000000  7.9285714 21.467885\n1389 chic  54.5  36.00000 1990-10-20         NA  26.625000 13.8750000 21.349915\n1390 chic  49.0  37.00000 1990-10-21         NA  25.000000 15.5535714 13.488095\n1391 chic  43.5  33.87500 1990-10-22         NA  47.000000  8.4047619 24.833722\n1392 chic  46.5  37.62500 1990-10-23         NA  49.000000  6.7343074 32.386669\n1393 chic  46.5  33.50000 1990-10-24         NA  36.000000  9.0613354 21.383929\n1394 chic  40.0  31.75000 1990-10-25         NA  22.000000  9.7797619 19.250000\n1395 chic  41.0  31.12500 1990-10-26         NA  45.625000  6.2313665 27.047675\n1396 chic  52.5  33.00000 1990-10-27         NA  51.000000 13.6369048 14.878472\n1397 chic  41.0  28.62500 1990-10-28         NA  17.000000 12.9166667 14.854167\n1398 chic  45.5  30.62500 1990-10-29         NA  29.500000  7.7142857 24.482639\n1399 chic  60.0  48.87500 1990-10-30         NA  58.000000 16.7673395 31.951389\n1400 chic  58.0  49.62500 1990-10-31         NA  63.500000 10.2857143 41.683717\n1401 chic  60.0  44.12500 1990-11-01         NA  60.428571 23.0416667 29.623188\n1402 chic  65.5  52.37500 1990-11-02         NA  49.500000 26.5416667 27.980676\n1403 chic  59.5  51.12500 1990-11-03         NA  44.000000 19.2083333 22.263889\n1404 chic  42.0  38.50000 1990-11-04         NA   4.000000 19.6666667  7.350000\n1405 chic  39.5  32.62500 1990-11-05         NA   9.000000 16.3333333 10.201994\n1406 chic  36.5  35.00000 1990-11-06         NA  24.000000  5.2500000 18.553571\n1407 chic  34.0  20.37500 1990-11-07         NA  26.714286 10.2916667 14.727336\n1408 chic  31.5  27.00000 1990-11-08         NA  33.500000  3.3333333 23.841335\n1409 chic  37.0  33.00000 1990-11-09         NA  29.000000  2.1250000 19.180556\n1410 chic  40.5  22.00000 1990-11-10         NA  27.000000  7.7500000 17.361111\n1411 chic  37.5  28.87500 1990-11-11         NA  20.000000  7.1250000 20.291667\n1412 chic  38.0  17.12500 1990-11-12         NA         NA  9.9583333 23.079861\n1413 chic  38.0  29.87500 1990-11-13         NA  43.250000  7.8333333 27.085639\n1414 chic  51.0  38.50000 1990-11-14         NA  40.500000  5.9166667 30.977226\n1415 chic  61.0  49.50000 1990-11-15         NA  47.000000 26.0416667 25.678075\n1416 chic  47.5  32.00000 1990-11-16         NA  38.000000 13.3750000 19.394571\n1417 chic  42.0  29.62500 1990-11-17         NA  25.000000 10.2083333 23.487500\n1418 chic  45.5  33.12500 1990-11-18         NA  31.000000  8.1250000 26.533333\n1419 chic  44.0  38.50000 1990-11-19         NA  58.571429  3.0833333 27.663812\n1420 chic  44.5  42.25000 1990-11-20         NA  48.000000  6.2083333 32.360119\n1421 chic  59.5  53.25000 1990-11-21         NA  35.000000 11.0416667 22.336806\n1422 chic  43.5  32.25000 1990-11-22         NA  27.500000  8.1666667 16.687500\n1423 chic  42.0  17.37500 1990-11-23         NA  18.000000 15.4166667 11.638636\n1424 chic  42.0  30.00000 1990-11-24         NA         NA  3.8333333 20.591667\n1425 chic  44.5  28.62500 1990-11-25         NA  26.625000 11.9583333 14.212500\n1426 chic  53.0  58.50000 1990-11-26         NA         NA  8.0000000 19.895833\n1427 chic  61.0  57.62500 1990-11-27         NA  12.000000  6.5000000 22.154762\n1428 chic  39.5  22.12500 1990-11-28         NA  17.000000  8.9545455 15.066288\n1429 chic  31.5  23.62500 1990-11-29         NA  31.000000  5.2500000 21.758333\n1430 chic  41.0  29.87500 1990-11-30         NA  21.500000  9.6250000 21.858333\n1431 chic  40.5  28.12500 1990-12-01         NA  19.000000  8.8333333 20.125000\n1432 chic  33.0  24.62500 1990-12-02         NA  14.000000 19.2500000 11.841667\n1433 chic  33.0  25.75000 1990-12-03         NA  24.000000 14.8750000 12.844697\n1434 chic  22.0  13.25000 1990-12-04         NA  24.000000 18.7083333 19.591502\n1435 chic  28.5  29.37500 1990-12-05         NA  27.000000  5.5416667 27.125000\n1436 chic  29.5  16.12500 1990-12-06         NA  30.500000  8.1250000 24.715278\n1437 chic  31.0  27.75000 1990-12-07         NA  28.857143  4.2173913 24.773737\n1438 chic  37.0  29.12500 1990-12-08         NA  32.500000  3.7500000 24.658333\n1439 chic  43.0  31.00000 1990-12-09         NA  28.000000  6.4166667 24.000000\n1440 chic  39.5  29.75000 1990-12-10         NA  24.500000 11.4166667 27.716766\n1441 chic  44.0  40.37500 1990-12-11         NA  33.000000  7.9565217 31.505736\n1442 chic  45.5  35.87500 1990-12-12         NA  35.000000 14.2941176 23.839869\n1443 chic  30.5  18.25000 1990-12-13         NA  16.571429 15.2083333 15.821759\n1444 chic  30.5  26.37500 1990-12-14         NA  19.500000 11.2173913 20.389997\n1445 chic  39.5  32.00000 1990-12-15         NA  18.000000  4.0000000 14.595238\n1446 chic  34.5  28.87500 1990-12-16         NA  22.500000 11.7500000 13.523810\n1447 chic  36.5  36.25000 1990-12-17         NA  16.000000  3.1250000 14.784632\n1448 chic  34.0  27.00000 1990-12-18         NA  24.500000  5.3750000 12.472364\n1449 chic  31.0  27.00000 1990-12-19         NA  28.333333  6.5000000 20.453204\n1450 chic  40.0  42.25000 1990-12-20         NA  25.000000  6.6666667 20.804607\n1451 chic  38.0  38.62500 1990-12-21         NA  29.500000  3.4166667 19.880952\n1452 chic  17.0   0.75000 1990-12-22         NA  24.000000  9.8333333 14.386905\n1453 chic   7.0  -3.75000 1990-12-23         NA  40.000000 17.4166667 12.949405\n1454 chic   8.0   7.75000 1990-12-24         NA         NA 14.4166667 12.645833\n1455 chic  14.5  -7.87500 1990-12-25         NA  20.428571 13.8750000 11.725694\n1456 chic   3.5  -6.50000 1990-12-26         NA         NA 11.8333333 21.792723\n1457 chic  17.5  16.75000 1990-12-27         NA  18.000000 11.4583333 26.708694\n1458 chic  31.0  30.87500 1990-12-28         NA  28.000000  2.7916667 22.010743\n1459 chic  33.5  30.00000 1990-12-29         NA  12.500000  3.6250000 12.951389\n1460 chic  15.0   2.62500 1990-12-30         NA         NA 12.1041667 10.236111\n1461 chic   8.0   5.00000 1990-12-31         NA  26.250000 11.7732843 17.360975\n1462 chic  20.5  19.00000 1991-01-01         NA         NA 11.0769231 18.966667\n1463 chic  16.0   6.62500 1991-01-02         NA         NA  9.8750000 24.272879\n1464 chic   6.5   0.50000 1991-01-03         NA         NA  9.2500000 23.015530\n1465 chic  14.0  11.50000 1991-01-04         NA  43.000000  6.8750000 26.783081\n1466 chic  25.5  21.62500 1991-01-05         NA         NA  3.9583333 24.250000\n1467 chic  20.5  13.62500 1991-01-06         NA  27.000000 14.6250000 22.632738\n1468 chic  21.5  17.50000 1991-01-07         NA         NA 22.0000000 19.851537\n1469 chic  25.5  27.37500 1991-01-08         NA  28.500000 11.2916667 24.282738\n1470 chic  24.0  18.00000 1991-01-09         NA  37.000000  4.7916667 22.935516\n1471 chic  22.0  26.12500 1991-01-10         NA  35.500000 10.1250000 23.478535\n1472 chic  29.5  26.62500 1991-01-11         NA  24.000000  8.6250000 17.697718\n1473 chic  25.5  22.00000 1991-01-12         NA  23.000000  9.1666667 22.708333\n1474 chic  24.5  26.87500 1991-01-13         NA  33.000000 10.7083333 20.944444\n1475 chic  31.5  27.12500 1991-01-14         NA  44.500000  7.7083333 27.758152\n1476 chic  30.5  31.62500 1991-01-15         NA  46.000000  4.6666667 30.881944\n1477 chic  31.0  25.75000 1991-01-16         NA  31.500000 10.9583333 21.731129\n1478 chic  26.0  18.75000 1991-01-17         NA  34.000000 12.3333333 19.332931\n1479 chic  21.5  24.00000 1991-01-18         NA  33.428571  9.4166667 25.655303\n1480 chic  36.5  29.62500 1991-01-19         NA  19.000000 14.5000000 24.072917\n1481 chic  26.5  18.62500 1991-01-20         NA  25.000000 18.7916667 17.966667\n1482 chic  10.5  -1.50000 1991-01-21         NA  27.000000 20.2916667 19.875000\n1483 chic  11.0  12.00000 1991-01-22         NA  55.000000  7.8750000 26.291667\n1484 chic  21.5   5.75000 1991-01-23         NA  34.000000 14.1666667 15.030303\n1485 chic   9.0  -5.75000 1991-01-24         NA  34.750000 13.9166667 26.574621\n1486 chic   7.5  -2.37500 1991-01-25         NA  55.000000  9.9166667 32.636580\n1487 chic  15.5   9.25000 1991-01-26         NA  41.000000 12.5416667 22.191667\n1488 chic  22.0  17.00000 1991-01-27         NA  25.000000 12.7083333 23.008333\n1489 chic  25.5  19.75000 1991-01-28         NA  54.000000 12.2083333 31.426087\n1490 chic  19.0  12.62500 1991-01-29         NA  12.000000 20.4166667 23.550000\n1491 chic  15.0   6.62500 1991-01-30         NA  42.125000 11.9583333 26.264493\n1492 chic  17.0   8.87500 1991-01-31         NA  40.000000 14.6666667 21.780032\n1493 chic  29.0  27.50000 1991-02-01         NA  52.500000  7.9166667 30.486111\n1494 chic  39.0  30.50000 1991-02-02         NA         NA 12.0416667 29.597222\n1495 chic  42.5  30.12500 1991-02-03         NA  39.000000 16.6666667 31.625000\n1496 chic  44.0  38.00000 1991-02-04         NA  32.000000 12.5833333 28.055556\n1497 chic  39.0  34.37500 1991-02-05         NA  47.250000 13.0416667 28.597619\n1498 chic  35.5  32.87500 1991-02-06         NA  39.000000 15.3333333 18.517857\n1499 chic  32.5  29.50000 1991-02-07         NA  28.000000  8.3333333 25.013889\n1500 chic  34.0  31.00000 1991-02-08         NA  42.000000  6.5833333 24.444444\n1501 chic  37.5  30.12500 1991-02-09         NA  35.500000  8.8333333 23.888889\n1502 chic  30.0   9.25000 1991-02-10         NA  33.000000 18.4166667 15.281250\n1503 chic  22.0   5.12500 1991-02-11         NA  24.000000 18.3750000 16.891606\n1504 chic  24.5  17.87500 1991-02-12         NA  35.000000  8.0000000 27.715278\n1505 chic  32.5  26.75000 1991-02-13         NA  37.000000  8.4583333 23.506944\n1506 chic  22.0  13.62500 1991-02-14         NA  35.000000 16.0833333 17.283611\n1507 chic   8.5  -6.25000 1991-02-15         NA  39.500000 22.1666667 12.237939\n1508 chic  16.0  17.12500 1991-02-16         NA  23.000000 12.5833333 16.364583\n1509 chic  35.0  29.25000 1991-02-17         NA  29.375000 15.5000000 18.869565\n1510 chic  38.5  38.37500 1991-02-18         NA  39.000000  8.2916667 18.037121\n1511 chic  35.5  23.62500 1991-02-19         NA         NA 10.8750000 14.559028\n1512 chic  36.5  30.37500 1991-02-20         NA  36.500000 16.3750000 18.834575\n1513 chic  47.0  40.37500 1991-02-21         NA  46.000000 10.6666667 23.642512\n1514 chic  34.5  14.50000 1991-02-22         NA  27.000000 19.0833333 14.617740\n1515 chic  26.5  18.50000 1991-02-23         NA  22.875000 20.8333333 16.819444\n1516 chic  28.5  13.00000 1991-02-24         NA  26.000000 14.9583333 14.336806\n1517 chic  21.0   7.50000 1991-02-25         NA  25.000000 17.4166667 18.958333\n1518 chic  19.0  16.12500 1991-02-26         NA  41.000000 13.9583333 25.236111\n1519 chic  23.5  19.50000 1991-02-27         NA  37.000000 14.7500000 22.263889\n1520 chic  39.0  30.62500 1991-02-28         NA  40.000000 13.3333333 25.984492\n1521 chic  48.0  46.50000 1991-03-01         NA  29.571429 21.5000000 25.921086\n1522 chic  37.5  22.25000 1991-03-02         NA  26.000000 17.3750000 11.836806\n1523 chic  25.5  18.50000 1991-03-03         NA  15.000000 21.3750000  9.840278\n1524 chic  31.0  20.75000 1991-03-04         NA  30.000000 10.6666667 25.638889\n1525 chic  39.0  31.75000 1991-03-05         NA  53.000000  6.8750000 27.310606\n1526 chic  39.5  20.12500 1991-03-06         NA  35.000000 15.1666667 14.382937\n1527 chic  28.0  11.00000 1991-03-07         NA  22.142857 17.5833333 20.152778\n1528 chic  32.5  28.00000 1991-03-08         NA         NA 12.2083333 31.350694\n1529 chic  33.5  23.00000 1991-03-09         NA  38.500000 18.7083333 13.302083\n1530 chic  34.5  23.25000 1991-03-10         NA  40.000000 20.3333333 17.743056\n1531 chic  40.0  28.37500 1991-03-11         NA  57.500000 17.9583333 18.722222\n1532 chic  32.0  24.50000 1991-03-12         NA  33.000000 16.2083333 15.513573\n1533 chic  32.5  23.50000 1991-03-13         NA  15.000000 25.6666667 12.434028\n1534 chic  34.5  26.50000 1991-03-14         NA  11.000000 26.7500000 13.812500\n1535 chic  34.0  26.50000 1991-03-15         NA  25.000000 17.0000000 23.822285\n1536 chic  39.0  28.75000 1991-03-16         NA  26.000000 22.5000000 29.993056\n1537 chic  39.0  39.25000 1991-03-17         NA  33.500000 10.5000000 25.409722\n1538 chic  42.5  35.87500 1991-03-18         NA  51.000000 15.0733696 24.676932\n1539 chic  44.0  38.00000 1991-03-19         NA  43.714286 12.9166667 28.777503\n1540 chic  47.5  44.87500 1991-03-20         NA  33.000000 18.6521739 32.847222\n1541 chic  60.0  51.62500 1991-03-21         NA  63.000000 25.0434783 29.568182\n1542 chic  55.0  55.25000 1991-03-22         NA  17.000000 18.4166667 21.381944\n1543 chic  47.0  32.87500 1991-03-23         NA  21.000000 21.4166667  8.899306\n1544 chic  45.0  34.50000 1991-03-24         NA  21.000000 17.7500000 13.138889\n1545 chic  49.0  39.00000 1991-03-25         NA  40.571429  9.3750000 36.229469\n1546 chic  63.0  63.50000 1991-03-26         NA  31.000000 22.1151369 25.243056\n1547 chic  56.0  43.25000 1991-03-27         NA  72.000000 15.6865079 15.281250\n1548 chic  42.0  29.62500 1991-03-28         NA  28.000000 24.6575405 10.428571\n1549 chic  30.5  17.87500 1991-03-29         NA  14.500000 28.5208333 10.550000\n1550 chic  33.0  17.37500 1991-03-30         NA  21.000000 25.5833333 17.541667\n1551 chic  43.5  33.50000 1991-03-31         NA  26.285714 23.4821860 17.666667\n1552 chic  41.0  23.87500 1991-04-01         NA         NA 23.7176178 19.654167\n1553 chic  39.0  24.00000 1991-04-02         NA  28.000000 19.8257861 26.025000\n1554 chic  51.0  34.87500 1991-04-03         NA  48.000000 17.9642857 22.762500\n1555 chic  52.5  52.25000 1991-04-04         NA  35.000000 15.0688776 27.944697\n1556 chic  60.0  50.37500 1991-04-05         NA  41.000000 25.1738173 27.296998\n1557 chic  70.0  47.25000 1991-04-06         NA  33.750000 38.6648551 14.689236\n1558 chic  69.0  60.25000 1991-04-07         NA  28.000000 26.2500000 11.395833\n1559 chic  65.5  58.50000 1991-04-08         NA  44.500000 15.4126812 16.859524\n1560 chic  44.0  38.12500 1991-04-09         NA  13.000000 10.4780506 12.316512\n1561 chic  43.5  28.87500 1991-04-10         NA  18.000000 28.5781250 14.170139\n1562 chic  38.0  28.62500 1991-04-11         NA  15.000000 23.3806612 16.972222\n1563 chic  44.0  32.37500 1991-04-12         NA  27.285714 19.6895485 15.323232\n1564 chic  45.5  44.12500 1991-04-13         NA  25.000000 12.9642857 15.423611\n1565 chic  58.5  50.12500 1991-04-14         NA  12.500000 18.3809524 12.070833\n1566 chic  53.0  38.87500 1991-04-15         NA  27.000000 26.5923913 14.141304\n1567 chic  53.0  42.00000 1991-04-16         NA         NA 19.7094156 28.335366\n1568 chic  47.5  33.12500 1991-04-17         NA  17.000000 20.6682900 20.884848\n1569 chic  46.0  37.50000 1991-04-18         NA  30.000000 25.5708874 15.742262\n1570 chic  46.5  36.62500 1991-04-19         NA  22.000000 25.9746377 12.787893\n1571 chic  40.5  31.62500 1991-04-20         NA  14.000000 30.6130952  9.451389\n1572 chic  44.5  20.37500 1991-04-21         NA  15.000000 30.3667184 11.857639\n1573 chic  48.0  30.62500 1991-04-22         NA  45.500000 23.0680272 29.742560\n1574 chic  50.0  38.50000 1991-04-23         NA  32.000000 20.0324675 19.018218\n1575 chic  50.5  28.37500 1991-04-24         NA  35.375000 18.2321429 24.825126\n1576 chic  53.5  37.87500 1991-04-25         NA         NA 26.0714286 29.503562\n1577 chic  59.5  47.87500 1991-04-26         NA  72.500000 27.8414502 28.106944\n1578 chic  64.5  61.00000 1991-04-27         NA  40.000000 12.0052083 19.673611\n1579 chic  64.5  55.87500 1991-04-28         NA  36.000000 15.1467391 17.902778\n1580 chic  64.0  55.50000 1991-04-29         NA  20.000000 20.6428571 16.036706\n1581 chic  57.5  39.62500 1991-04-30         NA  36.857143 24.4510870 12.871528\n1582 chic  52.5  34.87500 1991-05-01         NA  42.000000 21.1669255 16.790278\n1583 chic  55.0  35.12500 1991-05-02         NA  59.500000 25.6374459 20.215694\n1584 chic  46.5  37.37500 1991-05-03         NA   9.000000 21.4648033 15.829299\n1585 chic  52.0  41.00000 1991-05-04         NA  29.500000 16.5952381 18.003472\n1586 chic  56.0  51.25000 1991-05-05         NA  26.000000 20.0059524 17.575694\n1587 chic  45.0  35.50000 1991-05-06         NA  22.125000 19.4090909 13.460246\n1588 chic  53.0  38.37500 1991-05-07         NA  27.000000 26.0476190 17.327525\n1589 chic  55.0  51.00000 1991-05-08         NA  47.000000 19.0654762 24.847826\n1590 chic  62.0  52.37500 1991-05-09         NA  46.000000 30.3333333 28.125000\n1591 chic  65.0  55.00000 1991-05-10         NA  71.000000 29.4057736 30.761364\n1592 chic  70.5  64.75000 1991-05-11         NA  59.000000 31.3095238 30.571711\n1593 chic  74.5  62.75000 1991-05-12         NA  45.000000 28.6309524 24.020833\n1594 chic  76.0  64.50000 1991-05-13         NA  80.000000 32.1596320 38.796429\n1595 chic  74.0  56.37500 1991-05-14         NA  70.000000 22.9495342 39.286411\n1596 chic  72.5  57.25000 1991-05-15         NA  85.000000 35.1294643 38.959410\n1597 chic  73.5  65.50000 1991-05-16         NA  88.500000 22.6979167 48.212500\n1598 chic  60.0  46.37500 1991-05-17         NA  32.000000 16.1500947 17.854167\n1599 chic  50.0  44.25000 1991-05-18         NA  24.375000 17.9940476 10.187500\n1600 chic  54.5  38.62500 1991-05-19         NA  16.000000 28.8095238 12.000000\n1601 chic  60.5  53.00000 1991-05-20         NA  42.000000 29.7453463 30.895960\n1602 chic  68.5  62.87500 1991-05-21         NA  93.000000 35.1500947 31.149306\n1603 chic  74.5  66.87500 1991-05-22         NA  63.000000 13.3091033 31.309343\n1604 chic  74.0  67.50000 1991-05-23         NA  37.000000 18.1107955 21.819234\n1605 chic  77.5  64.50000 1991-05-24         NA  34.714286 28.0104167 20.449179\n1606 chic  67.0  58.62500 1991-05-25         NA  26.000000 15.0973465 21.246528\n1607 chic  76.0  67.75000 1991-05-26         NA  29.500000 28.5512422 14.138889\n1608 chic  77.5  69.37500 1991-05-27         NA         NA 32.8511905 19.725694\n1609 chic  80.5  67.87500 1991-05-28         NA  98.000000 28.0216097 30.292718\n1610 chic  79.0  67.37500 1991-05-29         NA  44.000000 29.3541667 30.871162\n1611 chic  77.5  66.37500 1991-05-30         NA  36.625000 30.4599185 20.756944\n1612 chic  77.5  67.75000 1991-05-31         NA  48.000000 25.9649004 26.200442\n1613 chic  74.5  66.12500 1991-06-01         NA  41.000000 34.0208333 29.454861\n1614 chic  72.5  63.25000 1991-06-02         NA  48.000000 38.4642857 23.762500\n1615 chic  69.0  56.50000 1991-06-03         NA  31.500000 35.6051136 18.156250\n1616 chic  61.5  48.50000 1991-06-04         NA  16.000000 32.0624588  8.579724\n1617 chic  61.0  46.62500 1991-06-05         NA  22.571429 25.8293190 12.708686\n1618 chic  62.0  45.12500 1991-06-06         NA  26.000000 27.2511322 16.985476\n1619 chic  65.5  48.25000 1991-06-07         NA  45.000000 29.0364583 20.821212\n1620 chic  67.5  49.12500 1991-06-08         NA  48.000000 33.7968750 25.150000\n1621 chic  72.5  53.87500 1991-06-09         NA  59.500000 48.1145833 29.991667\n1622 chic  75.0  59.87500 1991-06-10         NA  86.000000 42.6666667 24.857143\n1623 chic  73.0  60.75000 1991-06-11         NA  38.125000 25.7395833 29.586667\n1624 chic  71.5  58.37500 1991-06-12         NA  25.000000 22.5781250 27.814286\n1625 chic  73.5  64.87500 1991-06-13         NA  52.500000 41.7334692 15.866667\n1626 chic  83.0  65.37500 1991-06-14         NA  42.000000 42.7656250 17.293841\n1627 chic  77.5  65.75000 1991-06-15         NA  33.500000 38.1354167 11.425000\n1628 chic  69.5  53.50000 1991-06-16         NA  21.000000 33.0681612 10.512500\n1629 chic  69.0  50.75000 1991-06-17         NA  30.500000 28.2153533 21.923485\n1630 chic  71.0  55.75000 1991-06-18         NA  33.000000 45.1093750 23.510101\n1631 chic  72.5  58.12500 1991-06-19         NA  43.000000 51.9062500 30.142292\n1632 chic  78.5  60.25000 1991-06-20         NA  60.000000 63.1041667 25.173611\n1633 chic  78.0  62.00000 1991-06-21         NA  85.000000 45.8333333 39.733333\n1634 chic  64.5  56.25000 1991-06-22         NA  18.000000 21.4614583  6.804167\n1635 chic  68.0  53.12500 1991-06-23         NA  16.625000 31.8906250  6.385417\n1636 chic  69.0  50.00000 1991-06-24         NA  33.000000 40.2961957 19.471726\n1637 chic  71.5  53.87500 1991-06-25         NA  52.500000 53.8711504 25.473214\n1638 chic  78.5  66.62500 1991-06-26         NA  96.000000 49.6781250 28.889583\n1639 chic  81.5  62.62500 1991-06-27         NA  95.000000 48.6875000 19.607143\n1640 chic  79.5  65.12500 1991-06-28         NA  49.000000 43.0885417 23.197917\n1641 chic  84.0  69.12500 1991-06-29         NA  51.500000 42.9114583 20.484954\n1642 chic  74.0  64.12500 1991-06-30         NA         NA 34.1614583 11.186012\n1643 chic  81.0  69.00000 1991-07-01         NA  69.000000 31.7843526 25.539069\n1644 chic  82.0  61.75000 1991-07-02         NA  34.000000 31.3563113 31.446920\n1645 chic  78.5  66.25000 1991-07-03         NA  61.500000 24.1388134 28.375000\n1646 chic  73.0  61.25000 1991-07-04         NA         NA 24.9934330 17.591667\n1647 chic  75.5  63.37500 1991-07-05         NA  35.625000 31.3906250 24.544318\n1648 chic  81.0  69.62500 1991-07-06         NA  32.000000 40.6093750 25.037500\n1649 chic  80.0  68.12500 1991-07-07         NA  37.500000 39.6770833 16.225000\n1650 chic  71.0  56.62500 1991-07-08         NA         NA 30.9463315 11.485615\n1651 chic  71.5  55.00000 1991-07-09         NA  38.000000 23.9678442 21.376578\n1652 chic  70.5  55.50000 1991-07-10         NA  22.000000 35.4947917 25.709596\n1653 chic  76.0  64.37500 1991-07-11         NA  44.500000 42.2160326 22.236477\n1654 chic  79.0  65.12500 1991-07-12         NA  58.000000 34.7117301 18.619634\n1655 chic  72.0  59.87500 1991-07-13         NA  22.500000 31.8645833 12.197917\n1656 chic  69.5  54.75000 1991-07-14         NA         NA 24.9739583  9.163345\n1657 chic  70.5  54.12500 1991-07-15         NA  50.500000 31.0520833 24.788194\n1658 chic  76.0  58.75000 1991-07-16         NA  57.000000 40.5364583 36.470328\n1659 chic  78.5  66.25000 1991-07-17         NA  83.000000 50.3958333 32.156250\n1660 chic  83.0  63.62500 1991-07-18         NA  76.000000 52.9114583 26.986111\n1661 chic  85.5  65.50000 1991-07-19         NA  85.500000 58.0455044 27.463284\n1662 chic  85.0  65.25000 1991-07-20         NA  49.000000 52.7857143 16.694444\n1663 chic  83.0  71.75000 1991-07-21         NA  54.000000 48.2713033 22.246528\n1664 chic  88.0  71.25000 1991-07-22         NA  70.000000 34.8578077 24.551226\n1665 chic  74.5  51.62500 1991-07-23         NA  30.000000 31.0742814 19.223007\n1666 chic  70.5  53.12500 1991-07-24         NA  51.000000 25.5197011 26.802381\n1667 chic  68.0  52.25000 1991-07-25         NA  16.000000 23.2526042 16.458333\n1668 chic  66.0  51.62500 1991-07-26         NA  24.500000 24.4494048 20.275000\n1669 chic  66.5  54.12500 1991-07-27         NA  18.500000 29.5411932 17.741667\n1670 chic  73.5  59.00000 1991-07-28         NA         NA 41.6510417 18.125000\n1671 chic  70.0  57.00000 1991-07-29         NA  38.375000 34.9861111 25.411364\n1672 chic  66.5  54.62500 1991-07-30         NA  27.000000 26.1712963 22.883333\n1673 chic  75.5  62.62500 1991-07-31         NA  64.500000 35.6207200 33.136905\n1674 chic  78.5  52.12500 1991-08-01         NA         NA 34.3333333 40.067659\n1675 chic  83.5  65.75000 1991-08-02         NA 131.000000 39.5185185 55.489583\n1676 chic  71.0  61.87500 1991-08-03         NA  15.000000 30.7592593 17.364583\n1677 chic  69.0  51.00000 1991-08-04         NA  14.285714 22.4490741 12.927083\n1678 chic  68.0  50.12500 1991-08-05         NA         NA 27.8606902 18.512500\n1679 chic  71.5  57.12500 1991-08-06         NA  39.500000 31.3750000 23.558333\n1680 chic  72.5  63.37500 1991-08-07         NA  42.000000 26.3287037 34.290942\n1681 chic  67.5  61.87500 1991-08-08         NA  32.500000 27.7153113 24.330177\n1682 chic  69.5  54.37500 1991-08-09         NA  15.000000 29.2586554 16.142740\n1683 chic  70.0  53.37500 1991-08-10         NA  24.500000 23.4440236 21.045139\n1684 chic  68.0  47.75000 1991-08-11         NA  28.000000 28.1805556 25.253472\n1685 chic  67.5  57.87500 1991-08-12         NA  36.500000 24.5185185 27.351389\n1686 chic  70.5  54.00000 1991-08-13         NA  31.000000 27.9590456 24.745581\n1687 chic  71.5  52.62500 1991-08-14         NA  65.000000 28.7954545 44.432881\n1688 chic  77.0  61.62500 1991-08-15         NA  63.000000 30.9512882 32.950442\n1689 chic  76.5  61.75000 1991-08-16         NA  58.500000 33.9629630 35.698370\n1690 chic  75.0  61.87500 1991-08-17         NA  35.000000 30.6296296 18.819444\n1691 chic  74.0  60.50000 1991-08-18         NA  34.500000 26.0231481 17.491667\n1692 chic  64.5  59.37500 1991-08-19         NA  18.000000 17.5202020 11.962500\n1693 chic  67.0  54.00000 1991-08-20         NA  25.500000 18.7527778 15.521329\n1694 chic  68.5  57.87500 1991-08-21         NA  48.000000 22.7091385 28.986413\n1695 chic  78.0  58.37500 1991-08-22         NA  42.000000 31.5925926 27.906250\n1696 chic  70.5  57.75000 1991-08-23         NA  18.000000 22.5720246 20.390152\n1697 chic  75.5  62.62500 1991-08-24         NA  43.500000 40.3014706 22.437500\n1698 chic  81.0  65.12500 1991-08-25         NA  62.000000 52.7864332 24.970833\n1699 chic  80.0  61.00000 1991-08-26         NA  80.500000 43.0511900 35.922727\n1700 chic  81.0  66.25000 1991-08-27         NA  42.000000 28.0271164 25.481159\n1701 chic  81.5  67.00000 1991-08-28         NA  69.857143 31.7638889 34.105429\n1702 chic  82.5  69.75000 1991-08-29         NA  73.000000 31.3333333 33.757891\n1703 chic  79.0  71.25000 1991-08-30         NA  47.500000 16.9722222 38.177234\n1704 chic  71.5  60.12500 1991-08-31         NA  29.000000 21.4062500 15.879167\n1705 chic  66.5  59.25000 1991-09-01         NA  24.500000 29.9479167 12.520833\n1706 chic  73.5  60.37500 1991-09-02         NA         NA 31.1190476 22.840278\n1707 chic  77.0  66.37500 1991-09-03         NA  34.750000 15.4635417 28.659407\n1708 chic  67.0  52.25000 1991-09-04         NA  13.000000 21.3327295 18.278684\n1709 chic  66.0  51.50000 1991-09-05         NA  62.000000 19.2225150 35.222371\n1710 chic  70.0  54.12500 1991-09-06         NA  19.000000 24.5364583 43.989583\n1711 chic  75.5  54.62500 1991-09-07         NA  63.500000 31.0792572 40.722222\n1712 chic  76.5  53.50000 1991-09-08         NA  41.000000 38.0104167 26.538194\n1713 chic  82.0  66.25000 1991-09-09         NA  50.625000 26.7552083 19.288194\n1714 chic  73.5  61.25000 1991-09-10         NA  15.000000 20.6875000 17.482639\n1715 chic  67.5  56.62500 1991-09-11         NA  21.000000 18.2282243 13.678355\n1716 chic  70.5  65.75000 1991-09-12         NA  34.000000 19.5132850 28.766667\n1717 chic  73.5  65.62500 1991-09-13         NA  53.500000 24.5989583 29.625000\n1718 chic  79.0  68.87500 1991-09-14         NA  33.000000 17.4531250 25.812500\n1719 chic  81.5  68.75000 1991-09-15         NA  34.285714 22.2135417 16.869792\n1720 chic  69.0  50.62500 1991-09-16         NA  43.000000 18.1197917 18.071212\n1721 chic  63.5  49.50000 1991-09-17         NA  40.500000 11.3802083 24.925694\n1722 chic  56.5  35.00000 1991-09-18         NA  42.000000 13.9624094 13.945451\n1723 chic  47.0  29.37500 1991-09-19         NA  38.000000 12.6296296 16.666667\n1724 chic  47.5  35.62500 1991-09-20         NA  28.000000 11.8666243 28.105114\n1725 chic  54.5  35.00000 1991-09-21         NA  34.000000 19.6250000 30.902778\n1726 chic  58.5  52.37500 1991-09-22         NA  25.000000 18.7261905 20.819444\n1727 chic  53.5  38.75000 1991-09-23         NA  32.000000  9.7494163 17.643382\n1728 chic  48.0  43.25000 1991-09-24         NA  28.000000  5.6664654 28.229167\n1729 chic  54.0  40.75000 1991-09-25         NA  36.000000  8.1322464 22.581124\n1730 chic  50.5  29.62500 1991-09-26         NA  40.000000 11.1276167 18.904672\n1731 chic  46.5  35.37500 1991-09-27         NA  33.625000  8.9385522 28.660354\n1732 chic  49.5  35.75000 1991-09-28         NA  16.000000 15.3657407 23.423611\n1733 chic  53.5  46.00000 1991-09-29         NA  32.000000 20.5000000 22.805556\n1734 chic  67.5  50.25000 1991-09-30         NA  76.000000 26.6382275 24.611111\n1735 chic  59.0  47.37500 1991-10-01         NA  60.000000 15.9343800 26.242109\n1736 chic  69.0  60.25000 1991-10-02         NA  47.000000 19.6429894 27.821759\n1737 chic  62.5  53.37500 1991-10-03         NA  31.375000 16.6247331 20.353311\n1738 chic  56.0  54.87500 1991-10-04         NA  15.000000 15.3645833 17.009615\n1739 chic  48.0  31.25000 1991-10-05         NA  19.000000 16.7916667  9.270833\n1740 chic  44.0  33.00000 1991-10-06         NA  16.000000 10.3958333 10.266265\n1741 chic  45.0  33.62500 1991-10-07         NA  28.500000  8.4575465 18.265700\n1742 chic  62.5  47.00000 1991-10-08         NA  29.000000 22.9154589 20.155495\n1743 chic  61.5  46.87500 1991-10-09         NA  51.428571 17.1594203 32.995567\n1744 chic  53.5  42.37500 1991-10-10         NA  63.000000 14.0224185 30.263033\n1745 chic  56.0  38.00000 1991-10-11         NA  38.000000 11.3148148 29.819444\n1746 chic  48.5  38.50000 1991-10-12         NA  25.000000 14.3564815 15.267361\n1747 chic  46.0  37.25000 1991-10-13         NA  17.500000 13.1574074 15.850379\n1748 chic  50.5  34.37500 1991-10-14         NA         NA  6.1018519 12.427083\n1749 chic  41.5  24.00000 1991-10-15         NA  27.625000  5.9810606 15.882095\n1750 chic  45.5  33.87500 1991-10-16         NA  37.000000  9.7916667 24.465278\n1751 chic  61.5  40.62500 1991-10-17         NA  78.500000 15.1859903 21.127306\n1752 chic  44.5  36.25000 1991-10-18         NA  26.000000 14.9987374 14.236427\n1753 chic  38.0  24.50000 1991-10-19         NA  27.500000 13.2962963 16.607639\n1754 chic  41.5  25.50000 1991-10-20         NA  20.000000 11.8842593 23.031250\n1755 chic  50.5  44.00000 1991-10-21         NA  46.000000 14.8935185 26.486111\n1756 chic  64.0  47.00000 1991-10-22         NA  46.000000 24.9475644 27.062500\n1757 chic  66.5  60.75000 1991-10-23         NA  61.500000 19.3931472 21.327381\n1758 chic  68.0  63.62500 1991-10-24         NA  25.000000  9.2652308 15.264389\n1759 chic  58.5  48.12500 1991-10-25         NA  16.000000  5.7343750 11.662500\n1760 chic  50.5  46.87500 1991-10-26         NA  20.000000  9.0625000 11.191667\n1761 chic  50.0  51.00000 1991-10-27         NA  10.000000  8.0312500  7.158333\n1762 chic  55.0  53.62500 1991-10-28         NA   2.000000  7.4166667 13.051786\n1763 chic  63.5  60.25000 1991-10-29         NA  39.000000  5.2031250 19.870833\n1764 chic  46.5  38.12500 1991-10-30         NA   8.000000  5.7675601 10.260985\n1765 chic  48.0  49.87500 1991-10-31         NA         NA  7.7559524 13.383333\n1766 chic  43.5  28.00000 1991-11-01         NA         NA 10.2916667 15.689773\n1767 chic  25.0  10.37500 1991-11-02         NA  23.000000 18.7708333  7.916667\n1768 chic  18.5  16.75000 1991-11-03         NA  17.000000 16.0625000  8.475000\n1769 chic  18.5   9.62500 1991-11-04         NA  45.500000 11.4791667 17.087500\n1770 chic  28.0  26.37500 1991-11-05         NA  26.000000  5.3469203 23.133333\n1771 chic  28.5   6.25000 1991-11-06         NA  35.000000 11.5208333 18.975362\n1772 chic  20.0  -1.62500 1991-11-07         NA  30.000000  6.4583333 22.967879\n1773 chic  22.0   7.87500 1991-11-08         NA  39.250000  5.0208333 31.208333\n1774 chic  26.0  18.12500 1991-11-09         NA   7.000000  6.4672619 32.825000\n1775 chic  33.0  27.25000 1991-11-10         NA  45.000000  3.4166667 35.575000\n1776 chic  34.5  33.12500 1991-11-11         NA         NA  2.1666667 24.320833\n1777 chic  35.0  32.00000 1991-11-12         NA  39.500000  2.8750000 20.747115\n1778 chic  45.5  38.62500 1991-11-13         NA  28.000000  3.8541667 25.662500\n1779 chic  48.0  51.62500 1991-11-14         NA  36.000000  3.8750000 27.636957\n1780 chic  50.0  42.00000 1991-11-15         NA  38.000000  9.4166667 23.547414\n1781 chic  41.0  33.37500 1991-11-16         NA  28.500000 19.2708333 13.937500\n1782 chic  42.5  39.25000 1991-11-17         NA         NA 12.2916667 17.633333\n1783 chic  57.0  57.62500 1991-11-18         NA  36.000000  8.7916667 21.925000\n1784 chic  57.0  48.75000 1991-11-19         NA  28.000000  9.2083333 22.340476\n1785 chic  40.5  32.25000 1991-11-20         NA  21.875000  5.5416667 22.166667\n1786 chic  40.0  33.12500 1991-11-21         NA         NA  4.1875000 42.639689\n1787 chic  43.5  40.62500 1991-11-22         NA  45.500000  2.3333333 33.593750\n1788 chic  34.5  19.62500 1991-11-23         NA  20.000000  6.2500000 16.385417\n1789 chic  23.0  16.50000 1991-11-24         NA  33.000000 15.1041667 12.427083\n1790 chic  17.5  10.12500 1991-11-25         NA  27.000000  6.4285714 23.290152\n1791 chic  23.0  21.12500 1991-11-26         NA  37.375000  3.5625000 28.688669\n1792 chic  38.5  33.00000 1991-11-27         NA  35.000000  6.7246377 17.983333\n1793 chic  36.0  36.75000 1991-11-28         NA  10.000000 11.7291667 16.641667\n1794 chic  49.0  53.50000 1991-11-29         NA         NA 10.7291667 20.179167\n1795 chic  43.5  25.75000 1991-11-30         NA  19.000000 14.0000000 10.608333\n1796 chic  27.0  13.37500 1991-12-01         NA  19.000000  5.8958333 15.513889\n1797 chic  30.5  30.00000 1991-12-02         NA  16.625000 11.3541667 16.939915\n1798 chic  22.0  12.37500 1991-12-03         NA  22.000000  8.4375000 19.619003\n1799 chic   8.0  -1.00000 1991-12-04         NA  35.000000  8.1458333 20.131313\n1800 chic  20.5  19.00000 1991-12-05         NA  23.000000  5.2146739 23.692331\n1801 chic  24.0  30.62500 1991-12-06         NA  33.500000  5.5833333 25.613763\n1802 chic  44.0  46.37500 1991-12-07         NA  20.000000  4.8750000 21.812500\n1803 chic  49.0  45.50000 1991-12-08         NA  24.285714  6.2708333 17.319444\n1804 chic  35.5  32.00000 1991-12-09         NA  42.000000  4.0000000 23.937500\n1805 chic  38.5  36.37500 1991-12-10         NA  25.500000  3.3125000 21.496843\n1806 chic  40.0  34.75000 1991-12-11         NA  28.000000  3.4375000 22.667435\n1807 chic  49.0  50.25000 1991-12-12         NA  27.000000  3.8541667 19.095833\n1808 chic  37.5  35.25000 1991-12-13         NA  41.000000  2.8750000 22.541667\n1809 chic  29.0  11.87500 1991-12-14         NA  36.750000 13.8333333 10.462121\n1810 chic  18.0   1.50000 1991-12-15         NA  26.000000 12.0625000 13.336806\n1811 chic  21.0  24.37500 1991-12-16         NA  27.500000  4.8541667 21.079230\n1812 chic  28.5  12.37500 1991-12-17         NA  46.000000  7.5208333 18.568452\n1813 chic  15.5   4.75000 1991-12-18         NA  31.000000  8.7500000 17.583929\n1814 chic  19.0  15.62500 1991-12-19         NA  37.000000  3.8125000 30.991667\n1815 chic  32.5  32.87500 1991-12-20         NA  29.375000  2.1250000 20.132479\n1816 chic  31.0  27.25000 1991-12-21         NA  20.000000  2.0000000 18.107639\n1817 chic  32.5  34.50000 1991-12-22         NA  11.500000  3.2500000 14.504386\n1818 chic  30.5  18.62500 1991-12-23         NA  22.000000  6.2916667 20.166982\n1819 chic  30.0  26.37500 1991-12-24         NA  29.000000  4.5416667 21.777778\n1820 chic  30.0  28.75000 1991-12-25         NA  39.000000  3.3125000 25.444444\n1821 chic  35.5  32.37500 1991-12-26         NA  33.000000  4.1041667 22.201389\n1822 chic  35.5  32.00000 1991-12-27         NA  31.000000  9.1875000 14.225393\n1823 chic  35.0  34.00000 1991-12-28         NA  27.000000  7.4375000 15.250000\n1824 chic  32.5  27.62500 1991-12-29         NA  42.000000  3.7291667 14.739583\n1825 chic  34.0  28.50000 1991-12-30         NA  29.000000  5.0458333 21.153409\n1826 chic  33.0  28.00000 1991-12-31         NA  21.000000  6.0969203 18.226234\n1827 chic  33.5  32.62500 1992-01-01         NA  33.428571  5.4583333 19.697917\n1828 chic  39.5  41.87500 1992-01-02         NA  31.000000  2.4166667 24.822917\n1829 chic  38.5  34.87500 1992-01-03         NA  32.000000  2.1250000 24.607008\n1830 chic  35.0  32.50000 1992-01-04         NA  22.000000  6.1250000 19.416667\n1831 chic  35.0  32.37500 1992-01-05         NA  25.500000  8.0000000 16.645833\n1832 chic  35.0  33.12500 1992-01-06         NA  30.000000  3.0416667 19.475000\n1833 chic  34.5  31.50000 1992-01-07         NA  41.428571  2.4791667 23.460598\n1834 chic  38.5  40.87500 1992-01-08         NA  26.500000  3.3750000 21.708333\n1835 chic  38.0  33.62500 1992-01-09         NA  33.500000  2.0000000 14.178030\n1836 chic  30.0  23.12500 1992-01-10         NA  32.000000  4.4782609 19.343750\n1837 chic  36.0  34.87500 1992-01-11         NA  25.000000  4.9791667 20.552083\n1838 chic  36.5  38.12500 1992-01-12         NA  23.000000  7.4166667 18.479167\n1839 chic  32.5  30.75000 1992-01-13         NA  18.125000  6.7708333 17.343750\n1840 chic  20.5  10.50000 1992-01-14         NA  24.000000 11.5625000 21.927083\n1841 chic   6.0  -9.62500 1992-01-15         NA  38.000000  8.2518939 24.614583\n1842 chic   7.5  15.00000 1992-01-16         NA  39.000000  7.8143939 24.224784\n1843 chic  21.0   3.25000 1992-01-17         NA  34.500000 11.1666667 18.072917\n1844 chic   5.5  -7.25000 1992-01-18         NA         NA 11.6250000 22.200634\n1845 chic  14.5  23.37500 1992-01-19         NA  27.500000  7.2291667 26.805556\n1846 chic  24.0  20.50000 1992-01-20         NA  42.000000  6.3333333 25.875000\n1847 chic  33.5  33.00000 1992-01-21         NA  44.000000  4.5000000 30.797078\n1848 chic  35.5  36.87500 1992-01-22         NA  34.000000  4.3333333 28.500000\n1849 chic  28.5  15.87500 1992-01-23         NA  50.000000  8.5952381 16.222222\n1850 chic  18.5   7.25000 1992-01-24         NA  65.000000 11.8958333 20.611111\n1851 chic  25.0  20.50000 1992-01-25         NA  24.750000  7.2291667 23.597222\n1852 chic  19.5  23.12500 1992-01-26         NA  29.000000  7.7708333 28.430556\n1853 chic  30.0  25.87500 1992-01-27         NA  45.500000  3.7083333 25.739583\n1854 chic  29.5  25.75000 1992-01-28         NA  41.000000  5.4166667 30.712862\n1855 chic  30.0  31.50000 1992-01-29         NA  46.500000  6.1875000 22.260417\n1856 chic  33.5  34.37500 1992-01-30         NA  40.500000  2.2916667 27.135417\n1857 chic  32.0  22.37500 1992-01-31         NA  20.125000  9.8541667 21.219656\n1858 chic  30.5  22.62500 1992-02-01         NA  41.500000 16.3125000 22.473958\n1859 chic  37.5  33.50000 1992-02-02         NA  23.500000  4.4166667 27.531250\n1860 chic  43.5  43.00000 1992-02-03         NA  82.500000  2.5833333 40.895833\n1861 chic  36.0  25.37500 1992-02-04         NA  26.500000  9.1666667 20.333333\n1862 chic  32.5  30.25000 1992-02-05         NA  23.000000  7.9791667 26.281250\n1863 chic  34.5  30.37500 1992-02-06         NA  37.000000  5.4166667 24.701705\n1864 chic  28.0  17.37500 1992-02-07         NA  34.500000 10.7291667 20.779438\n1865 chic  18.5   4.62500 1992-02-08         NA  25.000000 13.2291667 14.885417\n1866 chic  17.5  11.50000 1992-02-09         NA  43.500000  7.5208333 23.614583\n1867 chic  31.0  33.00000 1992-02-10         NA  78.000000  3.2083333 24.083333\n1868 chic  27.0  12.50000 1992-02-11         NA  19.000000 10.5208333 20.114583\n1869 chic  23.5  18.37500 1992-02-12         NA  31.375000 13.8958333 20.614583\n1870 chic  30.0  30.50000 1992-02-13         NA  37.500000  2.2083333 23.549366\n1871 chic  33.0  32.50000 1992-02-14         NA  31.500000  6.3625000 21.504735\n1872 chic  35.0  33.62500 1992-02-15         NA  25.500000  3.7083333 22.885417\n1873 chic  34.0  34.62500 1992-02-16         NA  26.000000  7.0000000 20.041667\n1874 chic  37.5  36.37500 1992-02-17         NA  36.000000  9.4583333 22.583333\n1875 chic  40.5  42.37500 1992-02-18         NA  37.857143  3.6979167 24.928571\n1876 chic  37.5  32.87500 1992-02-19         NA  26.000000  5.6837945 27.843750\n1877 chic  39.5  34.50000 1992-02-20         NA  37.000000  9.8809524 23.875000\n1878 chic  31.5  27.37500 1992-02-21         NA  25.000000 14.7481061 27.451136\n1879 chic  42.0  33.87500 1992-02-22         NA  30.000000 10.8333333 24.208333\n1880 chic  37.0  36.87500 1992-02-23         NA  35.000000 17.6666667 21.260417\n1881 chic  36.0  34.12500 1992-02-24         NA  38.125000 10.4791667 25.833333\n1882 chic  33.5  27.25000 1992-02-25         NA  36.500000 11.3049242 25.981061\n1883 chic  33.5  31.37500 1992-02-26         NA  36.000000 13.4791667 25.291667\n1884 chic  39.5  34.12500 1992-02-27         NA  34.000000  7.9772727 29.427083\n1885 chic  39.5  26.62500 1992-02-28         NA  27.000000 13.4583333 20.979167\n1886 chic  30.0  25.12500 1992-02-29         NA  22.000000 22.7083333 20.968750\n1887 chic  54.0  41.12500 1992-03-01         NA  36.375000 18.4166667 24.864583\n1888 chic  45.5  37.87500 1992-03-02         NA  44.500000 11.3541667 30.375000\n1889 chic  38.0  38.12500 1992-03-03         NA  59.000000  6.8958333 26.401721\n1890 chic  49.0  40.75000 1992-03-04         NA  77.000000  8.7500000 35.074811\n1891 chic  53.0  53.75000 1992-03-05         NA  99.000000  6.8333333 41.430556\n1892 chic  55.5  52.12500 1992-03-06         NA  50.000000  8.1250000 32.708333\n1893 chic  48.0  48.00000 1992-03-07         NA  43.714286  3.5416667 28.152778\n1894 chic  52.5  50.37500 1992-03-08         NA  27.500000  9.0000000 24.472222\n1895 chic  44.0  31.37500 1992-03-09         NA  34.000000 14.4583333 26.020833\n1896 chic  20.5  11.00000 1992-03-10         NA  32.500000 23.0208333 22.107708\n1897 chic  19.5  16.00000 1992-03-11         NA  34.000000 21.1875000 26.916667\n1898 chic  22.5  12.37500 1992-03-12         NA  31.500000 18.0833333 30.229167\n1899 chic  25.5  21.87500 1992-03-13         NA  33.750000 17.7500000 29.791667\n1900 chic  29.0  19.75000 1992-03-14         NA  27.000000 19.7916667 28.652778\n1901 chic  29.0  17.00000 1992-03-15         NA  28.500000 18.9375000 31.333333\n1902 chic  34.5  36.87500 1992-03-16         NA  28.500000 12.1969697 30.611111\n1903 chic  38.0  24.00000 1992-03-17         NA  26.500000 21.3333333 23.541667\n1904 chic  34.0  22.00000 1992-03-18         NA  20.500000 26.5416667 21.203283\n1905 chic  36.0  22.75000 1992-03-19         NA  24.000000 28.7626812 29.672619\n1906 chic  35.0  21.12500 1992-03-20         NA  40.000000 15.8333333 35.103220\n1907 chic  30.5  31.12500 1992-03-21         NA  33.000000 29.5416667 27.427083\n1908 chic  27.5  14.12500 1992-03-22         NA  19.500000 25.5208333 25.635417\n1909 chic  30.5  23.12500 1992-03-23         NA  54.000000 13.4375000 48.930707\n1910 chic  43.0  34.25000 1992-03-24         NA  58.000000 16.5958333 37.094697\n1911 chic  44.5  32.37500 1992-03-25         NA  40.750000 12.1875000 31.697917\n1912 chic  41.5  26.87500 1992-03-26         NA  46.500000 15.8333333 28.066176\n1913 chic  34.0  26.00000 1992-03-27         NA  26.500000 23.8333333 27.125000\n1914 chic  36.0  31.25000 1992-03-28         NA  39.500000 18.0208333 42.347222\n1915 chic  39.5  37.75000 1992-03-29         NA  25.000000 27.2708333 24.388889\n1916 chic  42.0  29.50000 1992-03-30         NA  34.000000 20.4791667 32.871732\n1917 chic  41.5  27.00000 1992-03-31         NA  35.375000 16.6666667 34.536232\n1918 chic  33.5  25.25000 1992-04-01         NA  20.000000 23.2253472 24.388889\n1919 chic  31.5  19.50000 1992-04-02         NA  32.000000 18.5161713 29.972222\n1920 chic  38.0  31.87500 1992-04-03         NA  45.500000 13.4895833 31.472222\n1921 chic  36.5  22.12500 1992-04-04         NA  20.000000 26.9375000 25.041667\n1922 chic  38.5  23.25000 1992-04-05         NA  29.000000 20.9062500 32.055556\n1923 chic  49.5  31.87500 1992-04-06         NA  42.125000 17.8437500 37.802083\n1924 chic  52.0  38.50000 1992-04-07         NA  76.500000 14.4962121 40.706250\n1925 chic  50.5  28.12500 1992-04-08         NA  53.000000 19.3726326 37.683333\n1926 chic  48.0  36.00000 1992-04-09         NA  37.000000 26.9226985 28.316403\n1927 chic  57.5  57.37500 1992-04-10         NA  45.000000 19.9838574 31.738106\n1928 chic  49.5  36.37500 1992-04-11         NA  18.000000 17.1510417 26.675000\n1929 chic  37.0  19.00000 1992-04-12         NA  14.857143 32.0572917 13.816667\n1930 chic  38.0  28.62500 1992-04-13         NA  32.000000 15.9185606 22.418561\n1931 chic  42.0  31.87500 1992-04-14         NA  44.500000  9.7651721 26.128478\n1932 chic  48.5  50.37500 1992-04-15         NA  53.000000 10.2738095 31.979167\n1933 chic  53.0  40.25000 1992-04-16         NA  26.000000 17.2395833 28.182292\n1934 chic  41.5  38.75000 1992-04-17         NA  23.000000 22.9218750 24.541667\n1935 chic  51.0  58.12500 1992-04-18         NA  40.500000 10.4531250 25.625000\n1936 chic  65.5  59.75000 1992-04-19         NA  24.000000 23.7395833 18.333333\n1937 chic  66.0  58.25000 1992-04-20         NA  22.500000 21.5833333 18.973958\n1938 chic  48.0  36.50000 1992-04-21         NA  34.500000 12.9316604 16.638134\n1939 chic  43.0  30.87500 1992-04-22         NA  37.000000 17.5453869 21.234848\n1940 chic  48.5  42.75000 1992-04-23         NA  40.500000  7.9802989 33.349206\n1941 chic  44.5  37.62500 1992-04-24         NA  33.571429  8.5214461 27.854167\n1942 chic  43.5  33.62500 1992-04-25         NA  14.000000 17.3630952 21.958333\n1943 chic  46.5  36.50000 1992-04-26         NA  11.500000 19.5178571 14.066123\n1944 chic  40.5  26.25000 1992-04-27         NA  20.000000 24.4785779 17.051954\n1945 chic  44.0  29.50000 1992-04-28         NA  55.000000 18.0939764 41.552083\n1946 chic  58.5  51.62500 1992-04-29         NA  52.500000 16.4055707 31.028080\n1947 chic  49.5  42.12500 1992-04-30         NA  55.375000 15.1370018 29.309912\n1948 chic  64.5  52.50000 1992-05-01         NA 141.000000 32.9173460 25.358333\n1949 chic  64.0  32.50000 1992-05-02         NA  67.000000 27.5833333 20.500000\n1950 chic  48.5  34.87500 1992-05-03         NA  34.500000 18.0952381 15.505208\n1951 chic  44.0  29.87500 1992-05-04         NA  23.500000 19.3870874 22.494318\n1952 chic  43.5  23.12500 1992-05-05         NA  56.000000 31.3052721 17.303954\n1953 chic  44.5  21.25000 1992-05-06         NA  31.857143 21.3403680 27.504167\n1954 chic  52.0  24.75000 1992-05-07         NA 100.000000 21.7422360 41.423188\n1955 chic  56.0  28.00000 1992-05-08         NA  65.000000 35.0000000 49.777136\n1956 chic  58.5  48.25000 1992-05-09         NA  49.000000 45.6093750 29.700000\n1957 chic  65.5  48.50000 1992-05-10         NA  53.000000 41.3593750 25.866667\n1958 chic  72.0  56.37500 1992-05-11         NA  84.000000 33.7580287 26.235507\n1959 chic  69.0  61.50000 1992-05-12         NA  47.571429 26.4166667 28.781522\n1960 chic  55.0  36.87500 1992-05-13         NA         NA 22.9789402 18.975000\n1961 chic  54.0  46.00000 1992-05-14         NA  19.000000 13.5031379 28.609848\n1962 chic  60.5  48.87500 1992-05-15         NA  81.000000 18.7237319 38.108333\n1963 chic  73.0  60.25000 1992-05-16         NA  67.000000 41.3571429 30.812500\n1964 chic  67.5  48.62500 1992-05-17         NA  35.000000 35.0238095 16.953125\n1965 chic  52.0  43.50000 1992-05-18         NA  21.125000 21.8757440 17.330616\n1966 chic  57.5  44.12500 1992-05-19         NA  38.000000 22.1046196 33.574621\n1967 chic  67.0  51.12500 1992-05-20         NA         NA 36.1385870 40.437987\n1968 chic  71.0  60.50000 1992-05-21         NA  92.000000 33.6017992 43.004545\n1969 chic  73.5  64.12500 1992-05-22         NA  83.000000 24.7776680 34.583333\n1970 chic  55.0  36.12500 1992-05-23         NA  54.000000 19.0064700 14.529167\n1971 chic  40.5  30.62500 1992-05-24         NA  10.875000 29.2440476  9.962500\n1972 chic  41.0  32.75000 1992-05-25         NA         NA 29.1309524 14.266667\n1973 chic  44.0  29.37500 1992-05-26         NA  18.000000 25.2335389 25.081341\n1974 chic  48.0  24.62500 1992-05-27         NA  38.000000 16.5625000 32.575000\n1975 chic  50.5  31.37500 1992-05-28         NA  70.000000 22.4479167 40.576197\n1976 chic  55.0  33.75000 1992-05-29         NA  56.000000 32.3768116 33.348485\n1977 chic  58.0  42.37500 1992-05-30         NA  33.625000 40.7015306 29.575000\n1978 chic  60.0  39.75000 1992-05-31         NA  42.000000 36.1250000 39.825000\n1979 chic  59.0  45.50000 1992-06-01         NA  43.000000 22.9470109 42.683333\n1980 chic  61.5  40.25000 1992-06-02         NA  21.000000 22.3935688 32.640909\n1981 chic  65.0  48.25000 1992-06-03         NA  55.000000 42.6927083 36.607246\n1982 chic  65.5  60.75000 1992-06-04         NA  51.000000 24.6718750 34.140476\n1983 chic  67.5  58.37500 1992-06-05         NA  53.714286 32.2926136 34.132143\n1984 chic  67.5  56.62500 1992-06-06         NA  53.000000 33.1093750 36.166667\n1985 chic  66.5  44.50000 1992-06-07         NA  19.000000 33.3958333 18.483333\n1986 chic  62.0  47.75000 1992-06-08         NA  19.000000 22.9479167 25.445833\n1987 chic  65.0  43.87500 1992-06-09         NA  18.000000 26.0276268 20.358333\n1988 chic  64.0  42.50000 1992-06-10         NA  27.000000 28.0512599 31.868297\n1989 chic  67.0  47.25000 1992-06-11         NA  41.857143 27.0556418 38.266667\n1990 chic  69.0  45.75000 1992-06-12         NA  35.000000 40.7231571 42.414130\n1991 chic  73.5  52.12500 1992-06-13         NA  61.000000 45.3281250 49.575000\n1992 chic  75.5  61.00000 1992-06-14         NA  45.000000 41.2447917 23.391667\n1993 chic  71.0  54.37500 1992-06-15         NA  45.000000 33.0303442 23.694565\n1994 chic  75.5  62.00000 1992-06-16         NA  76.000000 44.3906250 24.071146\n1995 chic  75.5  62.75000 1992-06-17         NA  72.285714 27.7550725 24.667754\n1996 chic  73.0  59.12500 1992-06-18         NA  42.000000 27.6248297 24.811759\n1997 chic  59.5  47.12500 1992-06-19         NA         NA 19.2288647 14.175000\n1998 chic  51.5  38.50000 1992-06-20         NA   2.000000 20.4928977 11.012121\n1999 chic  49.0  33.37500 1992-06-21         NA   9.000000 20.6822917 13.675000\n2000 chic  52.5  43.00000 1992-06-22         NA  62.000000 13.6607143 35.841667\n2001 chic  66.0  52.25000 1992-06-23         NA  48.142857 31.1379630 35.350000\n2002 chic  62.5  51.25000 1992-06-24         NA  40.000000 31.9844276 29.803810\n2003 chic  64.0  57.50000 1992-06-25         NA  50.000000 23.8234702 34.505303\n2004 chic  61.5  52.37500 1992-06-26         NA  41.000000 26.1209340 24.732246\n2005 chic  58.0  35.37500 1992-06-27         NA  17.000000 21.5937500 15.591667\n2006 chic  62.0  49.00000 1992-06-28         NA  38.000000 25.1197917 36.658333\n2007 chic  71.5  54.25000 1992-06-29         NA  53.500000 33.4093837 31.865476\n2008 chic  66.5  52.50000 1992-06-30         NA  18.000000 29.0138889 20.408333\n2009 chic  74.5  64.62500 1992-07-01         NA  75.000000 50.8287037 37.975000\n2010 chic  77.0  65.62500 1992-07-02         NA  79.000000 22.1914983 32.668478\n2011 chic  67.0  55.37500 1992-07-03         NA  24.000000 19.1041667 16.483333\n2012 chic  71.0  62.00000 1992-07-04         NA  24.000000 29.5312500 18.333333\n2013 chic  68.5  52.12500 1992-07-05         NA  19.714286 21.5781250 17.083333\n2014 chic  66.0  49.00000 1992-07-06         NA         NA 18.7339884 20.687879\n2015 chic  67.5  64.62500 1992-07-07         NA  59.000000 19.0673401 28.441667\n2016 chic  79.5  68.25000 1992-07-08         NA  66.000000 29.1580113 23.409211\n2017 chic  74.0  64.62500 1992-07-09         NA  32.000000 13.8949275 33.066667\n2018 chic  76.5  60.25000 1992-07-10         NA  32.000000 24.1034622 30.325000\n2019 chic  73.0  64.50000 1992-07-11         NA  31.625000 25.9120370 29.125000\n2020 chic  73.5  71.62500 1992-07-12         NA  25.000000 19.0468750 16.760417\n2021 chic  69.5  68.75000 1992-07-13         NA  14.000000 20.7349034 22.164493\n2022 chic  65.0  60.12500 1992-07-14         NA  11.000000 18.6648099 18.716667\n2023 chic  68.0  51.87500 1992-07-15         NA  19.000000 23.5387205 19.446443\n2024 chic  68.0  66.87500 1992-07-16         NA  41.000000 13.3979469 35.372727\n2025 chic  74.0  61.87500 1992-07-17         NA  28.000000 17.7500000 26.125000\n2026 chic  68.0  62.62500 1992-07-18         NA  23.000000 17.3935185 21.620833\n2027 chic  72.5  67.87500 1992-07-19         NA  24.000000 26.6435185 22.033333\n2028 chic  68.0  59.37500 1992-07-20         NA  18.000000 18.9472625 19.999242\n2029 chic  62.0  48.75000 1992-07-21         NA   7.000000 20.7447665 12.631159\n2030 chic  63.5  60.12500 1992-07-22         NA  29.000000 18.8892915 21.339150\n2031 chic  62.5  58.00000 1992-07-23         NA  29.000000 20.1201691 19.775000\n2032 chic  67.0  60.87500 1992-07-24         NA  24.000000 26.9297138 21.240476\n2033 chic  67.5  70.62500 1992-07-25         NA  33.000000 18.1435185 28.875000\n2034 chic  74.0  64.12500 1992-07-26         NA  35.000000 20.2916667 20.779167\n2035 chic  71.5  57.62500 1992-07-27         NA  29.000000 17.2003968 24.737500\n2036 chic  71.5  67.12500 1992-07-28         NA  42.000000 20.5984300 27.650000\n2037 chic  66.5  55.25000 1992-07-29         NA  23.125000 14.4122383 17.147694\n2038 chic  61.5  62.75000 1992-07-30         NA  17.000000 13.4907407 17.845833\n2039 chic  67.0  51.50000 1992-07-31         NA  19.000000 20.4134461 21.048214\n2040 chic  68.0  57.37500 1992-08-01         NA         NA 23.6203704 21.137500\n2041 chic  69.0  62.50000 1992-08-02         NA  23.000000 22.8055556 21.358333\n2042 chic  65.5  57.25000 1992-08-03         NA  34.000000 11.6376812 27.119242\n2043 chic  62.5  50.12500 1992-08-04         NA  22.500000 13.2962963 18.103080\n2044 chic  63.0  49.75000 1992-08-05         NA  24.000000 22.3870974 17.948480\n2045 chic  67.5  56.87500 1992-08-06         NA  28.000000 30.3643378 26.273864\n2046 chic  68.5  69.37500 1992-08-07         NA  61.500000 30.3716238 30.138889\n2047 chic  75.5  68.50000 1992-08-08         NA  45.000000 32.4427083 19.236111\n2048 chic  80.0  77.25000 1992-08-09         NA  46.000000 28.2604167 19.923611\n2049 chic  79.0  58.37500 1992-08-10         NA  33.250000 23.2708333 17.027778\n2050 chic  70.0  52.37500 1992-08-11         NA  26.000000 23.4866052 21.575873\n2051 chic  62.0  56.75000 1992-08-12         NA  26.000000 10.3691077 22.745833\n2052 chic  60.5  50.12500 1992-08-13         NA  22.500000 19.1508198 17.457413\n2053 chic  61.0  46.37500 1992-08-14         NA  26.000000 17.2292673 21.308333\n2054 chic  62.0  48.75000 1992-08-15         NA  13.000000 26.8888889 13.854167\n2055 chic  63.0  48.87500 1992-08-16         NA  24.285714 26.2962963 21.025000\n2056 chic  63.0  51.12500 1992-08-17         NA  82.000000 22.5092593 41.375000\n2057 chic  66.0  61.00000 1992-08-18         NA  56.500000 21.9605475 30.875000\n2058 chic  63.0  50.50000 1992-08-19         NA  18.000000 15.1904187 19.800774\n2059 chic  62.0  46.37500 1992-08-20         NA  63.000000 15.5722625 24.325000\n2060 chic  64.5  54.12500 1992-08-21         NA  76.500000 23.3305153 41.591342\n2061 chic  67.0  61.87500 1992-08-22         NA  56.000000 33.5462963 38.516667\n2062 chic  75.0  66.12500 1992-08-23         NA  59.500000 30.5740741 24.850000\n2063 chic  78.5  68.12500 1992-08-24         NA  77.500000 20.6833187 27.141667\n2064 chic  79.0  67.75000 1992-08-25         NA  46.000000 23.9583333 23.912771\n2065 chic  66.5  60.37500 1992-08-26         NA  19.500000 12.1758658 16.383679\n2066 chic  59.5  54.87500 1992-08-27         NA  31.000000  8.4612795 14.697727\n2067 chic  59.5  48.50000 1992-08-28         NA  22.750000 11.5670107 21.250379\n2068 chic  65.0  59.25000 1992-08-29         NA  51.500000 23.3703704 21.675000\n2069 chic  66.0  51.37500 1992-08-30         NA  31.000000 22.1203704 11.358333\n2070 chic  63.5  51.75000 1992-08-31         NA  38.000000 12.8101852 24.700000\n2071 chic  63.0  58.25000 1992-09-01         NA  63.000000 16.6111111 30.570455\n2072 chic  70.0  66.50000 1992-09-02         NA  56.000000 16.8967391 25.284420\n2073 chic  67.5  51.12500 1992-09-03         NA  32.285714 16.3750915 25.167391\n2074 chic  65.5  57.62500 1992-09-04         NA  33.000000 19.2175926 33.710507\n2075 chic  70.5  65.75000 1992-09-05         NA  34.500000 23.3593750 21.183333\n2076 chic  75.0  66.75000 1992-09-06         NA  36.000000 27.8802083 18.545833\n2077 chic  73.5  65.50000 1992-09-07         NA  34.500000 31.5335145 22.766667\n2078 chic  64.0  48.12500 1992-09-08         NA  54.000000 16.5157295 19.051630\n2079 chic  63.0  62.87500 1992-09-09         NA  18.750000  6.3256844 29.427070\n2080 chic  60.0  48.75000 1992-09-10         NA  41.500000 11.0179879 17.479167\n2081 chic  58.0  51.62500 1992-09-11         NA  38.500000 10.1141304 24.728030\n2082 chic  62.0  51.00000 1992-09-12         NA  39.000000 20.7222222 30.108333\n2083 chic  67.5  56.25000 1992-09-13         NA  50.000000 33.4074074 23.575000\n2084 chic  72.5  70.00000 1992-09-14         NA  69.500000 23.6620370 35.316667\n2085 chic  76.5  69.12500 1992-09-15         NA  44.857143 19.9551127 34.818182\n2086 chic  77.0  65.25000 1992-09-16         NA 103.500000 33.7055153 25.985145\n2087 chic  71.5  66.62500 1992-09-17         NA  66.000000 20.7419485 32.653623\n2088 chic  62.0  44.50000 1992-09-18         NA  41.500000 19.2435222 21.690476\n2089 chic  53.5  42.37500 1992-09-19         NA  30.500000 13.9596561 28.650000\n2090 chic  59.0  56.37500 1992-09-20         NA  27.000000 18.1145833 24.941667\n2091 chic  64.0  62.50000 1992-09-21         NA  36.142857  6.3088768 26.116667\n2092 chic  51.5  39.25000 1992-09-22         NA  37.000000 12.1795743 20.206977\n2093 chic  49.5  39.37500 1992-09-23         NA  25.000000 12.9270833 23.393182\n2094 chic  53.5  41.25000 1992-09-24         NA  36.500000 15.1979167 27.886111\n2095 chic  59.5  53.75000 1992-09-25         NA  53.500000 16.3389946 35.408333\n2096 chic  63.0  60.00000 1992-09-26         NA  28.000000 14.5625000 25.008333\n2097 chic  59.0  43.12500 1992-09-27         NA  18.125000 13.7031250 19.500000\n2098 chic  49.5  36.75000 1992-09-28         NA  37.500000 12.0332880 26.808333\n2099 chic  49.5  38.50000 1992-09-29         NA  76.500000  8.7325634 37.902141\n2100 chic  53.5  43.12500 1992-09-30         NA  95.500000 11.8079710 48.361153\n2101 chic  58.5  48.00000 1992-10-01         NA  89.500000 15.5253623 48.046377\n2102 chic  63.5  53.62500 1992-10-02         NA  86.000000 21.4043881 42.696485\n2103 chic  66.0  52.62500 1992-10-03         NA  40.857143 29.6712963 28.637319\n2104 chic  59.0  46.50000 1992-10-04         NA  30.500000 23.6527778 13.883333\n2105 chic  53.0  41.87500 1992-10-05         NA  23.000000 15.4583333 23.469048\n2106 chic  53.0  45.50000 1992-10-06         NA  72.000000 11.1418350 38.144862\n2107 chic  58.0  52.00000 1992-10-07         NA  87.000000 19.6596399 38.310870\n2108 chic  57.5  41.00000 1992-10-08         NA  46.000000 16.3357488 25.582971\n2109 chic  49.0  45.75000 1992-10-09         NA  19.285714  7.1649832 18.458333\n2110 chic  51.5  41.75000 1992-10-10         NA  50.000000 11.9120370 24.531250\n2111 chic  51.5  36.37500 1992-10-11         NA  59.500000 13.4722222 22.760417\n2112 chic  53.5  28.62500 1992-10-12         NA  57.000000 14.9861111 26.072917\n2113 chic  47.0  38.25000 1992-10-13         NA  64.000000  9.3085017 30.580303\n2114 chic  55.5  49.00000 1992-10-14         NA  44.500000  9.9874339 30.807576\n2115 chic  50.0  49.37500 1992-10-15         NA  19.000000  4.8630888 20.436232\n2116 chic  40.5  27.50000 1992-10-16         NA  31.500000  6.7962963 19.920833\n2117 chic  38.5  29.37500 1992-10-17         NA  32.500000  8.9629630 28.191667\n2118 chic  35.0  18.12500 1992-10-18         NA  37.000000 15.7638889 20.408333\n2119 chic  33.0  20.00000 1992-10-19         NA  30.000000  9.2962963 33.641667\n2120 chic  45.5  42.37500 1992-10-20         NA  41.000000  9.7786195 25.368478\n2121 chic  47.0  40.25000 1992-10-21         NA  43.250000  9.9302811 25.076252\n2122 chic  57.5  57.87500 1992-10-22         NA  63.000000 11.8659555 41.165382\n2123 chic  67.0  56.87500 1992-10-23         NA 129.000000 17.2592844 35.675000\n2124 chic  51.0  42.50000 1992-10-24         NA  30.500000 17.5885417 22.516667\n2125 chic  49.0  43.12500 1992-10-25         NA  37.000000 12.1944444 29.925000\n2126 chic  49.0  38.12500 1992-10-26         NA  40.500000 15.2401369 26.141667\n2127 chic  46.5  35.75000 1992-10-27         NA  77.428571  6.1851852 45.059554\n2128 chic  50.5  34.75000 1992-10-28         NA 119.000000  7.9973650 40.455435\n2129 chic  45.0  37.12500 1992-10-29         NA  30.000000 14.5253623 20.317029\n2130 chic  45.0  37.87500 1992-10-30         NA  24.500000 13.3611111 20.033333\n2131 chic  44.0  35.87500 1992-10-31         NA  18.000000 13.5509259 20.833333\n2132 chic  45.5  44.12500 1992-11-01         NA  30.000000 12.1145833 15.150000\n2133 chic  48.0  35.75000 1992-11-02         NA  11.714286  3.4605978 18.000000\n2134 chic  37.0  35.00000 1992-11-03         NA  15.000000  5.8645833 25.241667\n2135 chic  35.5  28.75000 1992-11-04         NA  13.000000  5.1934289 21.593939\n2136 chic  32.5  22.50000 1992-11-05         NA  26.000000  4.3257576 27.244231\n2137 chic  34.0  21.75000 1992-11-06         NA  21.000000  4.7735507 29.645833\n2138 chic  34.0  30.87500 1992-11-07         NA  27.500000  5.6000000 28.770833\n2139 chic  38.0  35.12500 1992-11-08         NA  27.125000  4.1041667 22.822917\n2140 chic  48.0  41.62500 1992-11-09         NA  32.000000  7.2083333 26.687500\n2141 chic  49.5  51.00000 1992-11-10         NA  37.000000  5.3333333 26.891667\n2142 chic  44.5  39.37500 1992-11-11         NA  24.000000  6.2083333 19.833333\n2143 chic  40.0  27.62500 1992-11-12         NA         NA  6.8409091 21.129381\n2144 chic  30.5  20.87500 1992-11-13         NA  27.500000 11.7500000 20.700000\n2145 chic  28.0  16.87500 1992-11-14         NA  18.714286  7.6666667 21.850000\n2146 chic  29.0  21.62500 1992-11-15         NA  27.000000  7.5416667 22.258333\n2147 chic  36.5  37.37500 1992-11-16         NA  33.000000  3.7500000 28.408333\n2148 chic  38.5  32.75000 1992-11-17         NA  42.500000  3.7777778 25.696667\n2149 chic  39.0  34.25000 1992-11-18         NA  28.500000  9.0845411 19.987500\n2150 chic  40.5  37.12500 1992-11-19         NA  33.500000  7.7171717 24.470690\n2151 chic  52.0  44.50000 1992-11-20         NA  32.857143  6.2083333 32.075000\n2152 chic  48.5  40.37500 1992-11-21         NA  20.500000  5.3750000 15.125000\n2153 chic  41.0  39.50000 1992-11-22         NA  11.500000 11.8333333 12.383333\n2154 chic  38.0  36.37500 1992-11-23         NA  34.500000  3.7500000 26.529529\n2155 chic  39.5  37.87500 1992-11-24         NA  26.000000  3.6712121 23.966667\n2156 chic  43.5  42.50000 1992-11-25         NA  37.500000  2.4166667 18.746739\n2157 chic  36.5  26.00000 1992-11-26         NA  11.714286  7.6944444 13.566667\n2158 chic  29.5  24.12500 1992-11-27         NA  30.500000  5.5694444 23.625000\n2159 chic  30.0  25.62500 1992-11-28         NA  32.500000  4.9027778 24.241667\n2160 chic  35.0  30.87500 1992-11-29         NA  28.000000  6.3194444 23.100000\n2161 chic  33.5  25.25000 1992-11-30         NA  53.000000  4.1884058 21.833333\n2162 chic  32.0  28.00000 1992-12-01         NA  18.000000  3.6944444 23.150000\n2163 chic  32.5  19.87500 1992-12-02         NA  21.428571  7.1998792 22.583333\n2164 chic  28.0  23.37500 1992-12-03         NA  21.000000  6.5067523 26.841667\n2165 chic  25.5  11.87500 1992-12-04         NA  48.000000  7.1805556 24.198913\n2166 chic  19.5   9.25000 1992-12-05         NA  25.000000  7.5694444 25.975000\n2167 chic  23.0  25.75000 1992-12-06         NA  23.500000  2.7361111 25.691667\n2168 chic  27.0  21.12500 1992-12-07         NA  36.500000  5.0138889 27.158333\n2169 chic  26.5  21.62500 1992-12-08         NA  32.000000  6.5883838 29.179928\n2170 chic  27.5  27.62500 1992-12-09         NA  42.000000  3.2536232 27.333333\n2171 chic  32.0  29.37500 1992-12-10         NA  47.500000  2.0434783 30.658333\n2172 chic  33.0  30.37500 1992-12-11         NA  32.500000  2.0000000 29.916667\n2173 chic  32.0  30.25000 1992-12-12         NA  32.000000  8.5972222 27.033333\n2174 chic  32.0  31.00000 1992-12-13         NA  26.000000  9.0833333 20.133333\n2175 chic  29.5  30.75000 1992-12-14         NA  37.285714  2.6044686 27.940476\n2176 chic  44.0  45.50000 1992-12-15         NA  28.000000  3.2866162 27.065942\n2177 chic  37.5  29.62500 1992-12-16         NA  26.000000  2.6666667 20.537500\n2178 chic  30.5  20.12500 1992-12-17         NA  36.000000  3.0000000 24.158333\n2179 chic  30.0  27.12500 1992-12-18         NA  30.500000  2.4027778 22.608333\n2180 chic  31.0  26.25000 1992-12-19         NA  32.000000  2.5416667 22.441667\n2181 chic  19.5  11.75000 1992-12-20         NA  23.875000  7.0972222 21.433333\n2182 chic  26.0  25.50000 1992-12-21         NA  46.500000  2.2500000 28.893841\n2183 chic  33.0  30.12500 1992-12-22         NA  44.500000  2.0000000 31.813636\n2184 chic  21.5   5.25000 1992-12-23         NA  53.000000  4.5314010 24.325362\n2185 chic  10.0   7.75000 1992-12-24         NA  39.000000  6.8194444 21.908333\n2186 chic  18.0   1.75000 1992-12-25         NA  75.000000 14.2222222 12.375000\n2187 chic  14.5   3.25000 1992-12-26         NA  27.142857  7.2222222 23.916667\n2188 chic  30.5  25.37500 1992-12-27         NA  31.000000  4.4305556 24.766667\n2189 chic  38.5  36.62500 1992-12-28         NA  36.000000  2.0000000 22.497727\n2190 chic  41.5  42.12500 1992-12-29         NA  43.000000  2.0000000 21.177451\n2191 chic  45.5  43.62500 1992-12-30         NA  43.000000  2.0000000 20.392172\n2192 chic  26.0  11.00000 1992-12-31         NA  44.000000  2.0833333 17.558333\n2193 chic  14.0   9.37500 1993-01-01         NA  18.142857  4.3055556 22.608333\n2194 chic  25.0  28.25000 1993-01-02         NA  17.500000  1.5416667 23.808333\n2195 chic  40.5  44.87500 1993-01-03         NA  21.500000  0.5277778 19.825000\n2196 chic  38.5  32.50000 1993-01-04         NA  17.000000  0.8333333 18.166667\n2197 chic  27.5  21.50000 1993-01-05         NA  12.000000  0.9532828 22.087088\n2198 chic  21.5  16.50000 1993-01-06         NA  34.000000  1.7777778 26.718182\n2199 chic  24.5  20.62500 1993-01-07         NA  19.875000  1.6900527 27.083333\n2200 chic  21.5  17.87500 1993-01-08         NA  14.000000 14.2506039 25.600000\n2201 chic  24.5  20.25000 1993-01-09         NA   3.000000 24.9583333 11.658333\n2202 chic  24.5  22.37500 1993-01-10         NA   8.000000 24.1666667 13.283333\n2203 chic  26.5  23.25000 1993-01-11         NA  14.500000 12.8194444 22.508333\n2204 chic  30.5  33.00000 1993-01-12         NA  32.000000  1.5277778 27.104348\n2205 chic  27.5  21.25000 1993-01-13         NA  20.875000  3.0492424 29.516667\n2206 chic  21.5  20.25000 1993-01-14         NA  12.500000  4.0241546 37.076812\n2207 chic  18.0  14.50000 1993-01-15         NA  31.500000  5.7815657 31.814394\n2208 chic  22.0  27.62500 1993-01-16         NA  25.500000  3.2361111 33.025000\n2209 chic  20.5   5.00000 1993-01-17         NA  22.000000 17.5972222 22.258333\n2210 chic  18.0  15.25000 1993-01-18         NA  51.000000  8.0555556 34.408333\n2211 chic  18.5  13.50000 1993-01-19         NA  49.571429  6.0289855 43.205435\n2212 chic  27.0  31.62500 1993-01-20         NA  41.500000  4.3888889 33.197464\n2213 chic  35.5  34.00000 1993-01-21         NA  19.000000  0.6527778 27.002841\n2214 chic  34.0  26.12500 1993-01-22         NA  24.500000  5.9444444 28.281250\n2215 chic  36.5  31.62500 1993-01-23         NA  20.000000  9.5972222 24.145833\n2216 chic  28.5  14.00000 1993-01-24         NA  26.000000 16.5277778 14.885417\n2217 chic  23.0  11.62500 1993-01-25         NA  29.875000  7.7500000 30.077083\n2218 chic  30.0  30.00000 1993-01-26         NA  52.500000  6.5772947 27.176449\n2219 chic  31.5  25.25000 1993-01-27         NA  31.500000  7.7312802 29.664827\n2220 chic  30.5  21.37500 1993-01-28         NA  36.500000  7.2350427 24.816667\n2221 chic  15.5   4.00000 1993-01-29         NA  19.500000 11.7500000 21.658333\n2222 chic  25.5  14.25000 1993-01-30         NA  41.500000 14.3888889 17.533333\n2223 chic  38.5  30.75000 1993-01-31         NA  20.500000 13.2083333 19.625000\n2224 chic  30.5  18.00000 1993-02-01         NA  13.500000 20.6944444 16.219118\n2225 chic  28.5  17.00000 1993-02-02         NA  12.000000  7.2125604 34.135705\n2226 chic  35.5  24.87500 1993-02-03         NA  64.000000  3.0997475 39.545787\n2227 chic  38.0  22.50000 1993-02-04         NA  96.500000  7.2916667 43.349781\n2228 chic  36.5  29.25000 1993-02-05         NA  74.500000  7.8586957 36.236045\n2229 chic  29.0  21.37500 1993-02-06         NA  12.375000 17.4861111 17.263889\n2230 chic  32.0  30.00000 1993-02-07         NA  26.500000  6.8055556 21.451389\n2231 chic  30.0  21.25000 1993-02-08         NA  11.500000 15.6805556 18.471230\n2232 chic  32.5  33.37500 1993-02-09         NA  40.500000  1.0492424 26.394895\n2233 chic  35.0  32.37500 1993-02-10         NA  20.000000  6.8550725 22.660804\n2234 chic  32.0  25.62500 1993-02-11         NA  16.500000 14.4583333 15.575000\n2235 chic  29.0  27.25000 1993-02-12         NA  20.375000 13.9055556 19.110000\n2236 chic  28.5  26.62500 1993-02-13         NA  11.000000  7.5000000 26.208333\n2237 chic  27.0  20.37500 1993-02-14         NA  23.000000 17.6666667 18.444444\n2238 chic  24.5  18.75000 1993-02-15         NA  37.000000  9.8750000 28.444444\n2239 chic  25.5  13.37500 1993-02-16         NA  22.000000 15.4154040 27.038333\n2240 chic  10.5  -5.00000 1993-02-17         NA  39.000000 15.7638889 23.984848\n2241 chic   7.5   4.87500 1993-02-18         NA  27.750000 13.8756039 25.609058\n2242 chic  15.0  16.62500 1993-02-19         NA  66.500000  9.3888889 39.246032\n2243 chic  25.5  23.75000 1993-02-20         NA  44.500000 13.1388889 39.658333\n2244 chic  29.0  26.87500 1993-02-21         NA  23.000000 11.3750000 24.050000\n2245 chic  22.0  18.00000 1993-02-22         NA  18.500000 12.8194444 32.944979\n2246 chic  12.0   2.75000 1993-02-23         NA  36.500000 11.9861111 30.125000\n2247 chic   5.0  -1.87500 1993-02-24         NA  39.750000  9.1148990 35.112374\n2248 chic  10.0  15.50000 1993-02-25         NA  37.000000 12.4166667 35.233440\n2249 chic  22.0  12.75000 1993-02-26         NA  16.500000 18.5132850 30.334678\n2250 chic  19.0  13.62500 1993-02-27         NA  52.500000 10.3611111 48.901389\n2251 chic  20.0  19.62500 1993-02-28         NA  44.500000 28.4444444 46.232488\n2252 chic  34.5  31.62500 1993-03-01         NA  47.000000 23.6944444 43.209038\n2253 chic  38.5  34.12500 1993-03-02         NA  52.000000  8.2182540 47.176587\n2254 chic  38.5  32.25000 1993-03-03         NA  27.000000 31.3659420 31.632071\n2255 chic  34.5  29.87500 1993-03-04         NA  20.500000 30.3333333 20.312500\n2256 chic  34.5  18.75000 1993-03-05         NA  36.000000 16.9556159 31.128568\n2257 chic  36.0  29.12500 1993-03-06         NA  20.000000  9.5416667 38.618056\n2258 chic  34.0  33.00000 1993-03-07         NA  27.000000 10.3125000 24.812500\n2259 chic  38.0  27.87500 1993-03-08         NA  24.625000 10.5000000 24.755682\n2260 chic  36.5  26.87500 1993-03-09         NA  26.000000 19.3055556 23.604167\n2261 chic  32.5  27.37500 1993-03-10         NA  22.500000  7.4053030 30.028968\n2262 chic  26.0  21.50000 1993-03-11         NA  35.000000  9.5138889 28.062500\n2263 chic  22.0  12.50000 1993-03-12         NA  48.000000 11.5921717 35.888889\n2264 chic  17.0   1.50000 1993-03-13         NA  43.000000 17.4583333 22.708333\n2265 chic  14.5   2.75000 1993-03-14         NA  24.875000 15.8888889 23.937500\n2266 chic  30.5  30.12500 1993-03-15         NA  85.000000 16.7708333 31.486111\n2267 chic  37.5  30.25000 1993-03-16         NA  24.000000 17.3750000 27.022947\n2268 chic  21.5   6.00000 1993-03-17         NA  26.000000 26.3376068 19.491667\n2269 chic  23.0  15.87500 1993-03-18         NA  10.000000 26.4381313 23.357049\n2270 chic  29.5  30.37500 1993-03-19         NA  29.000000  8.1224747 29.447691\n2271 chic  35.0  32.00000 1993-03-20         NA  40.571429  4.1177536 27.790761\n2272 chic  35.0  31.25000 1993-03-21         NA  42.000000 12.3888889 30.201389\n2273 chic  35.0  35.00000 1993-03-22         NA  26.500000 17.5996377 24.281401\n2274 chic  39.5  38.50000 1993-03-23         NA  27.000000  7.0039683 29.065355\n2275 chic  38.0  37.25000 1993-03-24         NA  33.000000  5.9166667 28.910564\n2276 chic  40.0  37.25000 1993-03-25         NA  36.500000  8.6920290 26.769841\n2277 chic  39.0  35.00000 1993-03-26         NA  33.375000 24.7874396 27.711655\n2278 chic  37.5  33.75000 1993-03-27         NA  19.000000 29.0833333 23.430556\n2279 chic  41.5  33.50000 1993-03-28         NA  17.000000 27.6944444 27.611111\n2280 chic  50.0  33.25000 1993-03-29         NA  40.000000 23.6527778 41.844807\n2281 chic  50.0  45.62500 1993-03-30         NA  41.500000 24.2620773 41.421196\n2282 chic  44.0  36.25000 1993-03-31         NA  31.500000 21.8365385 21.987103\n2283 chic  31.0  27.12500 1993-04-01         NA  11.625000 26.9351852 15.086310\n2284 chic  31.0  19.62500 1993-04-02         NA  41.000000 18.8820451 29.449907\n2285 chic  33.5  25.00000 1993-04-03         NA  24.500000 17.7175926 33.937500\n2286 chic  31.5  27.12500 1993-04-04         NA  32.500000 23.8703704 27.861111\n2287 chic  36.5  30.37500 1993-04-05         NA  32.000000 21.0946055 23.902778\n2288 chic  40.0  32.25000 1993-04-06         NA  34.000000 21.5108696 31.069444\n2289 chic  47.5  43.50000 1993-04-07         NA  57.250000 15.9351486 33.365036\n2290 chic  55.5  52.75000 1993-04-08         NA  45.500000 14.3041282 32.318182\n2291 chic  48.5  35.12500 1993-04-09         NA  35.000000 20.2129630 25.611111\n2292 chic  46.0  32.25000 1993-04-10         NA  26.500000 22.1388889 24.937500\n2293 chic  43.5  34.25000 1993-04-11         NA  15.000000 19.8333333 15.743056\n2294 chic  41.0  31.00000 1993-04-12         NA  20.000000 27.9364478 18.180556\n2295 chic  39.5  29.12500 1993-04-13         NA  31.428571 25.2692139 22.841540\n2296 chic  44.5  42.75000 1993-04-14         NA  41.000000 18.6226577 27.149457\n2297 chic  43.5  42.00000 1993-04-15         NA  22.500000 10.4394985 29.124008\n2298 chic  38.0  32.37500 1993-04-16         NA  24.000000 16.8240741 22.888889\n2299 chic  43.5  37.37500 1993-04-17         NA  37.000000 23.5231481 25.930556\n2300 chic  50.5  46.00000 1993-04-18         NA  28.000000 29.7731481 22.673611\n2301 chic  51.0  50.75000 1993-04-19         NA  30.875000 14.7175926 33.416667\n2302 chic  38.0  27.87500 1993-04-20         NA  28.000000 24.2445652 18.457071\n2303 chic  42.0  19.37500 1993-04-21         NA  43.500000 20.2952188 31.155696\n2304 chic  48.0  25.37500 1993-04-22         NA  63.500000 18.2182540 41.152778\n2305 chic  52.5  41.37500 1993-04-23         NA  63.500000 24.6382484 40.133838\n2306 chic  64.5  46.37500 1993-04-24         NA 100.000000 34.1851852 15.465278\n2307 chic  50.0  38.12500 1993-04-25         NA  18.000000 31.0925926 15.750000\n2308 chic  40.0  29.37500 1993-04-26         NA  18.500000 21.3110269 17.627553\n2309 chic  49.5  46.87500 1993-04-27         NA  67.000000 21.3657407 25.908213\n2310 chic  64.5  48.75000 1993-04-28         NA  46.000000 21.0408615 33.756944\n2311 chic  52.5  49.00000 1993-04-29         NA  48.500000  7.5201105 38.163345\n2312 chic  57.0  38.25000 1993-04-30         NA  42.500000 12.1064815 36.868056\n2313 chic  59.0  48.75000 1993-05-01         NA  35.000000 30.7268519 22.326389\n2314 chic  61.0  59.50000 1993-05-02         NA  31.000000 25.1472222 25.604167\n2315 chic  61.5  57.75000 1993-05-03         NA  31.500000 20.0703071 27.121291\n2316 chic  60.5  56.50000 1993-05-04         NA  34.000000 16.2316462 34.496404\n2317 chic  61.0  54.50000 1993-05-05         NA  53.500000 12.8896166 37.206349\n2318 chic  62.5  48.62500 1993-05-06         NA  71.500000 15.6750842 48.282119\n2319 chic  66.5  48.75000 1993-05-07         NA  60.375000 33.6874144 42.745833\n2320 chic  72.5  51.25000 1993-05-08         NA  52.000000 44.3009259 28.215278\n2321 chic  74.5  57.12500 1993-05-09         NA  59.000000 36.9583333 29.097222\n2322 chic  75.0  59.12500 1993-05-10         NA  72.000000 36.1708333 35.180556\n2323 chic  63.5  45.62500 1993-05-11         NA  37.500000 28.3630508 28.667298\n2324 chic  62.5  32.37500 1993-05-12         NA  50.500000 21.4507905 24.145574\n2325 chic  48.5  33.75000 1993-05-13         NA  23.125000 16.9920290 17.555556\n2326 chic  61.0  49.00000 1993-05-14         NA  52.000000 24.3202899 27.707882\n2327 chic  62.0  37.87500 1993-05-15         NA  73.500000 28.8125000 19.652778\n2328 chic  56.0  36.62500 1993-05-16         NA  44.500000 28.2916667 21.319444\n2329 chic  52.0  34.87500 1993-05-17         NA  30.500000 17.1579710 30.262255\n2330 chic  54.5  41.12500 1993-05-18         NA  51.000000 18.8254529 27.685579\n2331 chic  49.5  38.00000 1993-05-19         NA  24.625000 17.0335145 24.452295\n2332 chic  50.5  36.00000 1993-05-20         NA  61.500000 10.7178571 34.156566\n2333 chic  56.0  37.00000 1993-05-21         NA  53.000000 17.1538043 36.979167\n2334 chic  60.5  55.37500 1993-05-22         NA  43.000000 27.1458333 30.534722\n2335 chic  63.5  65.00000 1993-05-23         NA  20.000000 29.8833333 15.180556\n2336 chic  60.0  49.25000 1993-05-24         NA  34.000000 19.5721014 12.409722\n2337 chic  58.5  45.00000 1993-05-25         NA  28.000000 16.6827734 26.664526\n2338 chic  61.5  47.00000 1993-05-26         NA  50.000000 19.6416667 33.611111\n2339 chic  65.0  49.37500 1993-05-27         NA 107.000000 26.0112319 31.147041\n2340 chic  57.0  44.12500 1993-05-28         NA  92.500000 18.6224638 20.211988\n2341 chic  51.0  44.12500 1993-05-29         NA  16.000000 23.4629630 14.034722\n2342 chic  58.5  64.25000 1993-05-30         NA  28.000000 16.2500000 23.076389\n2343 chic  53.5  42.00000 1993-05-31         NA  11.500000 26.0370370 10.319444\n2344 chic  51.0  44.50000 1993-06-01         NA  31.000000 14.1727273 26.022096\n2345 chic  54.5  51.62500 1993-06-02         NA  32.000000 19.1234848 28.194664\n2346 chic  50.5  44.37500 1993-06-03         NA  31.500000 19.8540679 23.819444\n2347 chic  49.5  46.75000 1993-06-04         NA  19.500000 17.8911232 17.566943\n2348 chic  58.5  46.00000 1993-06-05         NA  23.000000 22.8875000 25.652778\n2349 chic  61.0  53.37500 1993-06-06         NA  31.625000 26.4125000 22.472222\n2350 chic  64.0  65.12500 1993-06-07         NA  36.000000  6.1296212 33.868056\n2351 chic  72.0  67.37500 1993-06-08         NA  25.000000 13.4642256 30.505462\n2352 chic  71.0  57.75000 1993-06-09         NA  34.000000 26.8257576 18.293561\n2353 chic  68.5  61.87500 1993-06-10         NA  63.000000 24.6500000 36.159722\n2354 chic  68.0  57.75000 1993-06-11         NA  36.000000 35.5093478 33.729167\n2355 chic  67.0  57.00000 1993-06-12         NA  40.571429 35.7208333 26.966667\n2356 chic  70.5  67.62500 1993-06-13         NA  52.000000 32.6458333 28.500000\n2357 chic  72.0  54.12500 1993-06-14         NA  43.000000 25.7684524 25.555952\n2358 chic  62.5  50.25000 1993-06-15         NA  33.000000 19.8937681 19.601087\n2359 chic  63.5  59.37500 1993-06-16         NA         NA 28.2992260 26.013225\n2360 chic  78.5  69.75000 1993-06-17         NA  62.000000 44.1802536 29.585870\n2361 chic  69.5  60.87500 1993-06-18         NA  32.500000 30.4458333 27.250000\n2362 chic  70.5  69.00000 1993-06-19         NA  28.000000 25.9537037 25.093750\n2363 chic  69.5  61.75000 1993-06-20         NA  18.000000 25.0694444 14.691667\n2364 chic  70.5  62.62500 1993-06-21         NA  30.000000 15.7244674 29.016204\n2365 chic  72.0  56.25000 1993-06-22         NA  47.000000 25.8967391 38.609127\n2366 chic  71.5  67.37500 1993-06-23         NA  59.000000 38.0438406 26.814915\n2367 chic  78.5  67.87500 1993-06-24         NA  49.875000 31.0643939 27.381944\n2368 chic  71.5  55.00000 1993-06-25         NA  34.000000 16.7433136 25.752345\n2369 chic  70.5  62.25000 1993-06-26         NA  35.000000 20.2441667 23.888889\n2370 chic  74.5  62.00000 1993-06-27         NA  27.000000 26.4791667 20.072917\n2371 chic  65.5  52.37500 1993-06-28         NA  19.000000 18.6049431 23.563095\n2372 chic  64.5  56.87500 1993-06-29         NA  24.000000 22.1983747 23.790687\n2373 chic  64.0  60.50000 1993-06-30         NA  33.250000 16.4796066 21.772865\n2374 chic  68.5  63.75000 1993-07-01         NA  36.000000 10.0480072 29.243659\n2375 chic  73.0  71.50000 1993-07-02         NA         NA 11.8518939 37.633838\n2376 chic  79.0  73.50000 1993-07-03         NA         NA 26.7083333 30.590278\n2377 chic  81.5  70.00000 1993-07-04         NA  70.000000 29.3541667 15.666667\n2378 chic  81.0  71.00000 1993-07-05         NA         NA 33.6541667 10.937500\n2379 chic  73.5  66.87500 1993-07-06         NA  23.750000 25.1070652 24.499369\n2380 chic  75.0  69.12500 1993-07-07         NA  31.000000 17.3366977 28.416667\n2381 chic  79.5  74.50000 1993-07-08         NA  47.000000 23.9311594 25.363043\n2382 chic  81.0  68.12500 1993-07-09         NA         NA 23.5853261 23.233333\n2383 chic  78.5  70.12500 1993-07-10         NA  25.000000 20.8791667 29.400000\n2384 chic  73.5  68.50000 1993-07-11         NA  29.000000 24.4083333 20.816667\n2385 chic  72.0  56.50000 1993-07-12         NA  28.285714 26.5750000 23.358333\n2386 chic  71.0  67.75000 1993-07-13         NA  40.000000 30.1625000 26.598333\n2387 chic  70.0  58.37500 1993-07-14         NA         NA 27.9927536 27.013889\n2388 chic  69.5  55.25000 1993-07-15         NA  15.000000 30.5229167 17.055556\n2389 chic  72.5  64.87500 1993-07-16         NA  47.000000 34.9458333 24.515399\n2390 chic  74.5  71.00000 1993-07-17         NA  60.000000 29.7750000 23.034722\n2391 chic  79.0  72.75000 1993-07-18         NA  38.625000 25.0556818 24.118056\n2392 chic  76.0  65.00000 1993-07-19         NA  43.000000 28.8250000 21.826389\n2393 chic  71.5  59.00000 1993-07-20         NA  33.000000 21.9233484 22.378157\n2394 chic  69.0  55.12500 1993-07-21         NA  29.000000 17.4902174 18.907828\n2395 chic  66.0  54.87500 1993-07-22         NA  24.000000 20.5943841 16.548611\n2396 chic  72.5  65.75000 1993-07-23         NA  57.000000 26.1639493 28.435414\n2397 chic  77.5  71.25000 1993-07-24         NA  46.500000 24.2186594 27.451169\n2398 chic  79.5  73.75000 1993-07-25         NA  36.000000 29.7083333 15.909722\n2399 chic  76.0  66.12500 1993-07-26         NA  33.000000 20.5818841 20.951389\n2400 chic  78.5  78.12500 1993-07-27         NA  66.000000 24.4192029 26.477273\n2401 chic  76.5  62.00000 1993-07-28         NA  51.000000 25.8407867 16.401389\n2402 chic  72.0  60.87500 1993-07-29         NA  34.000000 17.9174078 17.273853\n2403 chic  69.5  59.62500 1993-07-30         NA  31.625000 19.0258235 23.002525\n2404 chic  72.0  68.12500 1993-07-31         NA  46.000000 24.4583333 26.861111\n2405 chic  75.5  63.00000 1993-08-01         NA  26.500000 27.5583333 13.598128\n2406 chic  68.5  57.12500 1993-08-02         NA  42.500000 15.9000000 20.531944\n2407 chic  70.5  55.87500 1993-08-03         NA  42.500000 15.5728261 19.423611\n2408 chic  63.5  49.00000 1993-08-04         NA  38.500000 15.6845356 19.437500\n2409 chic  63.0  57.50000 1993-08-05         NA  36.875000 13.6126812 26.466667\n2410 chic  66.0  51.75000 1993-08-06         NA  32.000000 15.4938406 22.537879\n2411 chic  65.0  59.25000 1993-08-07         NA  26.000000 22.9291667 22.800000\n2412 chic  68.5  59.87500 1993-08-08         NA  37.500000 35.9445652 30.291667\n2413 chic  68.0  66.25000 1993-08-09         NA  55.000000 19.9250000 31.800000\n2414 chic  77.0  70.62500 1993-08-10         NA  67.500000 26.2540415 26.756159\n2415 chic  76.5  70.25000 1993-08-11         NA  79.250000 33.6243083 37.703788\n2416 chic  76.0  71.75000 1993-08-12         NA  59.000000 24.4883564 28.176389\n2417 chic  77.0  70.25000 1993-08-13         NA  71.000000 38.8621739 28.704980\n2418 chic  77.0  67.37500 1993-08-14         NA  83.500000 32.0882576 34.885101\n2419 chic  74.0  71.62500 1993-08-15         NA  52.500000 19.9000000 30.138889\n2420 chic  76.0  68.87500 1993-08-16         NA  41.000000 20.5368357 28.152778\n2421 chic  75.0  69.00000 1993-08-17         NA  40.285714 38.7960950 18.655303\n2422 chic  76.5  69.62500 1993-08-18         NA  56.000000 37.8836957 30.311308\n2423 chic  78.0  72.37500 1993-08-19         NA  57.500000 12.9125000 36.639520\n2424 chic  71.5  61.62500 1993-08-20         NA  28.000000 19.0284420 20.423611\n2425 chic  71.5  61.75000 1993-08-21         NA  20.000000 20.9500000 12.270833\n2426 chic  70.0  64.75000 1993-08-22         NA  26.500000 22.2583333 18.958333\n2427 chic  80.0  71.50000 1993-08-23         NA  55.250000 30.3715909 22.344907\n2428 chic  77.0  68.37500 1993-08-24         NA  40.000000 19.4242424 25.112864\n2429 chic  79.0  72.37500 1993-08-25         NA  52.000000 24.6742424 34.880682\n2430 chic  84.0  74.00000 1993-08-26         NA  66.500000 24.2098485 31.784722\n2431 chic  81.5  71.62500 1993-08-27         NA  85.500000 30.5262821 24.065217\n2432 chic  72.0  61.25000 1993-08-28         NA  14.000000 19.2608696 12.506944\n2433 chic  71.0  69.87500 1993-08-29         NA  26.285714 19.9916667 18.930556\n2434 chic  79.0  72.37500 1993-08-30         NA  78.000000 25.7924431 22.755478\n2435 chic  64.0  52.37500 1993-08-31         NA  24.000000 15.5011905 19.695048\n2436 chic  64.5  56.12500 1993-09-01         NA  31.500000 16.8591874 31.441468\n2437 chic  67.0  69.75000 1993-09-02         NA  36.000000  2.7121706 25.368056\n2438 chic  66.0  58.62500 1993-09-03         NA  36.000000 12.0500000 21.230374\n2439 chic  64.0  59.50000 1993-09-04         NA  24.000000 13.0375000 17.541667\n2440 chic  67.0  60.12500 1993-09-05         NA  18.000000 12.3333333 15.808333\n2441 chic  59.5  47.25000 1993-09-06         NA  18.000000 12.4208333 14.975000\n2442 chic  62.5  51.62500 1993-09-07         NA  65.000000 11.1795455 33.091667\n2443 chic  64.0  52.50000 1993-09-08         NA  38.000000 11.5538043 31.594697\n2444 chic  64.5  54.62500 1993-09-09         NA  40.000000 14.0847497 20.726010\n2445 chic  55.5  40.37500 1993-09-10         NA  34.285714 12.6507576 20.990278\n2446 chic  55.0  49.50000 1993-09-11         NA  40.500000 12.6125000 22.266667\n2447 chic  70.5  64.12500 1993-09-12         NA  44.500000 33.6791667 13.925000\n2448 chic  73.5  70.00000 1993-09-13         NA  36.000000 29.2501812 22.075000\n2449 chic  62.0  53.25000 1993-09-14         NA  23.000000  7.8304348 14.628877\n2450 chic  53.0  45.50000 1993-09-15         NA  15.000000  7.4208333 16.983333\n2451 chic  55.0  49.25000 1993-09-16         NA  29.875000  4.4994048 24.270833\n2452 chic  60.5  47.75000 1993-09-17         NA  36.000000 10.6083333 33.914855\n2453 chic  59.5  53.87500 1993-09-18         NA  39.000000  9.9458333 26.625000\n2454 chic  59.0  53.87500 1993-09-19         NA  26.000000 20.5375000 14.083333\n2455 chic  61.0  61.37500 1993-09-20         NA  44.500000  8.6125000 28.930556\n2456 chic  57.0  53.62500 1993-09-21         NA  31.500000  6.6268775 20.957071\n2457 chic  65.0  63.12500 1993-09-22         NA  33.250000  6.3972050 27.163087\n2458 chic  54.5  45.75000 1993-09-23         NA  24.500000  8.5541667 19.249242\n2459 chic  53.5  47.37500 1993-09-24         NA  50.000000  8.2206522 33.958333\n2460 chic  56.5  54.87500 1993-09-25         NA  33.500000  9.7728070 21.364583\n2461 chic  59.0  53.37500 1993-09-26         NA  26.000000 18.9120370 21.500000\n2462 chic  49.5  39.37500 1993-09-27         NA  30.000000  5.2327441 18.093750\n2463 chic  51.5  39.75000 1993-09-28         NA  25.750000  7.2977602 23.267754\n2464 chic  46.5  37.50000 1993-09-29         NA  31.000000  3.5954545 21.619394\n2465 chic  46.5  39.75000 1993-09-30         NA  45.000000 11.1924172 22.668780\n2466 chic  56.5  36.87500 1993-10-01         NA  37.000000 15.9300725 21.560826\n2467 chic  45.0  25.12500 1993-10-02         NA  30.500000 12.5916667 21.523359\n2468 chic  52.0  47.00000 1993-10-03         NA  33.000000 19.7875000 13.250000\n2469 chic  50.5  40.50000 1993-10-04         NA  23.500000 13.7075828 19.326667\n2470 chic  49.0  40.37500 1993-10-05         NA  57.000000  7.2540942 37.211353\n2471 chic  61.0  56.12500 1993-10-06         NA  45.000000 18.9572464 29.656243\n2472 chic  70.0  56.50000 1993-10-07         NA  91.500000 26.6460145 34.983333\n2473 chic  62.5  51.75000 1993-10-08         NA  82.500000 24.4547101 31.329710\n2474 chic  40.5  27.50000 1993-10-09         NA   7.500000 19.9675926 10.263768\n2475 chic  41.5  32.25000 1993-10-10         NA  18.428571  9.5958333 25.769928\n2476 chic  44.5  37.62500 1993-10-11         NA  87.000000 10.9416667 30.139493\n2477 chic  46.5  35.87500 1993-10-12         NA  24.000000 10.8409420 21.888768\n2478 chic  40.5  33.25000 1993-10-13         NA  41.500000 11.4708724 28.917641\n2479 chic  50.5  42.75000 1993-10-14         NA  69.500000  5.3501812 35.309037\n2480 chic  61.0  55.00000 1993-10-15         NA  58.000000 14.2620365 38.235507\n2481 chic  58.0  55.00000 1993-10-16         NA  30.750000  9.1291667 27.153080\n2482 chic  52.5  45.37500 1993-10-17         NA  15.500000 17.6125000 19.029315\n2483 chic  49.5  48.00000 1993-10-18         NA  70.500000  7.0436594 43.862511\n2484 chic  55.5  50.50000 1993-10-19         NA  37.000000  6.5556159 25.969386\n2485 chic  55.0  53.50000 1993-10-20         NA  39.000000  1.1443511 25.915404\n2486 chic  46.5  27.37500 1993-10-21         NA  27.000000 11.7460145 18.486111\n2487 chic  45.5  32.62500 1993-10-22         NA  40.750000  5.9416667 37.731151\n2488 chic  53.0  42.87500 1993-10-23         NA  45.000000 13.8541667 34.527778\n2489 chic  58.5  40.37500 1993-10-24         NA  32.000000 15.7708333 33.319444\n2490 chic  57.0  39.87500 1993-10-25         NA  81.000000  9.1778986 42.319444\n2491 chic  54.0  40.00000 1993-10-26         NA  55.000000  7.5487813 25.967172\n2492 chic  40.5  29.12500 1993-10-27         NA  36.500000  8.2216667 23.187500\n2493 chic  46.0  33.00000 1993-10-28         NA  47.125000  8.3981578 22.648359\n2494 chic  35.0  20.75000 1993-10-29         NA  39.500000 10.9721014 18.693332\n2495 chic  34.5  28.50000 1993-10-30         NA  21.000000 11.1938725 20.958333\n2496 chic  33.5  21.87500 1993-10-31         NA  16.500000 11.8125000 20.925000\n2497 chic  35.5  23.12500 1993-11-01         NA  48.000000  5.8460145 31.590580\n2498 chic  41.5  38.75000 1993-11-02         NA  51.500000  3.1182148 28.797714\n2499 chic  45.0  37.12500 1993-11-03         NA  36.428571  4.5572464 26.298611\n2500 chic  51.5  46.87500 1993-11-04         NA  36.000000  7.1689394 26.617624\n2501 chic  39.0  31.62500 1993-11-05         NA  25.000000  3.6583333 18.880411\n2502 chic  27.0  16.75000 1993-11-06         NA  17.500000 12.3500000 18.527778\n2503 chic  28.5  22.50000 1993-11-07         NA  36.500000  9.7666667 18.076389\n2504 chic  38.5  28.62500 1993-11-08         NA  65.500000  3.7333333 28.540761\n2505 chic  39.0  33.00000 1993-11-09         NA  47.428571  3.9516018 33.806376\n2506 chic  40.0  32.00000 1993-11-10         NA  56.500000  3.2975543 38.701389\n2507 chic  46.0  35.00000 1993-11-11         NA  67.000000  9.3333333 36.354167\n2508 chic  41.0  43.37500 1993-11-12         NA  51.500000 10.0312500 25.275884\n2509 chic  54.5  42.62500 1993-11-13         NA  21.500000 11.7500000 19.825000\n2510 chic  44.5  42.75000 1993-11-14         NA  11.500000  6.6333333 14.666667\n2511 chic  41.0  34.87500 1993-11-15         NA  17.571429  4.6583333 25.153288\n2512 chic  40.5  37.37500 1993-11-16         NA  42.000000  5.2906522 23.104084\n2513 chic  37.5  33.12500 1993-11-17         NA  24.000000  8.9981884 21.417545\n2514 chic  37.5  39.62500 1993-11-18         NA  43.000000  4.5316667 30.199708\n2515 chic  39.0  16.50000 1993-11-19         NA  31.000000  8.5000000 20.737121\n2516 chic  31.5  27.25000 1993-11-20         NA  21.000000  8.8000000 22.716667\n2517 chic  43.5  32.25000 1993-11-21         NA  17.125000 10.9333333 20.775000\n2518 chic  45.5  36.87500 1993-11-22         NA  48.500000  3.1750000 32.791667\n2519 chic  46.5  36.25000 1993-11-23         NA  27.000000  2.4562112 35.581522\n2520 chic  42.5  37.37500 1993-11-24         NA  48.500000  6.9637681 18.189614\n2521 chic  39.5  40.37500 1993-11-25         NA  20.000000 12.4000000 15.520833\n2522 chic  31.5  16.87500 1993-11-26         NA  15.500000  5.1916667 20.930556\n2523 chic  25.5  24.00000 1993-11-27         NA  20.428571  7.6166667 27.395833\n2524 chic  31.0  20.87500 1993-11-28         NA  25.000000 10.3583333 22.715278\n2525 chic  27.0  19.37500 1993-11-29         NA  35.000000  6.0750000 28.847222\n2526 chic  29.5  23.87500 1993-11-30         NA  40.000000  3.7000000 33.065657\n2527 chic  36.5  30.62500 1993-12-01         NA  35.000000  2.9289526 31.307367\n2528 chic  41.5  33.75000 1993-12-02         NA  34.000000  7.1471014 27.854167\n2529 chic  36.0  38.87500 1993-12-03         NA  44.000000  3.2083333 33.777174\n2530 chic  39.0  34.25000 1993-12-04         NA  19.500000  6.6453030 19.133333\n2531 chic  37.0  34.87500 1993-12-05         NA  23.500000  4.3083333 27.250000\n2532 chic  34.5  24.37500 1993-12-06         NA  21.500000  3.5666667 21.691667\n2533 chic  30.5  26.50000 1993-12-07         NA  36.000000  2.7750000 30.227183\n2534 chic  34.0  29.12500 1993-12-08         NA  37.500000  1.7742424 24.966414\n2535 chic  42.0  45.50000 1993-12-09         NA  36.250000  2.6598485 29.480072\n2536 chic  37.5  18.62500 1993-12-10         NA  34.500000  6.2708333 21.155797\n2537 chic  25.5  18.25000 1993-12-11         NA  17.500000  8.5833333 25.576389\n2538 chic  30.5  22.00000 1993-12-12         NA  19.000000  4.0833333 25.965278\n2539 chic  41.0  25.50000 1993-12-13         NA  24.500000  2.2604167 30.125000\n2540 chic  41.0  32.37500 1993-12-14         NA  23.500000  2.5206439 31.350049\n2541 chic  42.5  35.00000 1993-12-15         NA   7.571429 14.9850543 20.495773\n2542 chic  36.5  32.00000 1993-12-16         NA  18.000000  9.2291667 19.501812\n2543 chic  38.5  38.50000 1993-12-17         NA  16.000000  0.4270833 23.923611\n2544 chic  38.0  29.75000 1993-12-18         NA  16.500000  2.8854167 23.000000\n2545 chic  35.0  31.37500 1993-12-19         NA  14.500000  3.0520833 20.729167\n2546 chic  32.5  23.75000 1993-12-20         NA  21.500000  3.9166667 23.979167\n2547 chic  27.0  21.50000 1993-12-21         NA  20.375000  2.6358696 21.973018\n2548 chic  24.5  16.12500 1993-12-22         NA  25.000000  1.9252717 27.483825\n2549 chic  21.5  13.12500 1993-12-23         NA  31.500000  5.0000000 25.888889\n2550 chic  15.0   7.75000 1993-12-24         NA  18.000000  5.6875000 22.854167\n2551 chic  11.5  -5.12500 1993-12-25         NA  26.000000 14.2604167 18.944444\n2552 chic   9.0  -5.75000 1993-12-26         NA  42.500000 10.5520833 26.158333\n2553 chic  13.5  -1.37500 1993-12-27         NA  44.000000  4.6875000 33.416667\n2554 chic  13.5  10.37500 1993-12-28         NA  46.000000  2.8532197 38.107680\n2555 chic  16.5  -2.37500 1993-12-29         NA  59.000000  8.5907738 24.777778\n2556 chic  14.0  15.87500 1993-12-30         NA  44.000000  6.0631313 28.807359\n2557 chic  32.0  27.87500 1993-12-31         NA  19.500000  3.4861111 28.208333\n2558 chic  35.0  26.87500 1994-01-01         NA  13.500000  9.6111111 19.097222\n2559 chic  30.0  22.50000 1994-01-02         NA  13.750000 15.6875000 19.555556\n2560 chic  29.5  24.87500 1994-01-03         NA  16.000000  9.1770833 22.519324\n2561 chic  26.0  18.25000 1994-01-04         NA  33.500000 10.8396739 24.812026\n2562 chic  18.5  20.50000 1994-01-05         NA  25.500000  7.2774621 26.827267\n2563 chic  29.5  25.37500 1994-01-06         NA  23.000000  3.5801630 26.480072\n2564 chic  12.0  -8.62500 1994-01-07         NA  24.000000  5.4375000 28.131944\n2565 chic   1.0  -2.75000 1994-01-08         NA  24.857143  6.8125000 26.458333\n2566 chic   8.0   8.75000 1994-01-09         NA  35.500000  3.3750000 43.027778\n2567 chic  26.0  30.12500 1994-01-10         NA  27.000000  2.3854167 29.840909\n2568 chic  28.5  19.25000 1994-01-11         NA  28.000000  9.0208333 26.558657\n2569 chic  25.5  25.62500 1994-01-12         NA  33.500000  4.4510870 32.264191\n2570 chic  13.5   2.50000 1994-01-13         NA  43.000000  4.9888258 33.018308\n2571 chic  -4.0 -17.87500 1994-01-14         NA  36.125000 11.9071558 28.047403\n2572 chic -10.5 -23.12500 1994-01-15         NA  36.000000 12.0104167 24.701389\n2573 chic  -3.5   3.25000 1994-01-16         NA  22.000000  3.5000000 31.881944\n2574 chic  -0.5 -16.25000 1994-01-17         NA  39.000000 10.2771739 26.574879\n2575 chic -16.0 -25.62500 1994-01-18         NA  27.000000 14.6562500 22.102355\n2576 chic  -8.0  -2.37500 1994-01-19         NA  24.500000  4.8645833 36.597963\n2577 chic   2.5  -4.62500 1994-01-20         NA  43.125000  2.7594697 48.875000\n2578 chic   8.0  14.00000 1994-01-21         NA  38.000000  4.1979167 39.720328\n2579 chic  24.5  23.75000 1994-01-22         NA  48.000000  3.5416667 48.097222\n2580 chic  36.0  33.00000 1994-01-23         NA  23.000000  5.9583333 25.590278\n2581 chic  34.0  29.50000 1994-01-24         NA  28.500000  4.8165761 30.104167\n2582 chic  31.0  27.12500 1994-01-25         NA  20.000000  8.5579710 25.031401\n2583 chic  23.5  17.37500 1994-01-26         NA  14.250000 18.2574405 20.673309\n2584 chic  26.5  32.37500 1994-01-27         NA  25.000000  2.1865942 30.853865\n2585 chic  29.0  21.62500 1994-01-28         NA  23.000000  2.4148551 32.034722\n2586 chic  23.0  19.25000 1994-01-29         NA  16.500000  7.4458333 31.658333\n2587 chic  16.0  11.62500 1994-01-30         NA  11.000000 19.1666667 17.468750\n2588 chic   3.5  -7.50000 1994-01-31         NA  32.000000  7.2940705 37.288559\n2589 chic   1.5   3.00000 1994-02-01         NA  34.375000  4.7638889 41.847222\n2590 chic  17.0  13.87500 1994-02-02         NA  38.000000  9.3075181 30.417443\n2591 chic   9.5   8.12500 1994-02-03         NA  35.500000 11.5965909 31.256944\n2592 chic  15.5   2.25000 1994-02-04         NA  35.000000 10.7604167 35.229167\n2593 chic  19.5   7.25000 1994-02-05         NA  25.500000 10.3854167 35.590278\n2594 chic  23.0   8.00000 1994-02-06         NA  30.000000 13.3020833 34.458333\n2595 chic  11.5   6.37500 1994-02-07         NA  22.375000 14.5729167 27.430556\n2596 chic  15.5  11.87500 1994-02-08         NA  18.000000 17.5778986 21.617754\n2597 chic   6.5  -3.50000 1994-02-09         NA  30.500000  9.4320652 33.210145\n2598 chic   6.0   5.00000 1994-02-10         NA  35.000000 10.6770833 38.976840\n2599 chic  12.5  15.50000 1994-02-11         NA  35.000000 10.6875000 37.152778\n2600 chic  21.0  21.25000 1994-02-12         NA  37.000000  4.2395833 41.826389\n2601 chic  20.5  13.37500 1994-02-13         NA  33.875000 14.5937500 35.555556\n2602 chic  29.5  30.12500 1994-02-14         NA 101.000000  7.7500000 44.013889\n2603 chic  33.5  24.75000 1994-02-15         NA  29.000000 11.6112484 40.021245\n2604 chic  29.0  29.37500 1994-02-16         NA  36.000000  7.1662138 44.667743\n2605 chic  42.5  36.62500 1994-02-17         NA  43.500000  5.3333333 46.806818\n2606 chic  47.0  41.62500 1994-02-18         NA  50.000000 13.2395833 44.645833\n2607 chic  55.5  53.37500 1994-02-19         NA  26.250000 15.0208333 23.833333\n2608 chic  46.0  33.00000 1994-02-20         NA  22.000000 13.6770833 19.513889\n2609 chic  33.0  24.87500 1994-02-21         NA  22.000000 15.1875000 22.930556\n2610 chic  27.0  22.62500 1994-02-22         NA  18.000000 19.7083333 15.277778\n2611 chic  22.5  17.75000 1994-02-23         NA   8.000000 13.1250000 23.674874\n2612 chic  15.5   9.12500 1994-02-24         NA  24.000000 12.1191123 35.704710\n2613 chic  19.5  14.25000 1994-02-25         NA  32.285714  9.8428442 35.835749\n2614 chic  11.0   1.00000 1994-02-26         NA  27.500000 10.3437500 35.548611\n2615 chic  13.0  12.12500 1994-02-27         NA  31.000000 12.3958333 42.277778\n2616 chic  25.0  25.25000 1994-02-28         NA  30.500000  9.8541667 48.625000\n2617 chic  26.0  22.50000 1994-03-01         NA  27.500000 22.7532115 32.813192\n2618 chic  23.5  22.00000 1994-03-02         NA  32.000000 17.3229167 47.238768\n2619 chic  30.5  32.00000 1994-03-03         NA  68.750000  8.6508152 53.894845\n2620 chic  43.0  30.85714 1994-03-04         NA  39.000000  9.7119565 44.548611\n2621 chic  40.0  34.50000 1994-03-05         NA  42.500000 10.9861111 45.826389\n2622 chic  48.5  31.87500 1994-03-06         NA  27.500000 11.5833333 31.319444\n2623 chic  40.5  25.50000 1994-03-07         NA  35.000000 12.4479167 29.338384\n2624 chic  31.0  14.00000 1994-03-08         NA  26.000000 18.5767045 22.313296\n2625 chic  29.0  19.62500 1994-03-09         NA  24.000000 15.3709239 24.885913\n2626 chic  29.5  27.12500 1994-03-10         NA  45.000000 10.0729167 36.097222\n2627 chic  29.5  23.75000 1994-03-11         NA  36.000000 23.1666667 30.076389\n2628 chic  44.0  39.37500 1994-03-12         NA  42.500000 14.0833333 34.770833\n2629 chic  40.0  34.87500 1994-03-13         NA  35.000000  8.2187500 34.423611\n2630 chic  41.5  38.75000 1994-03-14         NA  50.500000  6.7291667 35.041667\n2631 chic  38.5  22.00000 1994-03-15         NA  18.714286 16.9557395 24.011273\n2632 chic  29.0  14.00000 1994-03-16         NA  20.500000 22.0213274 24.984007\n2633 chic  29.5  15.37500 1994-03-17         NA  31.000000 11.7975543 38.496970\n2634 chic  34.0  24.12500 1994-03-18         NA  38.000000 10.8079710 35.915476\n2635 chic  38.0  29.87500 1994-03-19         NA  82.500000 10.0625000 40.916667\n2636 chic  49.5  39.87500 1994-03-20         NA  43.000000 20.8437500 31.525000\n2637 chic  48.0  27.87500 1994-03-21         NA  32.625000 13.8229167 33.458333\n2638 chic  53.5  36.50000 1994-03-22         NA  39.000000 19.0539773 35.339277\n2639 chic  61.0  45.50000 1994-03-23         NA  60.000000 21.7812500 33.878472\n2640 chic  49.0  24.62500 1994-03-24         NA  69.500000 21.2717391 20.044192\n2641 chic  36.5  22.00000 1994-03-25         NA  82.000000 26.8174819 23.321256\n2642 chic  39.0  33.75000 1994-03-26         NA  70.500000 14.4062500 30.319444\n2643 chic  43.0  31.50000 1994-03-27         NA  33.875000 13.0000000 28.097222\n2644 chic  38.0  28.37500 1994-03-28         NA  26.000000 10.8551136 39.668561\n2645 chic  36.0  24.25000 1994-03-29         NA  30.000000 14.2083333 34.673803\n2646 chic  33.5  21.25000 1994-03-30         NA  42.500000  9.3936512 45.063543\n2647 chic  40.0  23.87500 1994-03-31         NA  41.000000 15.4941123 35.948232\n2648 chic  51.5  29.87500 1994-04-01         NA  65.000000 16.4635417 44.097222\n2649 chic  55.0  30.12500 1994-04-02         NA  46.250000 24.4270833 27.513889\n2650 chic  42.0  18.00000 1994-04-03         NA  21.500000 24.8750000 24.145833\n2651 chic  47.0  33.12500 1994-04-04         NA 131.000000 20.0795455 31.569444\n2652 chic  40.5  21.00000 1994-04-05         NA  14.000000 25.2905504 16.428030\n2653 chic  31.0  21.37500 1994-04-06         NA  13.500000 26.8420698 18.247565\n2654 chic  36.5  17.00000 1994-04-07         NA  35.500000 16.3957327 35.041667\n2655 chic  47.5  31.12500 1994-04-08         NA  56.875000 21.1444518 34.878321\n2656 chic  57.5  25.75000 1994-04-09         NA  32.000000 24.2407407 28.069444\n2657 chic  46.0  27.25000 1994-04-10         NA  32.500000 35.9655797 15.458333\n2658 chic  43.5  36.75000 1994-04-11         NA  21.000000 24.2824074 23.892512\n2659 chic  48.5  45.12500 1994-04-12         NA  21.000000 14.4428341 27.347854\n2660 chic  46.5  42.37500 1994-04-13         NA  22.500000 12.7870370 26.444444\n2661 chic  57.0  50.00000 1994-04-14         NA  37.000000 22.0808081 41.143088\n2662 chic  57.5  35.37500 1994-04-15         NA  36.000000 29.1431901 20.085317\n2663 chic  52.5  28.12500 1994-04-16         NA  31.000000 30.0879630 18.090278\n2664 chic  55.5  29.25000 1994-04-17         NA  23.500000 26.8287037 25.868056\n2665 chic  67.5  46.12500 1994-04-18         NA  60.500000 33.3941224 31.111111\n2666 chic  58.0  23.12500 1994-04-19         NA  40.500000 35.4716550 22.938022\n2667 chic  51.0  29.62500 1994-04-20         NA  42.750000 20.8128019 38.451389\n2668 chic  48.5  20.75000 1994-04-21         NA  27.000000 28.0529754 27.407005\n2669 chic  45.5  21.00000 1994-04-22         NA  71.000000 25.8433977 30.101389\n2670 chic  53.0  29.87500 1994-04-23         NA  82.500000 29.1481481 32.062500\n2671 chic  68.5  54.37500 1994-04-24         NA  49.000000 47.9490741 20.520833\n2672 chic  71.0  55.50000 1994-04-25         NA  99.000000 34.5507246 27.444444\n2673 chic  75.0  48.12500 1994-04-26         NA 121.750000 28.2612721 23.161820\n2674 chic  53.5  31.12500 1994-04-27         NA  24.000000 20.9855072 14.500992\n2675 chic  41.5  43.37500 1994-04-28         NA  20.000000  9.6256039 17.345960\n2676 chic  47.5  33.75000 1994-04-29         NA  24.500000 16.0123701 18.256944\n2677 chic  38.5  33.62500 1994-04-30         NA  13.500000 20.3518519 16.605072\n2678 chic  45.5  33.87500 1994-05-01         NA  26.000000 25.4861111 22.243056\n2679 chic  51.0  28.25000 1994-05-02         NA  33.375000 22.3283011 33.370040\n2680 chic  49.0  26.00000 1994-05-03         NA  47.000000 27.8447205 30.395698\n2681 chic  51.0  36.50000 1994-05-04         NA  75.500000 19.7129630 43.804046\n2682 chic  57.5  40.00000 1994-05-05         NA  60.500000 21.9102254 36.179567\n2683 chic  45.5  31.87500 1994-05-06         NA  15.500000 27.7208498 19.812500\n2684 chic  46.0  38.87500 1994-05-07         NA  18.500000 20.7962963 26.534722\n2685 chic  53.5  39.00000 1994-05-08         NA  26.857143 27.7314815 25.479167\n2686 chic  61.5  30.50000 1994-05-09         NA  39.500000 26.0038251 27.879529\n2687 chic  56.5  35.37500 1994-05-10         NA  63.500000 17.9650692 39.216540\n2688 chic  62.5  42.50000 1994-05-11         NA  72.000000 33.7458333 23.014630\n2689 chic  52.0  34.87500 1994-05-12         NA  28.500000 25.4003623 21.921086\n2690 chic  59.5  31.00000 1994-05-13         NA  59.000000 21.5233860 36.171800\n2691 chic  60.5  60.12500 1994-05-14         NA  43.250000 20.0625000 32.863225\n2692 chic  62.5  43.25000 1994-05-15         NA  22.500000 30.0125000 15.326389\n2693 chic  50.5  36.12500 1994-05-16         NA  13.500000 26.1342391 18.138889\n2694 chic  48.5  29.25000 1994-05-17         NA  11.500000 26.0652174 19.253568\n2695 chic  50.5  29.87500 1994-05-18         NA  17.500000 24.2236157 20.854057\n2696 chic  54.0  37.75000 1994-05-19         NA  26.500000 24.5369048 28.789683\n2697 chic  59.5  42.75000 1994-05-20         NA  54.875000 24.2390152 40.307576\n2698 chic  68.0  45.62500 1994-05-21         NA  86.500000 38.4708333 49.616667\n2699 chic  73.0  49.75000 1994-05-22         NA  70.500000 45.5375000 49.916667\n2700 chic  68.5  54.12500 1994-05-23         NA  54.000000 36.5717924 39.800000\n2701 chic  66.5  60.87500 1994-05-24         NA  45.500000 28.0062500 42.397464\n2702 chic  65.5  58.00000 1994-05-25         NA  34.000000 27.4766634 38.986742\n2703 chic  49.0  38.00000 1994-05-26         NA  15.875000 23.5983696 16.239268\n2704 chic  51.0  33.87500 1994-05-27         NA  34.000000 18.9862319 29.854167\n2705 chic  63.0  46.00000 1994-05-28         NA  43.500000 33.9416667 29.909722\n2706 chic  69.5  48.75000 1994-05-29         NA  48.000000 46.1916667 23.000000\n2707 chic  77.0  59.37500 1994-05-30         NA  55.000000 47.8113889 21.788095\n2708 chic  75.0  40.50000 1994-05-31         NA  53.500000 28.7820652 28.056159\n2709 chic  56.0  34.25000 1994-06-01         NA  28.875000 24.8087286 21.439696\n2710 chic  55.0  27.50000 1994-06-02         NA  18.500000 27.5966897 20.883929\n2711 chic  57.0  40.75000 1994-06-03         NA  59.000000 25.7440217 37.097222\n2712 chic  61.0  39.75000 1994-06-04         NA  43.500000 33.6500000 39.687500\n2713 chic  71.0  60.00000 1994-06-05         NA  88.000000 44.5708333 27.208333\n2714 chic  77.0  62.12500 1994-06-06         NA  80.000000 41.4225064 31.720987\n2715 chic  68.5  49.25000 1994-06-07         NA  61.000000 22.1956522 35.613730\n2716 chic  55.5  39.62500 1994-06-08         NA  29.000000 21.2123188 16.269406\n2717 chic  56.0  33.87500 1994-06-09         NA  37.500000 28.2365942 32.361111\n2718 chic  61.5  40.87500 1994-06-10         NA  53.000000 23.8268939 50.709596\n2719 chic  67.0  56.00000 1994-06-11         NA  53.500000 24.9750000 39.465278\n2720 chic  72.5  58.12500 1994-06-12         NA  25.000000 32.0250000 21.986111\n2721 chic  78.0  66.87500 1994-06-13         NA  36.125000 35.2936594 23.888889\n2722 chic  80.0  70.00000 1994-06-14         NA  55.000000 30.2427536 24.009964\n2723 chic  86.0  66.37500 1994-06-15         NA  90.000000 31.3559783 25.245581\n2724 chic  84.0  65.00000 1994-06-16         NA  86.500000 34.8702899 37.187802\n2725 chic  81.5  65.37500 1994-06-17         NA 106.500000 30.9458333 42.715909\n2726 chic  82.0  64.25000 1994-06-18         NA  71.500000 52.1784420 41.312500\n2727 chic  75.5  63.62500 1994-06-19         NA  35.857143 32.9166667 18.569444\n2728 chic  78.0  72.00000 1994-06-20         NA  88.000000 33.4025362 38.120581\n2729 chic  74.0  53.00000 1994-06-21         NA  37.000000 26.6914526 28.614734\n2730 chic  73.5  48.00000 1994-06-22         NA  47.500000 26.5375000 32.442798\n2731 chic  67.5  62.62500 1994-06-23         NA  39.000000 22.6447464 32.873106\n2732 chic  63.5  54.00000 1994-06-24         NA  27.500000 32.5845850 17.645833\n2733 chic  70.5  61.00000 1994-06-25         NA  31.500000 25.7875000 27.812500\n2734 chic  68.5  59.75000 1994-06-26         NA  41.000000 33.4460145 21.020833\n2735 chic  69.5  54.00000 1994-06-27         NA  33.500000 24.6596014 25.895290\n2736 chic  74.5  59.50000 1994-06-28         NA  51.500000 28.0973810 27.458333\n2737 chic  70.5  58.87500 1994-06-29         NA  37.000000 26.6397727 25.248957\n2738 chic  70.0  59.37500 1994-06-30         NA  41.500000 15.5311594 31.486111\n2739 chic  77.0  63.75000 1994-07-01         NA  47.875000 33.7433300 32.459486\n2740 chic  63.5  52.00000 1994-07-02         NA  15.500000 17.4333333 14.673611\n2741 chic  66.5  63.62500 1994-07-03         NA  34.500000 28.2037037 18.763889\n2742 chic  82.0  74.00000 1994-07-04         NA  41.500000 38.3240741 15.666667\n2743 chic  85.5  70.50000 1994-07-05         NA  12.000000 35.6755051 25.638131\n2744 chic  82.5  68.37500 1994-07-06         NA  52.000000 26.0068987 32.840278\n2745 chic  79.5  70.25000 1994-07-07         NA  47.875000 18.3833333 35.250000\n2746 chic  74.0  60.37500 1994-07-08         NA  42.000000 21.7622036 18.659722\n2747 chic  66.5  58.12500 1994-07-09         NA  22.000000 13.9916667 12.055556\n2748 chic  66.0  54.50000 1994-07-10         NA  13.500000 20.1666667 10.944444\n2749 chic  69.5  66.00000 1994-07-11         NA  68.500000 24.7291667 23.495370\n2750 chic  81.0  67.50000 1994-07-12         NA  50.500000 35.1886775 26.389651\n2751 chic  66.5  58.50000 1994-07-13         NA  25.000000 16.6447262 20.631061\n2752 chic  73.5  65.75000 1994-07-14         NA  56.500000 29.0963745 26.780195\n2753 chic  74.0  58.87500 1994-07-15         NA  41.000000 22.5087235 25.783333\n2754 chic  73.5  64.75000 1994-07-16         NA  38.500000 28.8041667 34.989216\n2755 chic  76.0  60.25000 1994-07-17         NA  26.500000 27.9000000 24.766667\n2756 chic  75.0  61.50000 1994-07-18         NA  35.500000 21.3867424 31.238333\n2757 chic  77.0  67.25000 1994-07-19         NA  37.000000 21.4827899 30.578283\n2758 chic  79.5  69.50000 1994-07-20         NA  53.000000 26.6121212 29.111114\n2759 chic  74.5  66.62500 1994-07-21         NA  40.500000 17.8595158 26.000000\n2760 chic  72.5  64.12500 1994-07-22         NA  32.000000 13.1070652 22.384420\n2761 chic  75.5  63.75000 1994-07-23         NA  25.500000 21.2685185 21.083333\n2762 chic  74.5  57.25000 1994-07-24         NA  20.000000 22.7833333 18.358333\n2763 chic  72.5  51.50000 1994-07-25         NA  35.875000 15.4947464 24.842857\n2764 chic  66.0  54.37500 1994-07-26         NA  35.500000 15.7501812 28.983333\n2765 chic  67.5  54.00000 1994-07-27         NA  24.500000 13.6899704 18.569774\n2766 chic  66.0  50.25000 1994-07-28         NA  24.500000 13.3050725 20.474336\n2767 chic  67.5  51.37500 1994-07-29         NA  74.000000 16.9006776 35.684843\n2768 chic  70.0  57.75000 1994-07-30         NA  72.500000 27.9490741 39.574495\n2769 chic  75.0  61.50000 1994-07-31         NA  46.750000 32.4250000 24.319444\n2770 chic  77.0  67.00000 1994-08-01         NA  60.000000 34.2925725 31.076389\n2771 chic  69.0  58.00000 1994-08-02         NA  39.500000 26.0958333 18.316288\n2772 chic  71.5  68.12500 1994-08-03         NA  62.000000 22.3889657 34.576389\n2773 chic  69.5  53.75000 1994-08-04         NA  45.500000 20.3969203 24.486905\n2774 chic  59.0  47.37500 1994-08-05         NA  19.000000 18.7079875 14.008333\n2775 chic  60.0  50.75000 1994-08-06         NA  35.250000 19.9666667 29.266667\n2776 chic  65.0  57.25000 1994-08-07         NA  26.000000 31.0916667 31.191667\n2777 chic  74.0  60.00000 1994-08-08         NA  51.500000 29.1492754 24.722222\n2778 chic  58.5  51.00000 1994-08-09         NA  24.000000 19.0259058 15.038373\n2779 chic  61.0  57.50000 1994-08-10         NA         NA  6.5238636 33.583333\n2780 chic  63.5  59.25000 1994-08-11         NA  29.500000 23.4822464 26.196429\n2781 chic  65.5  64.75000 1994-08-12         NA  41.250000 16.1179677 34.125000\n2782 chic  75.0  70.75000 1994-08-13         NA  41.000000 23.1342593 23.825000\n2783 chic  64.5  50.87500 1994-08-14         NA  33.000000 19.3697917 18.691667\n2784 chic  66.5  51.50000 1994-08-15         NA  32.000000 14.7570455 29.796717\n2785 chic  66.5  58.12500 1994-08-16         NA  68.500000 19.5812888 40.183333\n2786 chic  70.0  61.00000 1994-08-17         NA  52.500000 26.9083333 44.806752\n2787 chic  71.0  66.37500 1994-08-18         NA  62.875000 23.6250000 45.620422\n2788 chic  77.0  64.50000 1994-08-19         NA  86.000000 36.3688406 34.247343\n2789 chic  70.0  62.12500 1994-08-20         NA  31.000000 30.8333333 18.131944\n2790 chic  66.0  58.37500 1994-08-21         NA         NA 19.2500000 15.062500\n2791 chic  68.0  57.50000 1994-08-22         NA  46.500000 13.1960145 26.566123\n2792 chic  69.5  61.25000 1994-08-23         NA  61.500000 21.8208333 34.092172\n2793 chic  77.5  70.37500 1994-08-24         NA  59.428571 33.6864130 31.646739\n2794 chic  78.5  73.00000 1994-08-25         NA  92.000000 27.7278986 37.271135\n2795 chic  76.5  68.37500 1994-08-26         NA  65.500000 22.3902174 37.937500\n2796 chic  77.0  68.12500 1994-08-27         NA 106.500000 33.7458333 27.743056\n2797 chic  67.5  54.12500 1994-08-28         NA  36.000000 19.6458333 20.277778\n2798 chic  66.0  52.37500 1994-08-29         NA  32.000000 18.0813900 31.488829\n2799 chic  64.0  61.62500 1994-08-30         NA  39.571429  8.9353818 37.105676\n2800 chic  61.5  53.37500 1994-08-31         NA  28.000000 13.6326490 22.682540\n2801 chic  59.0  46.37500 1994-09-01         NA  14.500000 13.8906250 20.083333\n2802 chic  59.0  50.50000 1994-09-02         NA  88.000000  7.6475420 38.360870\n2803 chic  62.0  53.87500 1994-09-03         NA  37.500000 16.4583333 31.458333\n2804 chic  59.5  54.50000 1994-09-04         NA  23.000000 22.2291667 29.416667\n2805 chic  61.5  60.37500 1994-09-05         NA  39.625000 25.3854167 21.966667\n2806 chic  67.0  52.00000 1994-09-06         NA         NA 14.5045290 28.918939\n2807 chic  65.0  51.75000 1994-09-07         NA  56.000000 12.7708333 35.959783\n2808 chic  69.5  59.75000 1994-09-08         NA  42.000000  9.2748065 38.861957\n2809 chic  72.0  63.12500 1994-09-09         NA  46.000000 21.1927083 48.200000\n2810 chic  76.5  63.50000 1994-09-10         NA  38.000000 25.7343750 36.725000\n2811 chic  74.5  64.87500 1994-09-11         NA  44.125000 24.9114583 32.991667\n2812 chic  75.5  60.25000 1994-09-12         NA  88.500000 28.3958333 46.258333\n2813 chic  77.0  62.25000 1994-09-13         NA  73.000000 30.5624382 35.291667\n2814 chic  81.0  67.75000 1994-09-14         NA  61.500000 27.9221014 31.251515\n2815 chic  80.5  60.62500 1994-09-15         NA 119.500000 34.0184659 27.486905\n2816 chic  74.0  56.87500 1994-09-16         NA  77.000000 34.6822917 24.173452\n2817 chic  65.5  53.00000 1994-09-17         NA  38.125000  9.2656250 24.391667\n2818 chic  67.0  43.12500 1994-09-18         NA  28.000000 11.5364583 28.366667\n2819 chic  70.0  55.25000 1994-09-19         NA  61.500000 15.5842803 43.616667\n2820 chic  71.5  53.00000 1994-09-20         NA  80.500000 20.1358696 46.722101\n2821 chic  71.0  48.00000 1994-09-21         NA  82.000000 30.4940476 48.477174\n2822 chic  66.5  59.62500 1994-09-22         NA  61.500000 21.7431065 35.633333\n2823 chic  65.0  59.25000 1994-09-23         NA  49.125000 11.7007212 34.410931\n2824 chic  63.5  61.37500 1994-09-24         NA  33.000000 11.3489583 25.850000\n2825 chic  60.5  50.75000 1994-09-25         NA  24.000000 16.1666667 29.975000\n2826 chic  54.5  51.37500 1994-09-26         NA  25.000000  8.0511775 28.629545\n2827 chic  54.0  49.12500 1994-09-27         NA  23.000000  5.5261652 17.733333\n2828 chic  57.0  43.75000 1994-09-28         NA  34.000000  9.8156703 24.358333\n2829 chic  57.5  46.50000 1994-09-29         NA  37.571429  6.3229167 31.758333\n2830 chic  67.5  56.50000 1994-09-30         NA  63.000000 18.7916667 41.925000\n2831 chic  58.0  47.12500 1994-10-01         NA  15.500000 20.5729167 18.391667\n2832 chic  57.0  41.50000 1994-10-02         NA  12.500000 22.7291667 11.466667\n2833 chic  57.5  45.75000 1994-10-03         NA  18.000000 22.6313406 19.723188\n2834 chic  53.5  44.75000 1994-10-04         NA  27.000000  9.1486742 23.035498\n2835 chic  51.0  42.75000 1994-10-05         NA  40.125000  5.5420166 31.900000\n2836 chic  62.0  49.87500 1994-10-06         NA  42.000000 21.4218750 33.350000\n2837 chic  68.0  62.37500 1994-10-07         NA  82.500000 30.0052083 26.094697\n2838 chic  56.0  47.12500 1994-10-08         NA  20.000000  2.7760417 20.266667\n2839 chic  47.5  32.12500 1994-10-09         NA  16.000000 10.1093750 20.250000\n2840 chic  46.0  31.75000 1994-10-10         NA         NA  9.6510417 26.058333\n2841 chic  48.5  40.75000 1994-10-11         NA  36.375000 11.9670002 32.336025\n2842 chic  51.5  47.75000 1994-10-12         NA  48.000000  8.2185236 33.437846\n2843 chic  55.5  49.87500 1994-10-13         NA  53.500000  6.4062500 39.008333\n2844 chic  58.5  51.87500 1994-10-14         NA  46.500000 13.5738225 29.864526\n2845 chic  58.0  53.25000 1994-10-15         NA  45.000000 14.6666667 25.675000\n2846 chic  66.0  54.87500 1994-10-16         NA  38.000000 19.7500000 30.475000\n2847 chic  69.5  54.87500 1994-10-17         NA  39.285714 20.5187953 32.275000\n2848 chic  65.0  60.12500 1994-10-18         NA  48.500000  9.5678113 22.019203\n2849 chic  64.5  47.37500 1994-10-19         NA  25.000000 11.2892992 21.090152\n2850 chic  57.0  46.87500 1994-10-20         NA  33.000000  6.9759964 27.334552\n2851 chic  56.5  45.37500 1994-10-21         NA 104.000000  8.0018116 42.115909\n2852 chic  58.5  45.87500 1994-10-22         NA  54.500000 14.1145833 40.491667\n2853 chic  52.0  35.50000 1994-10-23         NA  21.125000 10.9531250 18.506667\n2854 chic  47.0  27.62500 1994-10-24         NA  33.500000 11.5288826 20.708333\n2855 chic  43.0  30.12500 1994-10-25         NA  24.000000  8.2710598 19.877841\n2856 chic  42.0  30.75000 1994-10-26         NA  35.000000  5.6816123 26.375000\n2857 chic  46.0  34.25000 1994-10-27         NA  77.500000  6.1055254 30.354620\n2858 chic  54.0  34.25000 1994-10-28         NA 193.000000 14.1834239 29.033333\n2859 chic  57.0  40.87500 1994-10-29         NA  41.875000 16.7604167 28.475000\n2860 chic  48.5  43.37500 1994-10-30         NA  39.000000  7.4270833 37.250000\n2861 chic  45.5  39.12500 1994-10-31         NA   7.500000 25.8020833 16.683333\n2862 chic  44.5  32.00000 1994-11-01         NA  24.000000  7.5911836 26.309190\n2863 chic  51.0  35.75000 1994-11-02         NA  59.000000  9.1805556 31.550000\n2864 chic  60.5  62.12500 1994-11-03         NA  63.000000  8.3194444 29.666667\n2865 chic  58.5  55.62500 1994-11-04         NA  16.125000  1.8931159 22.655383\n2866 chic  54.0  55.12500 1994-11-05         NA  11.000000  7.4861111 15.491667\n2867 chic  48.0  35.37500 1994-11-06         NA  13.500000 11.7916667 18.200000\n2868 chic  46.5  39.00000 1994-11-07         NA  19.000000  6.5833333 29.944697\n2869 chic  55.0  50.37500 1994-11-08         NA  38.500000  4.2777778 30.050000\n2870 chic  47.0  33.00000 1994-11-09         NA  10.000000 23.2868357 15.988570\n2871 chic  43.0  34.50000 1994-11-10         NA  16.375000 23.0303030 20.833004\n2872 chic  46.0  30.75000 1994-11-11         NA  30.500000  9.7638889 28.916667\n2873 chic  46.5  46.37500 1994-11-12         NA  29.000000  3.0277778 23.300000\n2874 chic  58.0  56.25000 1994-11-13         NA  24.000000 11.5694444 15.575000\n2875 chic  50.5  38.50000 1994-11-14         NA         NA  5.5694444 17.941667\n2876 chic  41.5  34.12500 1994-11-15         NA  18.000000  9.1111111 26.215260\n2877 chic  43.5  35.25000 1994-11-16         NA  38.750000 10.1111111 31.608333\n2878 chic  44.0  44.12500 1994-11-17         NA  42.000000  1.7741546 24.083333\n2879 chic  44.5  29.25000 1994-11-18         NA         NA  9.3725845 18.373551\n2880 chic  38.0  31.62500 1994-11-19         NA  45.000000  1.7916667 32.683333\n2881 chic  52.0  38.50000 1994-11-20         NA  24.500000  6.6388889 25.841667\n2882 chic  43.0  28.25000 1994-11-21         NA  17.500000 14.8285024 16.674275\n2883 chic  31.0  16.87500 1994-11-22         NA  16.625000 10.5253623 20.934651\n2884 chic  36.0  23.12500 1994-11-23         NA  38.000000  5.6250000 25.666667\n2885 chic  39.0  33.75000 1994-11-24         NA  17.000000  9.7916667 19.633333\n2886 chic  39.0  16.50000 1994-11-25         NA  17.000000  6.1388889 30.708333\n2887 chic  35.0  24.75000 1994-11-26         NA  20.500000 18.1388889 17.383333\n2888 chic  47.5  44.37500 1994-11-27         NA  22.000000  9.6111111 15.175000\n2889 chic  36.0  24.00000 1994-11-28         NA  14.625000 12.4323671 12.297727\n2890 chic  29.5  22.62500 1994-11-29         NA  25.000000  7.6250000 19.434524\n2891 chic  29.0  24.25000 1994-11-30         NA  36.000000  2.9204545 27.334091\n2892 chic  42.0  29.50000 1994-12-01         NA  75.500000  6.5694444 27.169401\n2893 chic  46.0  33.50000 1994-12-02         NA  52.000000  8.6388889 30.916667\n2894 chic  48.0  44.37500 1994-12-03         NA  27.500000  4.3472222 26.800000\n2895 chic  48.5  47.75000 1994-12-04         NA  43.000000  1.4444444 27.733333\n2896 chic  43.5  39.00000 1994-12-05         NA  47.500000  0.1527778 27.203986\n2897 chic  35.0  33.12500 1994-12-06         NA   8.500000  4.7260101 16.659848\n2898 chic  31.0  23.87500 1994-12-07         NA   3.000000 18.6340580 20.729381\n2899 chic  30.0  27.50000 1994-12-08         NA  18.000000 13.8194444 23.708333\n2900 chic  30.5  22.87500 1994-12-09         NA  27.000000  1.6527778 29.523188\n2901 chic  27.0  15.87500 1994-12-10         NA  31.000000  3.2916667 31.733333\n2902 chic  19.0   8.75000 1994-12-11         NA  23.000000  8.1666667 25.141667\n2903 chic  21.5  18.25000 1994-12-12         NA         NA  1.5694444 26.316667\n2904 chic  23.5  16.87500 1994-12-13         NA  48.500000  0.4915459 33.342424\n2905 chic  27.5  25.12500 1994-12-14         NA  36.000000  4.2364405 28.835145\n2906 chic  32.5  34.37500 1994-12-15         NA  43.500000  0.3611111 30.454519\n2907 chic  36.5  36.00000 1994-12-16         NA  41.000000  0.6944444 34.391667\n2908 chic  37.0  31.12500 1994-12-17         NA  31.500000  3.4861111 27.408333\n2909 chic  29.5  22.12500 1994-12-18         NA  19.000000  9.0972222 25.050000\n2910 chic  28.0  27.75000 1994-12-19         NA  26.500000  3.3514493 29.600000\n2911 chic  38.0  33.62500 1994-12-20         NA  33.500000  0.8174682 32.256818\n2912 chic  40.5  31.87500 1994-12-21         NA  58.500000  0.9160628 44.295588\n2913 chic  39.5  36.75000 1994-12-22         NA  69.875000  1.8888889 50.281538\n2914 chic  38.5  37.87500 1994-12-23         NA  16.000000  8.2620773 24.474967\n2915 chic  33.5  28.87500 1994-12-24         NA  22.000000 10.1250000 23.450000\n2916 chic  39.5  27.00000 1994-12-25         NA  27.000000  6.8472222 32.411111\n2917 chic  36.0  33.25000 1994-12-26         NA  34.500000  2.3333333 40.374635\n2918 chic  40.5  37.25000 1994-12-27         NA  40.000000  3.0833333 31.569444\n2919 chic  38.0  30.12500 1994-12-28         NA  16.142857  7.8260870 23.162879\n2920 chic  35.0  22.87500 1994-12-29         NA  14.000000 18.8055556 17.516667\n2921 chic  32.0  24.87500 1994-12-30         NA  34.000000  5.7222222 28.079293\n2922 chic  32.0  29.87500 1994-12-31         NA  32.000000  1.2638889 25.922101\n2923 chic  19.5   5.62500 1995-01-01         NA  22.500000 14.7020202 15.723214\n2924 chic  14.5  10.50000 1995-01-02         NA  20.000000 12.7777778 21.239583\n2925 chic  11.0  -2.87500 1995-01-03         NA  22.555556  9.1957071 25.055871\n2926 chic   3.0  -7.50000 1995-01-04         NA  27.000000  9.0000000 27.240489\n2927 chic   9.0   7.00000 1995-01-05         NA  35.500000  5.0966184 29.370924\n2928 chic  22.5  22.00000 1995-01-06         NA  32.000000  1.3725845 31.114583\n2929 chic  19.5  13.50000 1995-01-07         NA  24.500000  5.0833333 28.187500\n2930 chic  12.0   3.25000 1995-01-08         NA  36.500000  5.0833333 29.197917\n2931 chic  17.5  11.87500 1995-01-09         NA  37.777778  4.7222222 38.479167\n2932 chic  23.5  24.50000 1995-01-10         NA  45.500000  4.8834541 36.199275\n2933 chic  33.0  37.50000 1995-01-11         NA  68.000000  0.5169082 37.770833\n2934 chic  42.0  37.75000 1995-01-12         NA  29.000000  1.2101449 30.312500\n2935 chic  35.5  33.75000 1995-01-13         NA  21.000000  0.8629227 27.260417\n2936 chic  37.0  32.75000 1995-01-14         NA  10.500000  1.6250000 19.135417\n2937 chic  33.0  25.25000 1995-01-15         NA   9.857143  9.2916667 15.640399\n2938 chic  34.0  29.37500 1995-01-16         NA  16.000000 11.3194444 19.552083\n2939 chic  36.5  38.37500 1995-01-17         NA  28.000000  0.9734300 23.110054\n2940 chic  35.5  22.62500 1995-01-18         NA  24.500000  3.9027778 25.552083\n2941 chic  34.5  33.00000 1995-01-19         NA  12.000000  6.1107268 17.997200\n2942 chic  30.0  20.12500 1995-01-20         NA  16.500000  8.6950483 22.598526\n2943 chic  23.5  17.75000 1995-01-21         NA  20.222222  8.9444444 18.395833\n2944 chic  20.0  16.50000 1995-01-22         NA  19.000000  8.4722222 24.593750\n2945 chic  20.0  14.25000 1995-01-23         NA  24.500000  3.7500000 33.156250\n2946 chic  15.0   6.75000 1995-01-24         NA  45.000000  2.8143939 42.213809\n2947 chic  18.0   9.25000 1995-01-25         NA  66.500000  1.6666667 52.446970\n2948 chic  18.0  13.25000 1995-01-26         NA  58.000000  3.2246377 50.437500\n2949 chic  23.5  26.00000 1995-01-27         NA  63.111111  4.1008454 45.310071\n2950 chic  28.5  16.00000 1995-01-28         NA  17.000000 22.3611111 20.875000\n2951 chic  25.0  20.00000 1995-01-29         NA   9.000000 22.2500000 18.052083\n2952 chic  24.0  19.12500 1995-01-30         NA  47.000000  6.8573232 41.541667\n2953 chic  30.5  30.37500 1995-01-31         NA  32.000000  9.5555556 26.546402\n2954 chic  37.0  27.50000 1995-02-01         NA  19.500000  9.7681159 27.489130\n2955 chic  33.5  26.62500 1995-02-02         NA  16.444444 17.4375000 23.677083\n2956 chic  30.5  24.25000 1995-02-03         NA  31.000000  8.0262681 28.362813\n2957 chic  20.0   3.50000 1995-02-04         NA  17.000000 18.6875000 16.343750\n2958 chic   8.5  -4.62500 1995-02-05         NA  17.500000 18.3958333 19.916667\n2959 chic  11.0   0.00000 1995-02-06         NA  22.000000  7.4375000 30.354167\n2960 chic  15.0   3.37500 1995-02-07         NA  38.500000  9.5027174 28.781703\n2961 chic  12.0   1.50000 1995-02-08         NA  25.555556 13.1250000 25.614583\n2962 chic  24.0  25.00000 1995-02-09         NA  34.500000  4.6781401 29.151268\n2963 chic  26.5   4.87500 1995-02-10         NA  38.000000 12.2916667 20.315670\n2964 chic   6.5 -13.25000 1995-02-11         NA  69.500000 20.1388889 13.843750\n2965 chic   7.5   2.37500 1995-02-12         NA  22.500000 11.7222222 20.864583\n2966 chic  17.0  -0.75000 1995-02-13         NA  37.000000  8.9166667 28.989583\n2967 chic  18.5  11.37500 1995-02-14         NA  39.285714  6.1817633 32.524868\n2968 chic  30.5  21.37500 1995-02-15         NA  25.000000  3.7222222 24.197917\n2969 chic  25.0  18.25000 1995-02-16         NA  36.500000  7.4740338 31.481102\n2970 chic  33.0  18.75000 1995-02-17         NA  55.000000  4.2045455 39.675231\n2971 chic  42.5  27.00000 1995-02-18         NA  42.500000  9.1250000 30.645833\n2972 chic  38.0  28.37500 1995-02-19         NA  24.500000 13.6666667 23.302083\n2973 chic  40.5  28.25000 1995-02-20         NA  33.000000  9.9027778 27.541667\n2974 chic  28.0  17.25000 1995-02-21         NA  17.000000 18.3623188 23.991477\n2975 chic  38.0  30.00000 1995-02-22         NA  41.000000  3.5972222 31.239583\n2976 chic  41.0  21.50000 1995-02-23         NA  43.000000 13.2457729 28.050189\n2977 chic  32.0  17.50000 1995-02-24         NA  15.500000 15.3055556 26.770833\n2978 chic  39.0  26.37500 1995-02-25         NA  21.000000 12.0694444 24.093750\n2979 chic  30.5  27.50000 1995-02-26         NA  23.333333 13.0972222 19.614583\n2980 chic  31.5  28.62500 1995-02-27         NA  16.500000 15.1515700 23.786685\n2981 chic  27.5  20.87500 1995-02-28         NA  18.500000 15.7752525 26.373641\n2982 chic  16.5   3.75000 1995-03-01         NA  21.500000 11.7717391 24.307971\n2983 chic  17.5   6.62500 1995-03-02         NA  26.000000  7.1250000 36.642992\n2984 chic  23.0  14.00000 1995-03-03         NA  45.500000  7.7373188 41.074811\n2985 chic  31.5  20.12500 1995-03-04         NA  41.111111 10.2777778 38.510417\n2986 chic  35.0  32.75000 1995-03-05         NA  39.000000  4.5694444 27.458333\n2987 chic  33.0  32.12500 1995-03-06         NA  29.500000 10.8888889 26.843750\n2988 chic  30.5  20.87500 1995-03-07         NA  19.000000  7.7083333 30.531250\n2989 chic  23.5  12.37500 1995-03-08         NA  22.500000 17.6388889 28.937500\n2990 chic  24.5  18.87500 1995-03-09         NA  36.500000  9.9233092 39.157156\n2991 chic  40.5  35.50000 1995-03-10         NA  34.333333 13.4722222 29.046131\n2992 chic  51.0  38.75000 1995-03-11         NA  30.500000 27.5972222 28.695833\n2993 chic  58.5  44.25000 1995-03-12         NA  31.500000 29.3055556 23.809028\n2994 chic  61.5  44.25000 1995-03-13         NA  56.000000 17.5609903 40.388587\n2995 chic  61.0  44.37500 1995-03-14         NA  67.500000 15.5000000 52.487689\n2996 chic  59.0  43.37500 1995-03-15         NA  65.000000 18.1419082 49.556238\n2997 chic  54.0  41.00000 1995-03-16         NA  44.222222 13.4698068 48.319129\n2998 chic  42.5  33.50000 1995-03-17         NA  21.500000 21.7487374 25.947917\n2999 chic  49.0  40.50000 1995-03-18         NA  31.500000 19.3750000 25.875000\n3000 chic  50.0  42.25000 1995-03-19         NA  56.500000 10.6388889 24.052083\n3001 chic  50.5  39.12500 1995-03-20         NA  34.500000 10.7934783 20.681069\n3002 chic  43.5  30.12500 1995-03-21         NA  22.000000 13.5972222 24.766667\n3003 chic  39.0  31.75000 1995-03-22         NA  14.777778 19.1338384 23.324405\n3004 chic  36.0  28.75000 1995-03-23         NA  10.000000 21.2192029 23.742754\n3005 chic  37.0  22.37500 1995-03-24         NA  16.500000 21.9184783 31.290179\n3006 chic  42.0  22.50000 1995-03-25         NA  24.500000 22.2916667 31.729167\n3007 chic  43.5  25.37500 1995-03-26         NA  27.500000 21.3888889 24.093750\n3008 chic  41.5  36.25000 1995-03-27         NA  22.000000 11.2361111 27.731061\n3009 chic  41.0  37.62500 1995-03-28         NA  21.222222  1.1316425 28.483902\n3010 chic  40.0  33.00000 1995-03-29         NA  28.000000  4.4722222 31.975379\n3011 chic  40.5  29.50000 1995-03-30         NA  21.500000  6.7916667 31.986413\n3012 chic  36.5  29.87500 1995-03-31         NA  25.500000  6.6727053 28.032156\n3013 chic  37.0  26.75000 1995-04-01         NA  23.000000 13.1607143 28.500000\n3014 chic  44.0  27.50000 1995-04-02         NA  18.000000 21.7500000 21.250000\n3015 chic  55.0  39.00000 1995-04-03         NA  24.333333 20.9321946 23.854167\n3016 chic  33.0   1.37500 1995-04-04         NA  23.000000 22.2604167 18.145833\n3017 chic  34.5  22.75000 1995-04-05         NA  37.500000 15.6354167 27.489583\n3018 chic  52.0  28.62500 1995-04-06         NA  42.000000 23.2971014 21.869565\n3019 chic  42.5  35.12500 1995-04-07         NA  37.500000 21.9519928 22.208333\n3020 chic  43.0  36.37500 1995-04-08         NA  40.000000 13.8072917 22.666667\n3021 chic  37.5  24.37500 1995-04-09         NA  13.111111 30.8928571  9.958333\n3022 chic  36.5  32.12500 1995-04-10         NA  16.000000 18.1988225 18.956975\n3023 chic  49.5  48.25000 1995-04-11         NA  36.500000 10.4646099 25.760417\n3024 chic  39.5  34.25000 1995-04-12         NA  14.000000 18.0458937 21.280344\n3025 chic  49.0  29.62500 1995-04-13         NA  21.000000 31.6199678 19.184783\n3026 chic  42.5  29.87500 1995-04-14         NA  12.500000 32.9583333 20.239583\n3027 chic  46.5  36.37500 1995-04-15         NA  26.111111 28.7875000 24.364583\n3028 chic  51.5  39.37500 1995-04-16         NA  37.000000 18.1000000 33.104167\n3029 chic  50.5  35.12500 1995-04-17         NA  33.000000 27.7750000 29.145833\n3030 chic  61.0  42.00000 1995-04-18         NA  47.500000 27.1163043 18.734601\n3031 chic  47.5  34.37500 1995-04-19         NA  17.500000 24.4914855 19.287138\n3032 chic  44.0  44.75000 1995-04-20         NA  27.500000 17.2801383 23.147398\n3033 chic  46.5  41.37500 1995-04-21         NA  29.222222 10.6159420 22.822917\n3034 chic  51.0  35.12500 1995-04-22         NA  19.500000 22.1916667 25.593750\n3035 chic  45.0  32.37500 1995-04-23         NA  19.000000 21.6458333 28.104167\n3036 chic  47.5  39.75000 1995-04-24         NA  44.500000 20.2924172 33.167929\n3037 chic  47.0  35.87500 1995-04-25         NA  30.000000 20.1088933 26.921377\n3038 chic  50.0  50.25000 1995-04-26         NA  34.000000 10.1533267 38.482749\n3039 chic  47.5  36.50000 1995-04-27         NA  18.333333 19.1827899 27.195076\n3040 chic  53.0  38.62500 1995-04-28         NA  31.500000 17.3489130 31.979167\n3041 chic  49.5  34.87500 1995-04-29         NA  28.500000 16.5333333 31.843750\n3042 chic  44.5  36.87500 1995-04-30         NA   7.500000 25.6916667 16.138393\n3043 chic  45.5  37.25000 1995-05-01         NA  13.000000 22.5751294 20.662202\n3044 chic  50.5  31.75000 1995-05-02         NA  16.000000 22.4458333 24.031250\n3045 chic  49.5  32.12500 1995-05-03         NA  32.777778 18.3666667 38.527083\n3046 chic  52.5  45.87500 1995-05-04         NA  35.500000 15.5143775 43.903274\n3047 chic  55.0  40.62500 1995-05-05         NA  48.500000 20.8371377 34.989079\n3048 chic  56.0  37.62500 1995-05-06         NA  43.000000 21.5166667 34.941667\n3049 chic  62.5  46.75000 1995-05-07         NA  44.000000 37.3041667 27.066667\n3050 chic  57.5  42.75000 1995-05-08         NA  41.500000 25.5641304 19.750000\n3051 chic  61.5  54.62500 1995-05-09         NA  43.777778 21.3648551 30.308333\n3052 chic  51.0  49.00000 1995-05-10         NA  32.000000 10.3813406 31.128200\n3053 chic  59.5  47.62500 1995-05-11         NA  27.000000 18.4202899 30.600000\n3054 chic  60.0  48.75000 1995-05-12         NA  35.000000 25.9349638 31.721077\n3055 chic  62.0  62.62500 1995-05-13         NA  32.500000 23.8541667 21.058333\n3056 chic  62.5  51.37500 1995-05-14         NA  21.000000 29.6083333 12.033333\n3057 chic  61.5  44.12500 1995-05-15         NA  29.777778 21.6083333 38.691667\n3058 chic  68.5  65.87500 1995-05-16         NA  47.500000 24.1594697 34.918841\n3059 chic  58.5  37.62500 1995-05-17         NA  15.000000 21.9222826 19.511594\n3060 chic  52.5  37.25000 1995-05-18         NA  13.500000 19.8181159 23.075527\n3061 chic  60.5  41.75000 1995-05-19         NA  36.500000 20.9451087 35.125000\n3062 chic  66.0  40.75000 1995-05-20         NA  39.500000 26.9541667 19.075000\n3063 chic  60.5  40.62500 1995-05-21         NA  29.222222 27.7125000 22.158333\n3064 chic  62.0  46.00000 1995-05-22         NA  67.000000 26.1083333 38.559783\n3065 chic  59.5  53.87500 1995-05-23         NA  38.000000 21.6550725 32.768116\n3066 chic  51.5  46.37500 1995-05-24         NA  10.500000 22.6101449 17.177536\n3067 chic  55.0  46.00000 1995-05-25         NA  15.000000 17.8784420 17.504076\n3068 chic  55.0  43.62500 1995-05-26         NA  21.500000 22.5548913 24.291667\n3069 chic  60.5  57.50000 1995-05-27         NA  29.875000 22.5791667 18.350000\n3070 chic  65.5  55.37500 1995-05-28         NA  21.000000 27.9666667 11.716667\n3071 chic  61.0  46.50000 1995-05-29         NA  16.500000 23.7791667 17.466667\n3072 chic  67.5  48.12500 1995-05-30         NA  47.000000 20.5948068 38.972368\n3073 chic  69.5  51.62500 1995-05-31         NA  81.000000 27.7042918 48.053986\n3074 chic  71.5  55.25000 1995-06-01         NA  65.500000 29.9820652 44.726449\n3075 chic  67.5  60.87500 1995-06-02         NA  65.000000 14.9168478 49.002899\n3076 chic  67.0  57.25000 1995-06-03         NA  41.500000 34.8416667 33.258333\n3077 chic  67.0  53.75000 1995-06-04         NA  34.000000 33.5048913 22.866667\n3078 chic  67.5  56.87500 1995-06-05         NA  46.500000 33.6802536 30.091667\n3079 chic  74.0  64.62500 1995-06-06         NA  72.500000 29.4706192 38.735000\n3080 chic  71.5  59.00000 1995-06-07         NA  36.500000 33.9130694 23.275758\n3081 chic  53.5  45.00000 1995-06-08         NA  18.333333 20.4116271 14.377273\n3082 chic  59.0  51.75000 1995-06-09         NA  42.000000 16.7827899 24.103788\n3083 chic  67.5  51.00000 1995-06-10         NA  35.000000 25.2000000 21.041667\n3084 chic  59.0  44.87500 1995-06-11         NA  17.500000 21.4583333 20.141667\n3085 chic  61.0  41.12500 1995-06-12         NA  24.000000 21.0460145 24.285870\n3086 chic  67.5  45.75000 1995-06-13         NA  58.000000 16.6514493 44.258333\n3087 chic  74.0  52.00000 1995-06-14         NA  61.250000 34.3807971 47.717424\n3088 chic  72.0  53.25000 1995-06-15         NA  79.500000 43.1182971 43.882816\n3089 chic  76.5  54.87500 1995-06-16         NA  88.500000 43.0009058 38.550000\n3090 chic  77.5  61.62500 1995-06-17         NA  77.500000 45.6458333 35.650000\n3091 chic  82.0  63.37500 1995-06-18         NA  57.500000 48.0583333 30.733333\n3092 chic  82.5  65.25000 1995-06-19         NA  61.000000 45.0050322 41.608333\n3093 chic  85.0  63.75000 1995-06-20         NA  58.111111 48.7802536 25.728623\n3094 chic  78.0  61.75000 1995-06-21         NA  53.000000 37.9911232 25.312121\n3095 chic  80.0  62.50000 1995-06-22         NA  66.000000 47.8577569 32.782971\n3096 chic  79.5  55.75000 1995-06-23         NA  65.000000 63.3750000 31.102536\n3097 chic  77.5  62.37500 1995-06-24         NA  75.500000 66.5875000 35.033333\n3098 chic  75.5  63.75000 1995-06-25         NA  57.000000 47.9541667 25.333333\n3099 chic  75.5  62.62500 1995-06-26         NA  47.111111 37.1329710 23.558333\n3100 chic  72.5  67.37500 1995-06-27         NA  40.500000 26.1965580 32.025000\n3101 chic  74.0  65.25000 1995-06-28         NA  54.500000 25.8855072 32.432312\n3102 chic  77.0  65.25000 1995-06-29         NA  43.000000 28.4794631 33.065283\n3103 chic  71.5  51.12500 1995-06-30         NA  46.000000 30.0062582 23.233333\n3104 chic  65.5  47.75000 1995-07-01         NA  18.000000 27.5875000 15.633333\n3105 chic  63.5  49.37500 1995-07-02         NA  27.666667 24.9291667 25.350000\n3106 chic  71.0  57.50000 1995-07-03         NA  51.500000 44.3910079 21.330303\n3107 chic  75.5  69.50000 1995-07-04         NA  43.000000 29.1458333 16.508333\n3108 chic  75.0  63.87500 1995-07-05         NA  58.500000 31.0822464 18.162220\n3109 chic  72.0  54.00000 1995-07-06         NA  27.500000 32.8094203 15.708333\n3110 chic  70.5  55.62500 1995-07-07         NA  42.000000 27.3125000 22.128261\n3111 chic  70.5  54.25000 1995-07-08         NA  36.750000 27.5708333 30.016667\n3112 chic  73.0  60.87500 1995-07-09         NA  37.000000 41.3000000 26.916667\n3113 chic  73.5  63.00000 1995-07-10         NA  52.500000 26.9246377 37.150000\n3114 chic  79.0  64.62500 1995-07-11         NA  56.000000 39.6371212 38.190152\n3115 chic  84.5  73.12500 1995-07-12         NA  77.500000 45.3083333 27.890787\n3116 chic  92.0  76.37500 1995-07-13         NA  92.500000 58.5495238 27.317754\n3117 chic  91.5  75.62500 1995-07-14         NA  54.500000 52.0039716 24.773551\n3118 chic  86.0  69.00000 1995-07-15         NA  51.000000 50.5508333 20.233333\n3119 chic  83.0  67.75000 1995-07-16         NA  29.000000 43.0458333 15.383333\n3120 chic  78.5  55.25000 1995-07-17         NA  33.000000 27.9666667 19.141667\n3121 chic  74.0  54.75000 1995-07-18         NA  39.000000 24.7146739 23.225000\n3122 chic  75.5  57.87500 1995-07-19         NA  44.000000 25.9170125 32.865909\n3123 chic  73.5  67.62500 1995-07-20         NA  41.333333 18.5403986 36.555072\n3124 chic  74.0  56.00000 1995-07-21         NA  34.000000 25.6844203 29.540580\n3125 chic  76.0  68.50000 1995-07-22         NA  39.000000 22.3291667 38.516667\n3126 chic  76.0  67.00000 1995-07-23         NA  23.000000 29.2500000 24.058333\n3127 chic  79.0  68.25000 1995-07-24         NA  44.000000 27.6414855 35.400000\n3128 chic  81.5  64.50000 1995-07-25         NA  43.500000 22.4875000 39.166667\n3129 chic  77.0  68.00000 1995-07-26         NA  32.777778 36.4245951 29.984058\n3130 chic  80.5  67.37500 1995-07-27         NA  38.000000 41.0702899 23.227277\n3131 chic  80.5  63.12500 1995-07-28         NA  30.000000 33.2177536 28.665580\n3132 chic  82.5  69.00000 1995-07-29         NA  40.500000 29.2958333 30.891667\n3133 chic  83.5  72.12500 1995-07-30         NA  43.500000 37.8632576 34.375000\n3134 chic  84.5  68.25000 1995-07-31         NA  82.000000 40.9083333 32.183333\n3135 chic  75.0  65.37500 1995-08-01         NA  23.777778 30.1847826 20.909091\n3136 chic  74.0  71.37500 1995-08-02         NA  28.000000 23.4036232 27.067029\n3137 chic  75.0  72.25000 1995-08-03         NA  34.000000  7.7307971 37.175033\n3138 chic  77.0  69.75000 1995-08-04         NA  39.000000  8.1221820 33.700000\n3139 chic  76.5  69.12500 1995-08-05         NA  36.000000 26.1018519 22.391667\n3140 chic  78.0  68.87500 1995-08-06         NA  26.000000 33.2129630 15.075000\n3141 chic  79.5  70.50000 1995-08-07         NA  37.666667 23.4394122 22.476087\n3142 chic  79.5  71.75000 1995-08-08         NA  57.500000 28.3109190 24.164912\n3143 chic  75.0  69.00000 1995-08-09         NA  49.000000  4.8981884 39.919170\n3144 chic  80.0  70.87500 1995-08-10         NA  38.000000 17.6492754 30.537319\n3145 chic  82.0  72.75000 1995-08-11         NA  55.500000 26.9659420 27.514493\n3146 chic  86.5  74.75000 1995-08-12         NA  58.500000 43.3943182 24.558333\n3147 chic  87.0  74.75000 1995-08-13         NA  48.222222 39.1990741 18.066667\n3148 chic  87.0  72.12500 1995-08-14         NA  55.000000 31.0724359 21.575000\n3149 chic  78.0  72.75000 1995-08-15         NA  30.000000 26.2679348 22.364361\n3150 chic  84.0  72.87500 1995-08-16         NA  45.000000 15.4136528 33.816667\n3151 chic  81.5  73.37500 1995-08-17         NA  34.500000 26.7538043 30.293149\n3152 chic  81.0  71.87500 1995-08-18         NA  33.500000 36.0864295 18.297464\n3153 chic  81.0  71.12500 1995-08-19         NA  32.222222 22.7756410 27.650000\n3154 chic  74.0  63.62500 1995-08-20         NA  13.000000 26.1916667 14.239583\n3155 chic  75.5  60.25000 1995-08-21         NA  32.000000 22.0814394 36.678406\n3156 chic  74.0  53.62500 1995-08-22         NA  25.500000 19.1829710 20.627273\n3157 chic  74.0  62.87500 1995-08-23         NA  47.500000 19.8206522 32.986111\n3158 chic  76.0  65.37500 1995-08-24         NA  46.000000 23.9804607 28.212862\n3159 chic  81.0  66.00000 1995-08-25         NA  52.000000 32.0177536 23.838768\n3160 chic  80.0  65.50000 1995-08-26         NA  74.000000 42.4250000 33.847222\n3161 chic  77.5  70.00000 1995-08-27         NA  85.000000 41.5750000 22.055556\n3162 chic  76.0  69.87500 1995-08-28         NA  58.500000 14.8809783 35.180556\n3163 chic  80.0  68.00000 1995-08-29         NA  48.000000 17.9375000 34.379808\n3164 chic  83.0  67.00000 1995-08-30         NA  86.500000 39.1969203 31.291667\n3165 chic  79.0  57.12500 1995-08-31         NA  48.333333 35.4097826 21.926915\n3166 chic  69.5  53.62500 1995-09-01         NA  22.500000 20.5812582 23.950758\n3167 chic  68.5  55.87500 1995-09-02         NA  35.500000 19.9750000 31.250000\n3168 chic  72.0  55.62500 1995-09-03         NA  34.000000 34.2125000 26.489583\n3169 chic  75.0  59.00000 1995-09-04         NA  60.500000 47.0458333 36.406250\n3170 chic  76.5  61.12500 1995-09-05         NA  90.000000 28.5791667 52.119318\n3171 chic  74.5  59.87500 1995-09-06         NA  65.142857 36.3414855 36.571970\n3172 chic  62.0  55.87500 1995-09-07         NA  22.000000 16.5902339 18.481522\n3173 chic  61.0  49.12500 1995-09-08         NA   8.500000 24.7838768 13.176449\n3174 chic  58.5  46.37500 1995-09-09         NA  13.000000 23.3083333 17.566667\n3175 chic  54.5  43.37500 1995-09-10         NA   9.000000 24.4125000 10.933333\n3176 chic  59.0  46.37500 1995-09-11         NA  27.500000 16.7451087 31.000000\n3177 chic  65.5  59.62500 1995-09-12         NA  55.666667 16.4405797 46.858333\n3178 chic  73.0  61.25000 1995-09-13         NA  46.000000 25.2711957 26.459223\n3179 chic  66.5  54.50000 1995-09-14         NA  26.500000 20.0765810 19.869565\n3180 chic  65.5  55.50000 1995-09-15         NA  35.500000 14.9724638 26.171377\n3181 chic  73.5  65.25000 1995-09-16         NA  40.500000 26.2708333 20.708333\n3182 chic  56.5  42.37500 1995-09-17         NA   9.000000 17.7375000  8.925000\n3183 chic  56.0  48.00000 1995-09-18         NA  27.888889  9.4871014 25.200000\n3184 chic  61.5  57.62500 1995-09-19         NA  31.500000 10.0539452 27.474440\n3185 chic  55.0  48.37500 1995-09-20         NA  21.500000  8.6978663 18.942490\n3186 chic  45.5  40.12500 1995-09-21         NA  12.000000 10.6157407 19.441667\n3187 chic  44.0  27.75000 1995-09-22         NA  15.000000  7.1123737 20.836667\n3188 chic  44.0  35.87500 1995-09-23         NA  30.500000 12.1574074 23.233333\n3189 chic  49.5  37.62500 1995-09-24         NA  22.333333 17.0277778 24.600000\n3190 chic  56.0  43.75000 1995-09-25         NA  47.500000 11.6157407 39.308333\n3191 chic  60.0  43.12500 1995-09-26         NA  59.500000 13.5980274 36.891667\n3192 chic  67.0  48.00000 1995-09-27         NA  54.000000 17.8397746 40.398033\n3193 chic  67.0  46.87500 1995-09-28         NA  87.500000 21.6481481 53.133333\n3194 chic  68.0  49.37500 1995-09-29         NA  74.000000 29.4782609 39.279356\n3195 chic  75.0  55.25000 1995-09-30         NA  77.250000 47.8703704 16.583333\n3196 chic  66.5  48.25000 1995-10-01         NA  37.500000 26.0416667 13.277778\n3197 chic  64.0  54.50000 1995-10-02         NA  53.000000 11.9907407 33.680556\n3198 chic  62.0  53.75000 1995-10-03         NA  34.500000 11.2775765 37.395833\n3199 chic  58.0  50.37500 1995-10-04         NA  37.000000 13.3745974 27.697917\n3200 chic  58.0  54.25000 1995-10-05         NA  23.500000 16.2824074 17.865942\n3201 chic  57.5  51.25000 1995-10-06         NA  26.125000  5.6976651 20.014946\n3202 chic  49.5  42.37500 1995-10-07         NA  10.500000  5.7250000 13.583333\n3203 chic  52.5  46.87500 1995-10-08         NA  22.500000  9.8981481 22.354167\n3204 chic  61.5  45.62500 1995-10-09         NA  39.000000 12.8796296 36.093750\n3205 chic  57.0  44.37500 1995-10-10         NA  63.000000  5.4597424 41.248206\n3206 chic  62.5  49.87500 1995-10-11         NA  87.000000 11.6183575 51.020455\n3207 chic  68.5  48.87500 1995-10-12         NA  58.555556 24.3890902 49.804348\n3208 chic  70.0  52.62500 1995-10-13         NA  81.500000 29.3419887 36.328351\n3209 chic  48.0  36.37500 1995-10-14         NA  20.500000 10.2083333 12.218750\n3210 chic  46.5  29.75000 1995-10-15         NA  12.000000 13.3009259 18.583333\n3211 chic  48.0  30.62500 1995-10-16         NA  33.000000  7.6250000 35.520833\n3212 chic  59.5  44.12500 1995-10-17         NA  78.500000 13.9476651 34.750000\n3213 chic  58.0  47.12500 1995-10-18         NA  33.777778 12.0704509 28.395833\n3214 chic  64.0  51.75000 1995-10-19         NA  68.000000 24.7095411 28.994112\n3215 chic  44.5  39.00000 1995-10-20         NA  13.500000  3.8097826 16.187500\n3216 chic  38.5  35.25000 1995-10-21         NA  11.500000  4.6157407 15.479167\n3217 chic  48.0  39.00000 1995-10-22         NA  26.000000  9.6712963 24.854167\n3218 chic  60.0  46.62500 1995-10-23         NA  40.000000 25.9537037 24.625000\n3219 chic  42.5  34.75000 1995-10-24         NA  16.666667 10.2261905 17.885417\n3220 chic  46.5  33.25000 1995-10-25         NA  46.000000  7.2105475 31.274004\n3221 chic  51.5  44.62500 1995-10-26         NA  39.000000  6.9669887 32.673007\n3222 chic  53.0  45.75000 1995-10-27         NA  21.000000 11.5623628 19.203063\n3223 chic  45.5  40.75000 1995-10-28         NA  14.000000  7.0648148 22.489583\n3224 chic  44.0  34.75000 1995-10-29         NA  12.500000  9.6250000 18.229167\n3225 chic  43.0  38.62500 1995-10-30         NA  13.111111  8.5599839 22.052083\n3226 chic  44.5  45.37500 1995-10-31         NA  14.500000  6.3590982 18.012311\n3227 chic  55.5  59.25000 1995-11-01         NA  28.500000  3.3611111 27.937500\n3228 chic  44.5  27.87500 1995-11-02         NA  12.000000  4.0235507 15.730525\n3229 chic  30.0  19.25000 1995-11-03         NA  16.500000 10.0416667 17.665226\n3230 chic  27.5  16.62500 1995-11-04         NA  12.500000  8.8194444 20.864583\n3231 chic  28.5  28.62500 1995-11-05         NA  18.444444  5.2777778 26.645833\n3232 chic  40.5  39.50000 1995-11-06         NA  36.000000  4.6250000 26.729167\n3233 chic  38.0  19.00000 1995-11-07         NA  25.000000  7.0138889 22.065670\n3234 chic  26.0  11.37500 1995-11-08         NA  18.500000  9.9969807 25.758243\n3235 chic  32.5  27.12500 1995-11-09         NA  42.000000  4.2083333 28.544956\n3236 chic  46.5  37.62500 1995-11-10         NA  29.000000  6.5972222 25.750000\n3237 chic  26.5  11.37500 1995-11-11         NA  10.555556 13.8194444 19.739583\n3238 chic  22.5  20.12500 1995-11-12         NA  17.500000  4.7638889 27.562500\n3239 chic  26.0  18.25000 1995-11-13         NA  31.000000  1.7361111 37.218750\n3240 chic  27.0  15.75000 1995-11-14         NA  34.000000  3.9462560 41.512228\n3241 chic  27.0  22.25000 1995-11-15         NA  27.000000  4.9166667 34.943452\n3242 chic  32.5  22.75000 1995-11-16         NA  33.500000  2.8979469 33.864583\n3243 chic  34.5  32.50000 1995-11-17         NA  35.000000  2.5694444 30.666667\n3244 chic  36.5  28.75000 1995-11-18         NA  30.000000  1.1250000 28.739583\n3245 chic  39.0  38.50000 1995-11-19         NA  34.500000  3.7500000 24.656250\n3246 chic  44.5  26.00000 1995-11-20         NA  44.000000  9.3750000 21.833333\n3247 chic  28.5  15.87500 1995-11-21         NA  26.500000 10.7500000 24.346920\n3248 chic  27.5  22.37500 1995-11-22         NA  43.500000  2.2638889 32.354167\n3249 chic  27.0   9.62500 1995-11-23         NA  16.000000  9.1805556 23.416667\n3250 chic  24.0  11.37500 1995-11-24         NA  35.000000  6.1666667 34.500000\n3251 chic  40.0  27.37500 1995-11-25         NA  45.000000  5.4305556 28.458333\n3252 chic  43.0  31.37500 1995-11-26         NA  42.000000  2.1388889 28.986111\n3253 chic  34.5  29.12500 1995-11-27         NA  25.000000  6.5694444 29.347826\n3254 chic  21.0  13.12500 1995-11-28         NA  23.000000  6.6461353 39.226010\n3255 chic  22.0  18.75000 1995-11-29         NA  44.222222  2.1055665 50.000000\n3256 chic  36.5  30.87500 1995-11-30         NA  35.500000  2.8423913 33.750000\n3257 chic  39.0  24.50000 1995-12-01         NA  26.500000  5.3421717 29.336806\n3258 chic  40.5  30.25000 1995-12-02         NA  32.500000  8.7777778 29.020833\n3259 chic  47.0  29.62500 1995-12-03         NA  33.000000  9.2083333 23.562500\n3260 chic  36.5  29.75000 1995-12-04         NA  20.500000 10.5694444 29.864583\n3261 chic  35.0   5.12500 1995-12-05         NA  26.444444  9.9033816 25.650568\n3262 chic  28.0   8.12500 1995-12-06         NA  28.500000  7.6425121 27.122247\n3263 chic  25.0   4.75000 1995-12-07         NA  29.000000  7.2222222 33.394737\n3264 chic  21.5  21.00000 1995-12-08         NA  35.000000  6.1388889 35.044056\n3265 chic   0.5  -2.87500 1995-12-09         NA  75.000000 20.1527778 13.458333\n3266 chic   7.5  -3.75000 1995-12-10         NA  37.500000 16.9444444 18.114583\n3267 chic   4.5   2.50000 1995-12-11         NA  36.555556  5.7777778 39.145833\n3268 chic  15.5  18.62500 1995-12-12         NA  32.500000  5.3556763 41.581645\n3269 chic  28.5  29.50000 1995-12-13         NA  37.500000  4.7916667 28.446558\n3270 chic  38.0  32.12500 1995-12-14         NA  33.500000  1.4698068 24.182971\n3271 chic  34.0  23.50000 1995-12-15         NA  41.500000  2.2083333 36.151515\n3272 chic  27.0  18.25000 1995-12-16         NA  35.500000  5.8194444 32.885417\n3273 chic  30.0  27.00000 1995-12-17         NA  29.444444  8.2083333 24.354167\n3274 chic  35.0  27.87500 1995-12-18         NA  16.000000 11.4444444 19.354167\n3275 chic  30.0  21.87500 1995-12-19         NA  11.000000 24.5471014 16.191964\n3276 chic  26.0  14.87500 1995-12-20         NA  24.500000  7.2361111 28.041667\n3277 chic  24.0  15.37500 1995-12-21         NA  19.000000  7.2638889 33.125000\n3278 chic  22.0  18.12500 1995-12-22         NA  19.000000  5.2777778 38.007850\n3279 chic  27.0  21.25000 1995-12-23         NA  22.777778  5.7222222 28.555556\n3280 chic  25.0  23.75000 1995-12-24         NA  24.000000 10.1250000 18.333333\n3281 chic  22.5  10.50000 1995-12-25         NA  22.000000 18.2083333 19.111111\n3282 chic  21.0  21.00000 1995-12-26         NA  26.000000  3.3097826 32.000000\n3283 chic  23.0  14.37500 1995-12-27         NA  30.500000  4.2946860 34.195199\n3284 chic  23.0  11.87500 1995-12-28         NA  41.000000  2.9891304 38.968297\n3285 chic  25.0  19.00000 1995-12-29         NA  39.000000  4.2916667 31.976902\n3286 chic  29.5  27.12500 1995-12-30         NA  31.500000  1.9583333 29.656250\n3287 chic  34.0  32.25000 1995-12-31         NA  35.000000  1.9166667 23.312500\n3288 chic  35.0  31.25000 1996-01-01         NA  30.000000  6.5694444 17.916667\n3289 chic  27.5  13.50000 1996-01-02         NA   8.000000 22.0000000 14.533213\n3290 chic  21.0  17.62500 1996-01-03         NA  18.000000 17.4468599 27.002394\n3291 chic  21.0  12.62500 1996-01-04         NA  30.916667  2.8218599 41.682518\n3292 chic  16.0   7.87500 1996-01-05         NA  40.500000  3.9861111 38.406250\n3293 chic  19.0  17.37500 1996-01-06         NA  20.500000 11.4027778 31.833333\n3294 chic  18.5   7.37500 1996-01-07         NA  20.000000 18.4166667 24.750000\n3295 chic  13.0  13.00000 1996-01-08         NA  44.000000  6.7083333 37.729167\n3296 chic  27.0  20.62500 1996-01-09         NA  37.500000  5.5307971 34.289079\n3297 chic  21.5  18.12500 1996-01-10         NA  33.416667  5.3375604 38.477657\n3298 chic  26.5  24.50000 1996-01-11         NA  27.500000  5.6031746 33.489130\n3299 chic  28.5  27.12500 1996-01-12         NA  31.500000  4.5416667 31.534091\n3300 chic  32.0  30.75000 1996-01-13         NA  41.000000  1.6250000 38.552083\n3301 chic  37.5  28.50000 1996-01-14         NA  19.000000 10.6041667 24.562500\n3302 chic  24.0  14.25000 1996-01-15         NA  11.500000 20.0833333 23.625000\n3303 chic  32.5  40.00000 1996-01-16         NA  36.416667  1.1666667 29.266304\n3304 chic  47.0  49.12500 1996-01-17         NA  35.000000  4.7518116 27.061012\n3305 chic  36.5  19.75000 1996-01-18         NA  17.500000 13.1805556 18.819627\n3306 chic   9.0   1.50000 1996-01-19         NA  25.000000 15.1630435 23.000000\n3307 chic  15.5  12.00000 1996-01-20         NA  24.000000  4.6944444 32.722222\n3308 chic  25.5  26.25000 1996-01-21         NA  28.000000  4.8888889 25.887077\n3309 chic  37.5  33.00000 1996-01-22         NA  27.615385  6.5694444 26.194444\n3310 chic  33.0  33.00000 1996-01-23         NA  28.000000  3.6992754 23.248119\n3311 chic  20.5   4.37500 1996-01-24         NA  21.000000 12.0332126 25.914855\n3312 chic  20.0  23.37500 1996-01-25         NA  35.000000  4.0917874 35.521780\n3313 chic  32.0  28.37500 1996-01-26         NA  27.000000  5.8750000 29.188159\n3314 chic  16.5   3.87500 1996-01-27         NA  38.500000 20.0972222 20.062500\n3315 chic  19.0  15.12500 1996-01-28         NA  22.615385  8.9583333 33.489583\n3316 chic  18.5  -2.50000 1996-01-29         NA  46.000000 14.9305556 24.145833\n3317 chic   2.0 -13.62500 1996-01-30         NA  42.500000  9.3008640 34.488564\n3318 chic  -3.0 -10.00000 1996-01-31         NA  34.500000  8.1325758 34.547472\n3319 chic   1.5 -12.87500 1996-02-01         NA  33.000000  9.8997585 32.092391\n3320 chic -10.5 -21.00000 1996-02-02         NA  35.000000  9.5555556 31.479167\n3321 chic -12.0 -18.87500 1996-02-03         NA  25.615385  7.7361111 30.135417\n3322 chic  -6.0  -7.87500 1996-02-04         NA  21.000000  9.5833333 29.958333\n3323 chic  11.5   5.25000 1996-02-05         NA  51.000000  6.4027778 38.239583\n3324 chic  18.5  20.62500 1996-02-06         NA  58.000000  5.4323671 48.981266\n3325 chic  38.0  34.75000 1996-02-07         NA  37.000000  4.7916667 31.250000\n3326 chic  39.5  34.50000 1996-02-08         NA  28.000000  2.6277778 29.208333\n3327 chic  39.0  37.75000 1996-02-09         NA  28.076923  3.9447464 40.802083\n3328 chic  44.5  29.62500 1996-02-10         NA  27.000000 14.3541667 21.437500\n3329 chic  32.0  19.62500 1996-02-11         NA  15.000000 22.1041667 14.791667\n3330 chic  23.0  14.37500 1996-02-12         NA  17.000000 14.5625000 27.072917\n3331 chic  27.5  26.87500 1996-02-13         NA  29.000000  4.1186869 30.937371\n3332 chic  27.5  19.25000 1996-02-14         NA  21.000000  6.6237374 32.552083\n3333 chic  24.0  20.62500 1996-02-15         NA  22.153846  9.9583333 30.712862\n3334 chic  21.0  14.25000 1996-02-16         NA  23.000000 13.3888889 26.780344\n3335 chic  23.5  10.62500 1996-02-17         NA  28.000000 10.9722222 25.479167\n3336 chic  18.5  19.75000 1996-02-18         NA  32.000000 10.4444444 31.177083\n3337 chic  33.0  31.87500 1996-02-19         NA  35.000000  5.0138889 36.906250\n3338 chic  43.5  41.25000 1996-02-20         NA  43.000000  2.9667874 36.044508\n3339 chic  31.5  31.87500 1996-02-21         NA  19.846154 14.3635266 22.645833\n3340 chic  35.5  34.87500 1996-02-22         NA  35.000000  6.9885266 23.226449\n3341 chic  44.5  37.87500 1996-02-23         NA  42.000000  3.9444444 24.283991\n3342 chic  46.0  30.50000 1996-02-24         NA  19.000000 14.8888889 24.072917\n3343 chic  46.5  39.25000 1996-02-25         NA  31.000000  7.3055556 36.813859\n3344 chic  40.5  40.00000 1996-02-26         NA  50.500000  4.6944444 32.993659\n3345 chic  38.5  28.37500 1996-02-27         NA  31.916667  4.5229469 26.562500\n3346 chic  20.0   6.62500 1996-02-28         NA  25.000000 17.3991546 15.173136\n3347 chic  17.0   6.37500 1996-02-29         NA  20.000000 15.9507576 23.821429\n3348 chic  26.0  21.00000 1996-03-01         NA  36.000000 13.2790404 26.229167\n3349 chic  15.0  -4.50000 1996-03-02         NA  39.000000 22.7638889 13.861111\n3350 chic  12.5   0.75000 1996-03-03         NA  22.000000 16.1111111 18.041667\n3351 chic  25.0  18.87500 1996-03-04         NA  29.923077  5.2777778 37.361111\n3352 chic  31.5  27.75000 1996-03-05         NA  23.500000 11.6805556 24.591856\n3353 chic  20.5  10.00000 1996-03-06         NA  17.000000 25.1111111 21.494112\n3354 chic  11.5   0.12500 1996-03-07         NA  18.000000 14.6300505 27.531250\n3355 chic   8.0   8.25000 1996-03-08         NA  31.000000 15.1920290 23.533967\n3356 chic  17.5  14.00000 1996-03-09         NA  29.000000 12.5000000 34.140152\n3357 chic  26.0  25.87500 1996-03-10         NA  33.916667 12.3541667 32.979167\n3358 chic  37.5  28.37500 1996-03-11         NA  31.000000  9.2708333 35.656250\n3359 chic  43.0  31.50000 1996-03-12         NA  40.000000 10.8055556 43.463225\n3360 chic  45.0  39.75000 1996-03-13         NA  59.000000  7.6618357 52.688496\n3361 chic  47.5  39.50000 1996-03-14         NA  54.000000 16.8888889 39.843750\n3362 chic  40.5  30.75000 1996-03-15         NA  32.000000 16.4722222 31.247736\n3363 chic  34.5  27.87500 1996-03-16         NA  24.692308 20.6527778 22.520833\n3364 chic  31.0  32.62500 1996-03-17         NA  36.000000  6.2638889 36.302083\n3365 chic  34.5  24.62500 1996-03-18         NA  54.000000  9.5416667 39.531703\n3366 chic  35.5  25.87500 1996-03-19         NA  26.000000 32.4791667 22.373106\n3367 chic  31.5  20.37500 1996-03-20         NA  23.000000 34.0588768 14.135417\n3368 chic  29.5  20.12500 1996-03-21         NA  18.000000 20.6363872 26.982790\n3369 chic  35.0  12.12500 1996-03-22         NA  28.727273 20.0597826 34.019928\n3370 chic  39.0  22.12500 1996-03-23         NA  57.000000 17.9166667 42.104167\n3371 chic  50.5  51.00000 1996-03-24         NA  29.000000 31.2166667 20.770833\n3372 chic  35.5  12.12500 1996-03-25         NA  33.000000 23.6950000 13.976449\n3373 chic  18.5   2.25000 1996-03-26         NA  24.500000 28.7708333 20.913826\n3374 chic  24.0  20.25000 1996-03-27         NA  26.000000 24.5937500 31.441288\n3375 chic  37.0  25.50000 1996-03-28         NA  34.454545 19.4756410 33.364583\n3376 chic  38.5  28.50000 1996-03-29         NA  32.000000 27.1666667 37.562500\n3377 chic  42.0  39.87500 1996-03-30         NA  45.000000 15.0312500 33.364583\n3378 chic  36.5  30.62500 1996-03-31         NA  24.000000 29.9583333 21.750000\n3379 chic  35.5  19.62500 1996-04-01         NA  15.000000 29.4589372 25.520833\n3380 chic  47.5  37.37500 1996-04-02         NA  52.000000 19.5550981 34.617795\n3381 chic  52.0  37.50000 1996-04-03         NA  42.384615 16.9744364 36.979167\n3382 chic  33.5  25.50000 1996-04-04         NA  23.000000 21.1334541 24.072917\n3383 chic  32.0  19.75000 1996-04-05         NA   8.000000 27.6898148 25.604167\n3384 chic  33.0  21.25000 1996-04-06         NA   9.000000 27.1157407 24.489583\n3385 chic  32.0  17.37500 1996-04-07         NA   9.000000 25.1250000 22.270833\n3386 chic  30.0  20.87500 1996-04-08         NA  17.500000 17.5245572 33.354167\n3387 chic  36.0  25.75000 1996-04-09         NA  26.846154 14.2695911 34.250000\n3388 chic  45.5  28.12500 1996-04-10         NA  58.000000 17.2596014 46.134058\n3389 chic  64.0  48.50000 1996-04-11         NA 128.000000 33.6128623 34.272727\n3390 chic  53.0  42.62500 1996-04-12         NA  40.000000 20.0626812 37.964674\n3391 chic  40.5  29.37500 1996-04-13         NA  15.000000 19.5333333 18.041667\n3392 chic  37.5  33.12500 1996-04-14         NA  15.000000 33.2375000 13.822917\n3393 chic  40.0  31.75000 1996-04-15         NA  20.846154 19.6076087 29.208333\n3394 chic  42.5  31.62500 1996-04-16         NA  21.000000 22.0231884 30.714962\n3395 chic  47.0  40.62500 1996-04-17         NA  32.000000 20.5081522 36.891757\n3396 chic  63.5  54.37500 1996-04-18         NA  54.000000 30.4634058 26.714427\n3397 chic  62.5  50.12500 1996-04-19         NA  35.000000 22.3755435 27.145833\n3398 chic  52.0  40.50000 1996-04-20         NA  25.000000 15.1916667 18.927083\n3399 chic  52.0  37.87500 1996-04-21         NA  25.583333 21.4625000 26.333333\n3400 chic  51.5  38.37500 1996-04-22         NA  27.000000 18.2064394 33.520833\n3401 chic  45.0  31.12500 1996-04-23         NA  16.000000 22.3003623 24.461174\n3402 chic  52.5  46.12500 1996-04-24         NA  28.000000 20.0211957 27.966667\n3403 chic  61.0  43.87500 1996-04-25         NA  52.000000 25.5555665 22.433333\n3404 chic  45.5  24.87500 1996-04-26         NA  45.000000 17.1206522 23.116667\n3405 chic  45.0  30.37500 1996-04-27         NA  28.846154 19.4398148 29.291667\n3406 chic  44.0  30.62500 1996-04-28         NA  37.500000 19.2083333 26.166667\n3407 chic  40.5  37.25000 1996-04-29         NA  14.000000 21.0222826 23.566667\n3408 chic  43.5  32.62500 1996-04-30         NA  20.000000 24.8038043 23.362121\n3409 chic  50.0  32.62500 1996-05-01         NA  41.000000 24.0019928 24.786836\n3410 chic  52.5  39.00000 1996-05-02         NA  38.000000 22.4824275 32.112609\n3411 chic  52.5  42.62500 1996-05-03         NA  34.538462 24.9916667 28.750000\n3412 chic  47.5  30.62500 1996-05-04         NA  17.000000 26.2458333 23.058333\n3413 chic  49.0  41.25000 1996-05-05         NA  20.000000 21.9708333 22.950000\n3414 chic  45.5  40.25000 1996-05-06         NA  17.000000 20.3875000 23.283333\n3415 chic  50.5  43.37500 1996-05-07         NA  37.000000 14.5673913 28.763636\n3416 chic  57.0  56.50000 1996-05-08         NA  57.000000  5.2159783 30.056884\n3417 chic  58.0  54.14286 1996-05-09         NA  36.166667  4.0615942 32.312681\n3418 chic  51.0  38.25000 1996-05-10         NA  16.000000 15.6525000 21.783333\n3419 chic  45.0  28.50000 1996-05-11         NA   8.000000 23.6250000 15.791667\n3420 chic  42.5  24.12500 1996-05-12         NA  15.000000 28.3583333 15.675000\n3421 chic  45.0  33.25000 1996-05-13         NA  21.000000 15.6787879 38.358333\n3422 chic  47.5  42.87500 1996-05-14         NA  28.000000 21.8606884 31.408333\n3423 chic  54.5  52.12500 1996-05-15         NA  50.384615 17.2739130 30.450362\n3424 chic  53.5  52.12500 1996-05-16         NA  38.000000  6.5557336 30.032378\n3425 chic  69.5  71.87500 1996-05-17         NA  38.000000 27.0250000 23.983333\n3426 chic  81.0  68.87500 1996-05-18         NA  38.000000 38.0500000 17.308333\n3427 chic  81.0  65.25000 1996-05-19         NA  86.000000 33.7833333 12.800000\n3428 chic  64.0  56.00000 1996-05-20         NA  28.000000 22.6750000 26.641667\n3429 chic  65.0  52.62500 1996-05-21         NA  26.461538 23.7018116 30.816667\n3430 chic  67.0  55.25000 1996-05-22         NA  46.000000 24.0317852 38.571667\n3431 chic  56.0  46.75000 1996-05-23         NA  27.000000 15.4533267 34.254875\n3432 chic  52.0  45.50000 1996-05-24         NA  17.000000 21.2375000 22.303986\n3433 chic  51.5  41.25000 1996-05-25         NA  17.000000 28.0083333 21.258333\n3434 chic  54.0  47.00000 1996-05-26         NA  18.000000 37.1666667 14.333333\n3435 chic  51.0  46.75000 1996-05-27         NA  23.307692 32.3625000 12.416667\n3436 chic  51.5  50.00000 1996-05-28         NA  24.000000 28.2440217 25.903788\n3437 chic  51.0  34.87500 1996-05-29         NA  19.000000 29.4519928 24.584848\n3438 chic  51.5  34.00000 1996-05-30         NA  18.000000 22.8746377 28.632453\n3439 chic  57.5  50.37500 1996-05-31         NA  41.000000 30.6815217 34.632971\n3440 chic  62.5  64.00000 1996-06-01         NA  52.000000 31.3833333 35.516667\n3441 chic  67.5  57.14286 1996-06-02         NA  18.846154 41.1166667 13.758333\n3442 chic  60.5  52.37500 1996-06-03         NA  20.000000 21.5666667 19.016667\n3443 chic  57.5  55.87500 1996-06-04         NA  23.000000  6.2288043 22.470290\n3444 chic  61.5  54.87500 1996-06-05         NA  38.000000 30.1786232 24.050000\n3445 chic  63.5  63.75000 1996-06-06         NA  31.000000 20.8565217 29.179880\n3446 chic  54.5  53.25000 1996-06-07         NA  24.000000 16.8708333 28.666667\n3447 chic  53.0  56.62500 1996-06-08         NA  28.615385 20.7291667 19.891667\n3448 chic  56.5  56.75000 1996-06-09         NA  17.000000 23.7500000 16.425000\n3449 chic  61.5  59.12500 1996-06-10         NA  29.000000 21.6826087 25.206884\n3450 chic  60.0  59.12500 1996-06-11         NA  22.000000 28.4201087 28.489394\n3451 chic  65.5  63.75000 1996-06-12         NA  53.000000 23.6226449 46.031159\n3452 chic  75.5  68.50000 1996-06-13         NA  55.500000 32.2322299 36.674242\n3453 chic  71.5  59.62500 1996-06-14         NA  43.923077 29.5039614 33.223913\n3454 chic  71.0  51.75000 1996-06-15         NA  46.000000 33.9958333 33.108333\n3455 chic  72.5  67.00000 1996-06-16         NA  64.000000 38.8000000 33.937500\n3456 chic  74.0  72.50000 1996-06-17         NA  57.000000 33.5183489 26.336429\n3457 chic  73.5  69.75000 1996-06-18         NA  31.000000 23.8479649 23.109058\n3458 chic  69.5  65.62500 1996-06-19         NA  32.500000 19.9348476 31.427964\n3459 chic  73.5  71.00000 1996-06-20         NA  47.583333 28.2146739 36.878261\n3460 chic  76.5  75.12500 1996-06-21         NA  71.000000 27.3091568 40.753030\n3461 chic  71.0  57.12500 1996-06-22         NA  28.000000 33.0875000 16.066667\n3462 chic  61.0  54.00000 1996-06-23         NA  28.000000 28.2500000 20.616667\n3463 chic  68.5  57.75000 1996-06-24         NA  31.000000 22.4121377 21.266667\n3464 chic  65.5  50.75000 1996-06-25         NA  24.000000 24.8867754 21.875000\n3465 chic  68.0  62.37500 1996-06-26         NA  47.307692 29.5288043 40.062549\n3466 chic  74.0  68.00000 1996-06-27         NA  63.000000 45.8902174 52.208333\n3467 chic  77.5  65.87500 1996-06-28         NA  76.000000 39.7313406 51.605435\n3468 chic  83.0  74.25000 1996-06-29         NA  73.000000 58.3958333 22.475000\n3469 chic  83.0  66.12500 1996-06-30         NA  36.000000 38.0166667 19.358333\n3470 chic  75.5  57.62500 1996-07-01         NA  31.000000 30.4536232 30.250000\n3471 chic  73.0  61.75000 1996-07-02         NA  38.500000 30.8650362 33.822464\n3472 chic  65.0  48.87500 1996-07-03         NA  13.000000 24.3958333 15.816667\n3473 chic  64.0  51.50000 1996-07-04         NA  66.000000 24.2666667 19.608333\n3474 chic  70.5  57.12500 1996-07-05         NA  69.000000 30.8125000 39.901515\n3475 chic  73.0  61.75000 1996-07-06         NA  60.000000 55.0250000 34.333333\n3476 chic  78.0  57.12500 1996-07-07         NA  49.000000 52.6708333 25.425000\n3477 chic  71.5  55.12500 1996-07-08         NA  42.076923 26.5583333 27.741667\n3478 chic  63.0  55.00000 1996-07-09         NA  19.000000 18.5141304 18.912319\n3479 chic  63.5  46.62500 1996-07-10         NA  24.000000 19.3023551 22.707609\n3480 chic  66.0  55.25000 1996-07-11         NA  45.000000 35.2405797 30.493478\n3481 chic  73.0  66.37500 1996-07-12         NA  51.000000 33.1923913 37.241667\n3482 chic  74.5  60.62500 1996-07-13         NA  31.000000 29.7875000 20.258333\n3483 chic  69.0  64.62500 1996-07-14         NA  21.923077 17.1458333 24.616667\n3484 chic  71.5  62.37500 1996-07-15         NA  37.000000 22.4083333 25.833333\n3485 chic  76.5  58.87500 1996-07-16         NA  37.000000 25.4878623 34.177767\n3486 chic  73.5  69.75000 1996-07-17         NA  32.000000 18.8953197 39.257576\n3487 chic  79.0  78.25000 1996-07-18         NA  28.000000 24.4543478 25.386298\n3488 chic  72.0  57.37500 1996-07-19         NA  17.000000 20.5472222 14.045652\n3489 chic  65.0  53.75000 1996-07-20         NA  15.666667 24.2875000 10.991667\n3490 chic  61.5  54.00000 1996-07-21         NA  19.000000 21.7750000 17.558333\n3491 chic  65.5  67.62500 1996-07-22         NA  35.000000 22.5322464 26.641667\n3492 chic  70.5  59.00000 1996-07-23         NA  35.000000 17.8949934 27.815152\n3493 chic  73.5  61.62500 1996-07-24         NA  25.000000 17.1608696 27.521091\n3494 chic  68.5  58.25000 1996-07-25         NA  25.000000 15.3775362 23.801087\n3495 chic  69.5  58.62500 1996-07-26         NA  24.583333 16.6989130 22.108333\n3496 chic  68.5  64.12500 1996-07-27         NA  21.000000 19.5875000 22.383333\n3497 chic  67.5  66.62500 1996-07-28         NA  26.000000 24.3166667 24.345000\n3498 chic  70.0  62.75000 1996-07-29         NA  34.000000 22.1875000 27.283333\n3499 chic  68.5  57.87500 1996-07-30         NA  25.500000 16.1250000 26.764394\n3500 chic  65.5  58.12500 1996-07-31         NA  28.000000 12.3300725 22.992424\n3501 chic  66.5  59.87500 1996-08-01         NA  28.769231 16.4188808 30.679348\n3502 chic  67.5  59.62500 1996-08-02         NA  29.000000 18.6806836 28.228261\n3503 chic  68.5  62.62500 1996-08-03         NA  41.000000 22.5555556 28.145833\n3504 chic  74.0  67.87500 1996-08-04         NA  45.000000 39.5277778 22.687500\n3505 chic  82.0  75.37500 1996-08-05         NA  69.000000 38.8480676 18.093750\n3506 chic  79.5  75.62500 1996-08-06         NA  47.000000 29.7407407 22.722908\n3507 chic  83.0  74.37500 1996-08-07         NA  45.076923 27.9098229 25.833333\n3508 chic  77.0  55.00000 1996-08-08         NA  24.000000 24.8057568 24.791667\n3509 chic  71.0  57.87500 1996-08-09         NA  25.000000 17.7201178 23.145833\n3510 chic  68.5  59.75000 1996-08-10         NA  12.000000 22.1149356 11.958333\n3511 chic  69.5  65.12500 1996-08-11         NA  30.000000 16.9583333 29.520833\n3512 chic  71.0  64.12500 1996-08-12         NA  46.000000 22.3802910 32.114583\n3513 chic  74.0  67.62500 1996-08-13         NA  44.307692 25.8393720 30.001488\n3514 chic  76.0  63.62500 1996-08-14         NA  45.000000 22.5803872 26.120842\n3515 chic  69.5  60.00000 1996-08-15         NA  27.000000 15.0432770 24.314383\n3516 chic  68.5  61.12500 1996-08-16         NA  19.000000 14.0215378 19.468750\n3517 chic  69.0  64.12500 1996-08-17         NA  29.000000 21.0277778 25.833333\n3518 chic  70.5  69.37500 1996-08-18         NA  34.000000 25.9259259 22.739583\n3519 chic  76.0  71.37500 1996-08-19         NA  42.076923 25.1423108 23.416667\n3520 chic  77.0  71.25000 1996-08-20         NA  48.000000 20.0674316 26.847826\n3521 chic  78.0  72.75000 1996-08-21         NA  58.000000 20.7338054 41.495224\n3522 chic  79.0  71.12500 1996-08-22         NA  59.000000 30.7667874 27.001218\n3523 chic  70.0  55.12500 1996-08-23         NA  17.000000 14.8263134 17.406250\n3524 chic  71.0  58.87500 1996-08-24         NA  22.000000 21.7083333 23.885417\n3525 chic  69.5  64.50000 1996-08-25         NA  33.923077 26.7604167 30.937500\n3526 chic  72.0  65.75000 1996-08-26         NA  46.000000 32.5579710 29.583333\n3527 chic  70.0  64.87500 1996-08-27         NA  24.000000 25.5140902 13.063406\n3528 chic  68.5  63.00000 1996-08-28         NA  39.000000 21.3516506 22.750947\n3529 chic  69.5  58.75000 1996-08-29         NA  20.000000 31.9267311 20.354167\n3530 chic  69.0  61.25000 1996-08-30         NA  23.000000 29.7737520 20.697917\n3531 chic  70.5  61.50000 1996-08-31         NA  48.076923 32.7361111 22.864583\n3532 chic  73.5  60.75000 1996-09-01         NA  53.000000 37.2638889 31.031250\n3533 chic  71.0  62.50000 1996-09-02         NA  53.000000 42.9027778 26.343750\n3534 chic  73.0  67.00000 1996-09-03         NA  83.000000 37.3146135 33.219697\n3535 chic  73.0  64.75000 1996-09-04         NA 112.000000 38.2415459 41.947917\n3536 chic  74.0  68.37500 1996-09-05         NA  68.000000 45.0873591 24.185688\n3537 chic  74.0  71.12500 1996-09-06         NA  53.461538 38.5805153 20.415761\n3538 chic  73.5  69.62500 1996-09-07         NA  51.000000 21.9398148 27.093750\n3539 chic  73.0  67.25000 1996-09-08         NA  62.000000 20.9895833 29.593750\n3540 chic  68.5  64.62500 1996-09-09         NA  32.000000 20.8435673 22.927083\n3541 chic  69.5  61.37500 1996-09-10         NA  48.000000 16.4059984 35.650298\n3542 chic  67.0  57.12500 1996-09-11         NA  39.000000  9.2485910 34.794055\n3543 chic  58.0  50.25000 1996-09-12         NA  16.818182  8.5787037 18.610960\n3544 chic  56.0  46.62500 1996-09-13         NA  22.000000 10.0106683 19.856431\n3545 chic  53.0  50.75000 1996-09-14         NA  19.000000  6.3888889 18.333333\n3546 chic  59.0  51.87500 1996-09-15         NA  21.000000 10.6203704 19.812500\n3547 chic  58.5  54.37500 1996-09-16         NA  17.000000 13.8399758 14.581975\n3548 chic  60.5  52.25000 1996-09-17         NA  11.000000 17.9440419 10.458333\n3549 chic  62.0  52.62500 1996-09-18         NA  17.307692 11.7250403 14.947334\n3550 chic  61.0  51.75000 1996-09-19         NA  29.000000 17.2312619 21.885417\n3551 chic  58.5  58.25000 1996-09-20         NA  40.000000  9.6743156 39.104167\n3552 chic  64.0  54.87500 1996-09-21         NA  42.000000  9.9305556 33.104167\n3553 chic  62.5  50.25000 1996-09-22         NA  28.000000 16.1338567 20.238678\n3554 chic  59.0  56.87500 1996-09-23         NA  43.000000  4.6729066 36.256793\n3555 chic  57.0  43.12500 1996-09-24         NA  24.230769 13.6966769 27.196558\n3556 chic  53.0  46.12500 1996-09-25         NA  46.000000 12.3476248 29.983863\n3557 chic  60.5  63.37500 1996-09-26         NA  28.000000 14.8120921 23.416667\n3558 chic  58.5  48.00000 1996-09-27         NA  14.000000  6.5246914 17.739583\n3559 chic  53.5  47.00000 1996-09-28         NA  17.000000  6.0892857 21.125000\n3560 chic  57.5  50.37500 1996-09-29         NA  20.000000 11.1666667 21.694444\n3561 chic  63.0  52.87500 1996-09-30         NA  27.461538 13.8690476 35.250000\n3562 chic  62.0  58.25000 1996-10-01         NA  44.000000 20.2395833 35.861111\n3563 chic  57.0  40.87500 1996-10-02         NA  24.000000 13.9166667 20.516414\n3564 chic  46.5  36.75000 1996-10-03         NA  12.000000 18.5104167 18.777778\n3565 chic  47.0  40.37500 1996-10-04         NA  25.000000 10.8020833 30.428140\n3566 chic  53.5  45.50000 1996-10-05         NA  25.000000  8.0312500 33.750000\n3567 chic  63.5  57.12500 1996-10-06         NA  38.230769 25.0781250 29.486111\n3568 chic  53.5  45.62500 1996-10-07         NA  14.000000 12.3906250 18.836353\n3569 chic  45.5  40.25000 1996-10-08         NA   9.000000  7.0700758 20.529040\n3570 chic  47.5  41.62500 1996-10-09         NA  32.000000  4.4531250 32.416667\n3571 chic  42.5  35.75000 1996-10-10         NA  13.000000  6.7244112 21.309783\n3572 chic  42.0  42.37500 1996-10-11         NA  23.000000  7.0781250 29.625000\n3573 chic  61.0  54.25000 1996-10-12         NA  29.833333 15.3177083 29.388889\n3574 chic  66.0  62.12500 1996-10-13         NA  40.000000 24.0572917 32.902778\n3575 chic  57.0  51.00000 1996-10-14         NA  18.000000 17.3229167 15.972222\n3576 chic  64.0  54.62500 1996-10-15         NA  48.000000 12.3960598 39.472222\n3577 chic  63.0  61.12500 1996-10-16         NA  33.000000  5.8122118 36.619949\n3578 chic  59.0  49.12500 1996-10-17         NA  39.000000 21.6906703 25.539251\n3579 chic  46.5  28.37500 1996-10-18         NA  20.153846  9.2742301 22.059343\n3580 chic  45.0  34.62500 1996-10-19         NA  24.000000  6.9047619 28.402778\n3581 chic  47.5  48.25000 1996-10-20         NA  35.000000  6.2440476 31.222222\n3582 chic  53.0  50.00000 1996-10-21         NA  34.000000  6.3780797 37.185386\n3583 chic  55.5  57.87500 1996-10-22         NA  33.000000  4.9472991 27.145696\n3584 chic  43.0  40.62500 1996-10-23         NA  15.500000  4.8145380 17.430556\n3585 chic  48.0  43.87500 1996-10-24         NA  26.153846  6.0905797 24.180556\n3586 chic  52.5  49.12500 1996-10-25         NA  32.000000 11.9352355 32.916667\n3587 chic  62.0  62.25000 1996-10-26         NA  34.000000  8.8489583 23.180556\n3588 chic  59.0  47.50000 1996-10-27         NA  21.000000 12.1614583 14.579710\n3589 chic  46.5  37.62500 1996-10-28         NA  38.000000  6.0717844 28.958333\n3590 chic  50.5  54.12500 1996-10-29         NA  27.000000  6.3358243 30.709541\n3591 chic  44.5  22.85714 1996-10-30         NA  18.384615 13.9482337 16.205314\n3592 chic  33.0  21.25000 1996-10-31         NA  30.000000 12.6764040 19.432367\n3593 chic  31.0  21.62500 1996-11-01         NA  25.000000  8.6458333 24.888889\n3594 chic  29.0  24.12500 1996-11-02         NA  18.000000  8.5991848 24.055556\n3595 chic  35.5  26.87500 1996-11-03         NA  30.000000  6.5104167 25.708333\n3596 chic  42.0  33.50000 1996-11-04         NA  37.000000  2.1562500 31.208333\n3597 chic  46.5  47.37500 1996-11-05         NA  34.692308  1.8020833 34.370773\n3598 chic  54.0  60.25000 1996-11-06         NA  32.000000  3.2379658 29.944444\n3599 chic  43.0  36.87500 1996-11-07         NA  20.000000  2.6805556 28.210145\n3600 chic  37.0  33.25000 1996-11-08         NA  32.000000  2.7306763 28.861111\n3601 chic  34.5  28.00000 1996-11-09         NA  13.500000  9.9305556 20.333333\n3602 chic  28.0  21.87500 1996-11-10         NA  15.000000 12.5555556 19.833333\n3603 chic  26.5  12.62500 1996-11-11         NA  13.384615  9.9722222 28.638889\n3604 chic  23.0  11.00000 1996-11-12         NA  20.000000  7.3611111 32.388889\n3605 chic  22.5  11.37500 1996-11-13         NA  28.000000  3.3888889 36.500000\n3606 chic  25.0  18.85714 1996-11-14         NA  23.000000 10.8291063 30.599747\n3607 chic  40.0  22.50000 1996-11-15         NA  30.000000  6.3611111 28.916667\n3608 chic  48.0  32.12500 1996-11-16         NA  31.000000  6.9722222 25.569444\n3609 chic  41.5  25.00000 1996-11-17         NA  14.083333 10.1805556 14.236111\n3610 chic  31.0  24.75000 1996-11-18         NA  21.000000  4.1666667 23.625000\n3611 chic  29.5  19.00000 1996-11-19         NA  19.000000  3.4782609 29.108696\n3612 chic  29.0  29.62500 1996-11-20         NA  23.000000  8.9722222 26.945906\n3613 chic  34.0  26.37500 1996-11-21         NA  17.500000  9.5277778 28.784091\n3614 chic  34.5  29.37500 1996-11-22         NA  31.000000  4.9305556 32.271355\n3615 chic  35.5  34.62500 1996-11-23         NA  28.583333  1.8194444 20.972222\n3616 chic  35.0  30.37500 1996-11-24         NA  18.000000  6.1527778 19.125000\n3617 chic  26.5  19.12500 1996-11-25         NA  11.000000 14.0948068 23.234127\n3618 chic  20.0   9.62500 1996-11-26         NA  26.000000  7.7361111 29.680556\n3619 chic  22.5  18.75000 1996-11-27         NA  36.000000  2.4836957 31.219203\n3620 chic  29.5  25.62500 1996-11-28         NA  28.000000  4.2083333 26.430556\n3621 chic  33.5  31.37500 1996-11-29         NA  26.583333  2.8472222 29.666667\n3622 chic  40.5  36.75000 1996-11-30         NA  16.000000  3.5277778 18.305556\n3623 chic  30.5  22.87500 1996-12-01         NA  17.000000  8.5277778 17.138889\n3624 chic  27.5  24.87500 1996-12-02         NA  28.000000  7.7638889 24.611111\n3625 chic  30.0  23.00000 1996-12-03         NA  27.000000  2.1262626 28.277778\n3626 chic  26.5  25.25000 1996-12-04         NA  35.000000  1.8882850 30.988691\n3627 chic  32.5  32.25000 1996-12-05         NA  22.846154  2.1962560 26.802536\n3628 chic  33.5  28.62500 1996-12-06         NA  26.000000  1.9021739 27.628843\n3629 chic  30.5  24.87500 1996-12-07         NA  25.500000  7.0833333 26.875000\n3630 chic  28.5  22.25000 1996-12-08         NA  19.000000 13.9583333 16.736111\n3631 chic  28.5  23.37500 1996-12-09         NA  22.000000  5.4722222 21.152778\n3632 chic  35.5  34.75000 1996-12-10         NA  39.000000  1.8888889 28.643116\n3633 chic  37.0  34.50000 1996-12-11         NA  18.769231  5.0609903 20.017512\n3634 chic  36.5  33.75000 1996-12-12         NA  22.000000  3.2777778 17.472826\n3635 chic  34.5  34.75000 1996-12-13         NA  28.000000  2.1533816 25.629831\n3636 chic  36.5  31.75000 1996-12-14         NA  28.000000  2.5833333 23.208333\n3637 chic  38.0  25.37500 1996-12-15         NA  17.000000  6.4027778 17.388889\n3638 chic  29.0  26.12500 1996-12-16         NA  29.000000  8.4166667 24.902778\n3639 chic  24.0  13.37500 1996-12-17         NA  26.846154  4.2958937 21.958333\n3640 chic  13.0   2.12500 1996-12-18         NA  33.000000  9.2361111 17.590909\n3641 chic   8.0   5.75000 1996-12-19         NA  41.000000  7.1250000 19.361111\n3642 chic   9.5   8.62500 1996-12-20         NA  30.000000  5.6906566 23.295290\n3643 chic  26.5  25.62500 1996-12-21         NA  37.000000  7.0000000 21.388889\n3644 chic  34.5  36.87500 1996-12-22         NA  20.000000  2.9722222 25.055556\n3645 chic  42.5  40.62500 1996-12-23         NA  17.583333  2.0694444 24.986111\n3646 chic  20.0   5.37500 1996-12-24         NA  24.000000 15.6871981 15.986111\n3647 chic   4.5   3.00000 1996-12-25         NA  17.000000 12.5972222 19.583333\n3648 chic  14.0  12.00000 1996-12-26         NA  30.500000  4.7638889 35.259058\n3649 chic  26.0  31.75000 1996-12-27         NA  36.500000  1.9396135 32.751208\n3650 chic  37.0  37.75000 1996-12-28         NA  23.000000  1.6805556 22.347222\n3651 chic  30.0  22.87500 1996-12-29         NA  29.307692  3.2361111 19.986111\n3652 chic  27.5  29.87500 1996-12-30         NA  42.000000  1.9722222 24.194444\n3653 chic  27.5  30.12500 1996-12-31         NA  33.000000  2.9287440 27.573232\n3654 chic  36.0  37.50000 1997-01-01         NA  19.000000  1.7777778 19.416667\n3655 chic  45.0  47.25000 1997-01-02         NA  41.500000  1.5959596 21.243687\n3656 chic  40.0  38.00000 1997-01-03         NA  31.000000  2.4027778 19.277778\n3657 chic  51.5  45.50000 1997-01-04         NA  24.384615  2.8339372 15.520833\n3658 chic  27.0  11.25000 1997-01-05         NA  22.500000 16.3194444  7.729167\n3659 chic  17.0   5.75000 1997-01-06         NA  18.500000 12.8333333 19.833333\n3660 chic  16.0   7.00000 1997-01-07         NA  25.500000  9.5646135 28.348732\n3661 chic  19.0  17.75000 1997-01-08         NA  34.500000  5.1884058 31.444444\n3662 chic  26.0  24.00000 1997-01-09         NA  21.500000  9.8194444 27.763889\n3663 chic  16.0   5.37500 1997-01-10         NA  24.230769  6.1594203 23.015097\n3664 chic   1.5  -6.62500 1997-01-11         NA  21.500000 11.9444444 22.555556\n3665 chic   1.0  -8.87500 1997-01-12         NA  21.000000 12.1805556 22.583333\n3666 chic   3.0   1.50000 1997-01-13         NA  33.500000  4.6527778 33.612319\n3667 chic  10.0  11.50000 1997-01-14         NA  53.000000  2.9679952 40.696256\n3668 chic  19.0  23.25000 1997-01-15         NA  30.000000  2.1998792 35.220960\n3669 chic   9.5  -9.75000 1997-01-16         NA  26.545455 18.6944444 20.861111\n3670 chic  -3.0 -10.37500 1997-01-17         NA  24.000000 12.6884058 28.236111\n3671 chic   0.0  -4.12500 1997-01-18         NA  32.000000 10.8750000 32.166667\n3672 chic  14.0  22.62500 1997-01-19         NA  31.500000  4.8888889 32.361111\n3673 chic  31.0  27.25000 1997-01-20         NA  25.500000 13.2777778 32.486111\n3674 chic  35.0  41.62500 1997-01-21         NA  31.000000  9.7083333 32.569444\n3675 chic  36.5  20.75000 1997-01-22         NA  17.375000 17.4393939 19.413889\n3676 chic  26.0  18.75000 1997-01-23         NA  18.500000 14.5235507 25.375000\n3677 chic  32.0  29.50000 1997-01-24         NA  31.000000  4.6932367 24.986111\n3678 chic  14.5  -1.37500 1997-01-25         NA  24.500000 12.8611111 21.069444\n3679 chic  11.0  17.12500 1997-01-26         NA  28.000000  7.8055556 30.722222\n3680 chic  17.0   8.37500 1997-01-27         NA  29.500000  6.2500000 33.500000\n3681 chic   2.0  -6.37500 1997-01-28         NA  27.461538 11.2210145 35.432971\n3682 chic   8.0  11.00000 1997-01-29         NA  52.500000  4.1944444 48.902778\n3683 chic  16.5  16.37500 1997-01-30         NA  45.500000  2.7083333 40.273990\n3684 chic  31.5  33.75000 1997-01-31         NA  27.500000  9.2807971 32.486111\n3685 chic  35.0  29.66667 1997-02-01         NA  28.500000 12.8623188 34.577899\n3686 chic  36.5  29.62500 1997-02-02         NA  34.500000  9.5277778 32.319444\n3687 chic  30.0  28.00000 1997-02-03         NA  20.615385 19.1250000 26.125000\n3688 chic  34.5  32.00000 1997-02-04         NA  24.000000  9.2192029 24.566339\n3689 chic  30.0  24.25000 1997-02-05         NA  17.500000 14.0694444 26.686594\n3690 chic  26.0  21.87500 1997-02-06         NA  22.500000 14.8556763 27.402778\n3691 chic  25.5  23.37500 1997-02-07         NA  31.500000 12.3194444 31.208333\n3692 chic  25.5  22.50000 1997-02-08         NA  18.500000 14.6458333 26.652778\n3693 chic  26.0  21.00000 1997-02-09         NA  28.769231  8.2083333 39.041667\n3694 chic  27.0  21.75000 1997-02-10         NA  29.000000 11.3541667 35.347222\n3695 chic  23.5  19.50000 1997-02-11         NA  28.000000 15.9166667 29.750000\n3696 chic  21.0  11.60000 1997-02-12         NA  18.500000 18.5000000 26.902778\n3697 chic  20.5  16.37500 1997-02-13         NA  28.500000 15.5833333 29.944444\n3698 chic  25.5  23.00000 1997-02-14         NA  38.500000 10.8541667 31.893720\n3699 chic  20.0  15.25000 1997-02-15         NA  27.230769 16.5208333 30.638889\n3700 chic  18.5   8.12500 1997-02-16         NA  22.000000 14.7291667 30.569444\n3701 chic  30.0  32.62500 1997-02-17         NA  33.000000 12.7500000 33.166667\n3702 chic  48.5  41.37500 1997-02-18         NA  27.000000 25.5799517 29.143939\n3703 chic  37.5  27.50000 1997-02-19         NA  26.000000 17.2083333 30.583333\n3704 chic  35.5  44.12500 1997-02-20         NA  34.000000  3.5138889 37.262681\n3705 chic  36.0  29.62500 1997-02-21         NA   6.538462 14.4710145 21.116546\n3706 chic  26.0  24.25000 1997-02-22         NA  14.500000 21.8750000 25.777778\n3707 chic  28.0  14.62500 1997-02-23         NA  16.500000 22.4761905 19.347222\n3708 chic  21.5  10.87500 1997-02-24         NA  23.000000 15.7928744 34.555556\n3709 chic  25.5  27.12500 1997-02-25         NA  40.000000 11.0090580 35.722222\n3710 chic  36.5  35.00000 1997-02-26         NA  33.500000  5.3907005 33.891963\n3711 chic  34.5  30.25000 1997-02-27         NA  18.538462  9.0972222 31.042271\n3712 chic  37.5  36.00000 1997-02-28         NA  33.000000 12.0277778 27.681159\n3713 chic  45.5  44.00000 1997-03-01         NA  32.000000 12.7222222 25.694444\n3714 chic  35.0  27.37500 1997-03-02         NA  18.500000 28.4583333 17.236111\n3715 chic  33.5  29.37500 1997-03-03         NA  19.000000 25.0277778 23.000000\n3716 chic  38.0  28.87500 1997-03-04         NA  30.000000 12.1388889 26.837121\n3717 chic  33.0  28.62500 1997-03-05         NA  29.692308 14.1250000 26.272947\n3718 chic  26.5  13.37500 1997-03-06         NA  29.000000 21.9359903 24.897343\n3719 chic  35.5  35.25000 1997-03-07         NA  29.500000 14.1805556 33.513889\n3720 chic  39.0  28.25000 1997-03-08         NA  20.500000 25.9583333 21.180556\n3721 chic  37.0  32.62500 1997-03-09         NA  27.000000  9.5694444 26.819444\n3722 chic  44.0  33.25000 1997-03-10         NA  27.000000 16.5972222 28.055556\n3723 chic  37.0  23.37500 1997-03-11         NA  18.769231 25.6666667 27.513889\n3724 chic  33.5  25.00000 1997-03-12         NA  18.500000 28.2385266 30.878788\n3725 chic  37.5  30.50000 1997-03-13         NA  27.500000 24.0416667 22.930556\n3726 chic  26.5  15.50000 1997-03-14         NA  22.000000 21.4305556 21.083333\n3727 chic  19.0   8.37500 1997-03-15         NA  16.000000 28.6666667 19.166667\n3728 chic  24.5  23.75000 1997-03-16         NA  19.000000 24.2361111 21.305556\n3729 chic  45.0  33.62500 1997-03-17         NA  31.307692 18.6388889 29.125000\n3730 chic  33.5  27.00000 1997-03-18         NA  19.500000 36.0944444 19.259259\n3731 chic  35.5  28.87500 1997-03-19         NA  28.500000 27.4166667 32.628968\n3732 chic  46.0  31.87500 1997-03-20         NA  37.500000 25.9452381 37.621032\n3733 chic  53.5  42.50000 1997-03-21         NA  53.000000 19.1949275 31.578502\n3734 chic  37.5  28.62500 1997-03-22         NA  21.500000 26.9500000 29.500000\n3735 chic  32.5  20.37500 1997-03-23         NA  14.230769 25.4250000 19.027778\n3736 chic  33.0  32.37500 1997-03-24         NA  28.000000 20.2606061 26.375000\n3737 chic  40.5  30.00000 1997-03-25         NA  25.500000 15.2043478 27.305556\n3738 chic  44.0  36.75000 1997-03-26         NA  23.500000 20.7955251 25.867840\n3739 chic  60.5  40.12500 1997-03-27         NA  44.000000 26.6074879 26.972222\n3740 chic  55.5  53.87500 1997-03-28         NA  39.000000 13.3109903 32.597222\n3741 chic  43.5  41.00000 1997-03-29         NA  21.076923 15.2333333 16.819444\n3742 chic  37.5  33.75000 1997-03-30         NA  11.000000 22.7833333 18.000000\n3743 chic  38.5  22.00000 1997-03-31         NA  18.000000 26.6246377 29.069444\n3744 chic  44.5  28.12500 1997-04-01         NA  51.500000 15.0919314 47.718434\n3745 chic  53.0  29.87500 1997-04-02         NA  50.500000 13.8210145 42.658213\n3746 chic  59.5  49.87500 1997-04-03         NA  45.000000 12.8223485 38.010101\n3747 chic  62.5  48.25000 1997-04-04         NA  51.076923 31.1197464 34.291667\n3748 chic  60.5  54.37500 1997-04-05         NA  20.000000 28.6547101 17.055556\n3749 chic  45.0  21.75000 1997-04-06         NA  35.000000 29.3333333  8.833333\n3750 chic  34.0  18.37500 1997-04-07         NA  29.500000 27.3750000 14.152778\n3751 chic  28.5   9.25000 1997-04-08         NA  23.000000 22.4378623 22.777778\n3752 chic  30.0  18.87500 1997-04-09         NA  18.500000 22.5875000 28.308575\n3753 chic  30.5  22.00000 1997-04-10         NA  24.230769 21.6336957 34.892622\n3754 chic  33.5  32.00000 1997-04-11         NA  25.000000 25.6224211 26.944444\n3755 chic  33.5  30.37500 1997-04-12         NA  20.000000 24.3148148 23.111111\n3756 chic  38.5  24.62500 1997-04-13         NA  17.500000 30.5509259 26.333333\n3757 chic  41.5  28.12500 1997-04-14         NA  44.500000 19.0505435 43.611111\n3758 chic  49.0  36.25000 1997-04-15         NA  57.000000 29.0110507 33.972222\n3759 chic  43.0  25.62500 1997-04-16         NA  23.307692 22.2873188 23.780303\n3760 chic  40.5  25.75000 1997-04-17         NA  16.000000 18.4827899 24.117754\n3761 chic  40.0  34.75000 1997-04-18         NA  42.500000 13.1914855 52.552989\n3762 chic  45.5  30.87500 1997-04-19         NA  26.000000 23.6041667 34.177083\n3763 chic  49.0  42.25000 1997-04-20         NA  37.500000 23.3875000 37.041667\n3764 chic  45.0  31.00000 1997-04-21         NA  19.000000 34.4541667 27.052083\n3765 chic  43.0  33.62500 1997-04-22         NA  13.076923 30.0309783 18.687500\n3766 chic  48.5  34.00000 1997-04-23         NA  10.000000 26.8789855 22.703442\n3767 chic  47.5  36.50000 1997-04-24         NA  12.000000 22.4181159 28.104167\n3768 chic  48.0  27.75000 1997-04-25         NA  21.500000 23.7101449 31.500000\n3769 chic  49.5  24.25000 1997-04-26         NA  38.500000 23.0875000 40.145833\n3770 chic  47.5  40.25000 1997-04-27         NA  28.000000 28.2708333 28.062500\n3771 chic  50.5  40.75000 1997-04-28         NA  61.000000 19.5965580 53.010417\n3772 chic  60.0  45.25000 1997-04-29         NA  72.000000 35.8416667 33.552083\n3773 chic  55.0  50.00000 1997-04-30         NA  47.000000 26.1713768 28.171672\n3774 chic  48.5  36.87500 1997-05-01         NA  22.000000 21.2460145 24.543025\n3775 chic  48.5  45.50000 1997-05-02         NA  33.000000 10.2949275 33.610507\n3776 chic  49.0  40.37500 1997-05-03         NA  18.000000 22.4333333 25.093750\n3777 chic  51.5  33.25000 1997-05-04         NA  19.615385 29.0666667 29.843750\n3778 chic  62.0  38.87500 1997-05-05         NA  68.000000 30.7701087 22.228673\n3779 chic  55.5  35.00000 1997-05-06         NA  29.500000 24.5588768 31.760417\n3780 chic  52.5  49.25000 1997-05-07         NA  38.000000 20.6483696 34.779356\n3781 chic  61.0  42.75000 1997-05-08         NA  33.500000 29.7259058 20.447917\n3782 chic  50.5  36.00000 1997-05-09         NA  19.000000 21.1276186 18.928977\n3783 chic  52.5  32.62500 1997-05-10         NA  26.769231 21.8041667 25.135417\n3784 chic  59.5  43.87500 1997-05-11         NA  31.500000 27.6875000 18.166667\n3785 chic  52.5  32.50000 1997-05-12         NA  35.500000 26.2458333 16.760417\n3786 chic  45.5  38.75000 1997-05-13         NA  25.000000 18.1996706 21.478261\n3787 chic  49.5  40.62500 1997-05-14         NA  31.000000 13.1291667 32.875000\n3788 chic  45.0  35.50000 1997-05-15         NA  15.500000 13.2083333 19.941667\n3789 chic  51.0  41.37500 1997-05-16         NA  36.615385 22.8035714 24.024047\n3790 chic  50.5  38.25000 1997-05-17         NA  21.000000 29.7541667 17.777899\n3791 chic  59.5  63.87500 1997-05-18         NA  34.500000 23.6791667 25.941667\n3792 chic  54.0  42.37500 1997-05-19         NA  26.500000 19.7623188 24.627174\n3793 chic  51.5  38.12500 1997-05-20         NA  24.500000 17.5827899 28.496970\n3794 chic  48.0  34.37500 1997-05-21         NA  12.000000 19.0514397 21.162121\n3795 chic  50.5  34.62500 1997-05-22         NA  28.153846 19.3647892 28.726087\n3796 chic  58.0  40.75000 1997-05-23         NA  47.000000 26.3353261 33.946509\n3797 chic  68.5  56.12500 1997-05-24         NA  54.000000 41.1000000 29.341667\n3798 chic  50.0  44.50000 1997-05-25         NA  25.000000 37.2791667 13.158333\n3799 chic  50.0  35.87500 1997-05-26         NA   9.500000 33.1291667 10.941667\n3800 chic  56.0  39.37500 1997-05-27         NA  26.000000 30.0548913 18.232246\n3801 chic  58.5  56.87500 1997-05-28         NA  30.307692 21.8239130 22.051416\n3802 chic  58.0  50.75000 1997-05-29         NA  22.500000 18.1927536 22.853623\n3803 chic  61.0  51.75000 1997-05-30         NA  32.000000 29.3106555 26.696739\n3804 chic  59.0  53.37500 1997-05-31         NA  24.000000 37.3083333 24.625000\n3805 chic  60.5  51.25000 1997-06-01         NA  19.500000 44.5875000 12.641667\n3806 chic  58.0  54.50000 1997-06-02         NA  21.000000 29.6900362 18.682609\n3807 chic  61.5  52.62500 1997-06-03         NA  24.538462 30.5096014 19.369928\n3808 chic  59.0  47.50000 1997-06-04         NA  29.000000 30.2195652 33.072101\n3809 chic  62.0  56.00000 1997-06-05         NA  44.500000 30.9833851 36.375000\n3810 chic  63.5  58.75000 1997-06-06         NA  36.000000 23.2639493 27.608333\n3811 chic  58.5  55.37500 1997-06-07         NA  20.500000 22.1833333 21.666667\n3812 chic  61.0  48.62500 1997-06-08         NA  21.500000 41.0291667 18.383333\n3813 chic  62.5  51.75000 1997-06-09         NA  33.000000 41.0408926 29.197727\n3814 chic  66.5  53.87500 1997-06-10         NA  47.500000 40.6208333 38.650758\n3815 chic  67.5  63.12500 1997-06-11         NA  54.000000 20.1510705 50.989130\n3816 chic  70.0  63.62500 1997-06-12         NA  51.000000 20.7578722 41.913636\n3817 chic  71.0  52.00000 1997-06-13         NA  41.500000 28.3413043 34.554348\n3818 chic  56.5  41.87500 1997-06-14         NA  11.500000 21.3625000 16.216667\n3819 chic  63.0  59.75000 1997-06-15         NA  32.000000 35.6416667 21.266667\n3820 chic  67.0  53.37500 1997-06-16         NA  25.000000 32.8179348 22.175000\n3821 chic  60.5  50.37500 1997-06-17         NA  19.000000 23.1875000 17.209091\n3822 chic  67.0  61.12500 1997-06-18         NA  45.500000 30.5518116 30.962681\n3823 chic  70.0  65.87500 1997-06-19         NA  60.500000 32.4356884 39.900132\n3824 chic  81.5  72.87500 1997-06-20         NA  65.000000 40.4743116 24.501087\n3825 chic  75.5  64.75000 1997-06-21         NA  27.250000 29.6944444 23.158333\n3826 chic  77.0  66.87500 1997-06-22         NA  29.000000 37.6916667 32.158333\n3827 chic  82.5  69.62500 1997-06-23         NA  58.500000 30.5405797 29.900000\n3828 chic  84.0  60.00000 1997-06-24         NA 113.500000 33.2342391 26.116667\n3829 chic  78.0  62.75000 1997-06-25         NA  47.000000 29.6572783 26.887121\n3830 chic  73.5  55.25000 1997-06-26         NA  29.500000 29.5112319 31.086284\n3831 chic  72.5  59.00000 1997-06-27         NA  44.833333 32.0572464 42.156159\n3832 chic  74.0  62.00000 1997-06-28         NA  48.500000 46.3000000 36.625000\n3833 chic  75.0  65.25000 1997-06-29         NA  66.500000 56.5416667 35.291667\n3834 chic  76.0  69.25000 1997-06-30         NA  35.000000 20.7777668 32.141667\n3835 chic  77.5  68.62500 1997-07-01         NA  49.000000 38.1458333 33.347826\n3836 chic  79.5  55.75000 1997-07-02         NA  70.000000 31.3538043 16.692754\n3837 chic  68.5  54.25000 1997-07-03         NA  23.166667 18.1791667 12.183333\n3838 chic  61.5  51.87500 1997-07-04         NA  26.000000 10.9375000 14.991667\n3839 chic  65.5  50.75000 1997-07-05         NA  25.500000 21.7583333 16.666667\n3840 chic  70.0  57.75000 1997-07-06         NA  23.500000 31.9958333 17.216667\n3841 chic  65.5  52.50000 1997-07-07         NA  19.000000 27.3589262 13.625000\n3842 chic  71.0  58.00000 1997-07-08         NA  42.000000 31.3168478 21.860870\n3843 chic  62.0  50.75000 1997-07-09         NA  12.750000 28.3326087 15.497727\n3844 chic  64.5  51.00000 1997-07-10         NA  25.500000 25.0759591 22.306522\n3845 chic  68.5  59.12500 1997-07-11         NA  45.000000 34.2333333 31.120652\n3846 chic  74.5  63.50000 1997-07-12         NA  57.500000 48.2541667 32.925000\n3847 chic  82.5  71.75000 1997-07-13         NA  53.000000 39.4625000 19.625000\n3848 chic  83.0  62.37500 1997-07-14         NA  43.000000 28.9121377 22.941667\n3849 chic  79.0  64.25000 1997-07-15         NA  27.333333 25.1706357 24.190152\n3850 chic  82.5  59.87500 1997-07-16         NA  42.000000 33.5333498 25.481431\n3851 chic  84.0  68.62500 1997-07-17         NA  60.000000 44.5055642 30.298990\n3852 chic  79.0  69.12500 1997-07-18         NA  56.500000 20.8335145 38.127174\n3853 chic  74.5  60.62500 1997-07-19         NA  21.000000 30.9708333 14.633333\n3854 chic  76.5  71.62500 1997-07-20         NA  32.000000 36.8125000 18.008333\n3855 chic  72.0  65.12500 1997-07-21         NA  25.666667 31.6306159 19.775000\n3856 chic  69.0  64.37500 1997-07-22         NA  23.500000 27.6534750 17.058333\n3857 chic  69.0  59.75000 1997-07-23         NA  26.500000 31.1199275 19.910145\n3858 chic  72.5  64.75000 1997-07-24         NA  40.000000 38.3942029 25.147101\n3859 chic  76.0  75.75000 1997-07-25         NA  68.000000 37.7351449 24.346667\n3860 chic  85.5  73.37500 1997-07-26         NA  57.000000 43.7408333 18.475000\n3861 chic  81.5  73.75000 1997-07-27         NA  35.454545 27.6250000 28.625000\n3862 chic  74.5  57.37500 1997-07-28         NA  19.000000 21.7446970 14.979545\n3863 chic  66.5  50.87500 1997-07-29         NA   8.500000 20.7356884  9.717424\n3864 chic  68.5  52.37500 1997-07-30         NA  16.500000 21.3333333 16.495059\n3865 chic  69.0  56.25000 1997-07-31         NA  34.000000 24.7958333 26.700000\n3866 chic  74.5  58.87500 1997-08-01         NA  67.500000 42.4958333 34.950000\n3867 chic  81.5  59.37500 1997-08-02         NA  47.666667 43.7314815 29.016667\n3868 chic  78.0  66.50000 1997-08-03         NA  40.000000 37.0462963 30.516667\n3869 chic  71.0  57.75000 1997-08-04         NA  14.500000 21.8977456 11.599967\n3870 chic  62.5  45.87500 1997-08-05         NA  10.500000 20.2820513 13.353788\n3871 chic  64.5  54.00000 1997-08-06         NA  36.500000 16.1416667 33.378656\n3872 chic  67.0  55.50000 1997-08-07         NA  54.000000 26.8952899 36.856522\n3873 chic  69.5  52.87500 1997-08-08         NA  44.416667 34.7488095 36.100000\n3874 chic  70.5  66.00000 1997-08-09         NA  45.000000 26.6333333 23.191667\n3875 chic  75.5  65.50000 1997-08-10         NA  39.000000 25.1416667 14.125000\n3876 chic  67.5  62.12500 1997-08-11         NA  14.500000 16.0326087 13.366667\n3877 chic  69.5  67.87500 1997-08-12         NA  28.500000  5.9250000 21.925000\n3878 chic  68.5  58.75000 1997-08-13         NA  17.000000 17.7650362 15.476449\n3879 chic  65.5  63.12500 1997-08-14         NA  27.750000 20.4052536 22.434058\n3880 chic  77.0  70.00000 1997-08-15         NA  36.500000 21.6637681 22.741667\n3881 chic  80.0  69.87500 1997-08-16         NA  32.000000 32.7691667 16.900000\n3882 chic  68.5  64.00000 1997-08-17         NA  11.000000 23.0458333 14.333333\n3883 chic  63.5  54.37500 1997-08-18         NA   7.500000 17.5952899 11.591667\n3884 chic  64.0  60.00000 1997-08-19         NA  27.500000 16.4501812 23.108827\n3885 chic  67.0  59.37500 1997-08-20         NA  28.083333 15.1213768 23.897464\n3886 chic  63.5  52.87500 1997-08-21         NA  14.500000 17.5981884 19.411905\n3887 chic  64.0  54.87500 1997-08-22         NA  22.500000 12.2449275 23.094928\n3888 chic  65.5  57.75000 1997-08-23         NA  28.000000 17.7375000 25.850000\n3889 chic  70.5  62.75000 1997-08-24         NA  22.000000 28.8833333 12.050000\n3890 chic  65.5  59.50000 1997-08-25         NA  29.500000 27.5773551 16.088768\n3891 chic  69.0  68.75000 1997-08-26         NA  43.666667 18.8320323 31.504710\n3892 chic  77.0  67.50000 1997-08-27         NA  48.000000 16.6823188 31.821970\n3893 chic  68.5  58.12500 1997-08-28         NA  15.000000 18.5074275 10.882576\n3894 chic  67.0  58.87500 1997-08-29         NA  25.500000 18.5416667 16.564752\n3895 chic  65.0  68.12500 1997-08-30         NA  37.500000 18.3041667 19.979167\n3896 chic  72.0  62.12500 1997-08-31         NA  21.000000 28.2625000 11.906250\n3897 chic  70.5  65.87500 1997-09-01         NA  30.333333 27.0375000 22.135417\n3898 chic  68.0  51.75000 1997-09-02         NA  29.500000 12.1960145 18.666667\n3899 chic  58.5  47.12500 1997-09-03         NA   7.500000 17.0769928  9.650000\n3900 chic  59.0  44.87500 1997-09-04         NA  26.500000 15.1501812 22.179004\n3901 chic  60.5  51.00000 1997-09-05         NA  46.500000 16.7928195 32.146212\n3902 chic  74.5  64.75000 1997-09-06         NA  40.000000 32.2041667 23.458333\n3903 chic  66.0  60.12500 1997-09-07         NA  19.000000 23.1922101 12.733333\n3904 chic  67.5  62.87500 1997-09-08         NA  23.000000 18.7751812 15.647464\n3905 chic  68.5  60.37500 1997-09-09         NA  28.000000 20.2525362 17.766667\n3906 chic  64.5  55.37500 1997-09-10         NA  16.500000 14.6114130 17.501812\n3907 chic  61.5  53.75000 1997-09-11         NA  21.500000  8.6878788 20.991667\n3908 chic  61.5  52.75000 1997-09-12         NA  34.500000 12.2773551 29.528623\n3909 chic  63.5  58.62500 1997-09-13         NA  39.583333 19.7166667 33.641667\n3910 chic  69.0  62.37500 1997-09-14         NA  47.500000 33.3041667 30.208333\n3911 chic  69.5  65.37500 1997-09-15         NA  73.000000 34.1811594 29.416667\n3912 chic  74.5  68.87500 1997-09-16         NA  77.000000 39.7175000 23.390476\n3913 chic  70.0  50.87500 1997-09-17         NA  31.000000 15.4704710 26.272859\n3914 chic  69.0  50.37500 1997-09-18         NA  96.000000 21.5639493 29.834091\n3915 chic  73.0  67.87500 1997-09-19         NA  34.000000 23.1766304 29.018841\n3916 chic  58.5  48.50000 1997-09-20         NA   7.500000 16.0958333 11.300000\n3917 chic  57.0  46.12500 1997-09-21         NA  13.000000 10.3291667 22.608333\n3918 chic  57.5  51.87500 1997-09-22         NA  31.000000  5.8447464 33.058333\n3919 chic  59.0  46.37500 1997-09-23         NA  15.500000 11.2255435 20.691667\n3920 chic  56.5  47.37500 1997-09-24         NA  27.500000  9.7019928 29.191667\n3921 chic  66.0  55.12500 1997-09-25         NA  27.500000 16.3210474 26.432609\n3922 chic  60.0  51.12500 1997-09-26         NA  16.500000 15.4775362 16.500000\n3923 chic  62.5  54.12500 1997-09-27         NA  27.000000 18.7375000 26.216667\n3924 chic  64.0  48.00000 1997-09-28         NA  23.500000 15.3500000 25.708333\n3925 chic  65.0  44.12500 1997-09-29         NA  82.500000 17.8685897 16.160507\n3926 chic  59.5  47.00000 1997-09-30         NA  20.000000 10.0175725 18.616126\n3927 chic  52.0  42.50000 1997-10-01         NA  17.500000 15.6670290 18.302734\n3928 chic  61.0  51.87500 1997-10-02         NA  56.500000 15.1144928 30.010417\n3929 chic  73.0  60.75000 1997-10-03         NA  68.000000 30.4583333 32.414855\n3930 chic  68.0  55.75000 1997-10-04         NA  42.500000 18.2824074 29.604167\n3931 chic  70.0  54.87500 1997-10-05         NA  45.000000 28.8518519 24.208333\n3932 chic  70.5  56.37500 1997-10-06         NA  66.500000 21.2453704 41.479167\n3933 chic  73.5  58.87500 1997-10-07         NA  54.416667 19.7524155 41.027045\n3934 chic  72.5  60.37500 1997-10-08         NA  65.000000 32.2568438 27.656250\n3935 chic  64.0  44.75000 1997-10-09         NA  35.000000 15.8607085 22.056612\n3936 chic  59.0  47.25000 1997-10-10         NA  36.500000  9.1944444 28.833333\n3937 chic  61.5  44.25000 1997-10-11         NA  25.500000 18.4953704 28.041667\n3938 chic  70.0  56.12500 1997-10-12         NA  34.500000 31.9227053 17.042572\n3939 chic  59.5  39.37500 1997-10-13         NA  20.083333 13.2268519 14.947917\n3940 chic  42.5  30.25000 1997-10-14         NA  16.500000  8.5785024 19.760417\n3941 chic  42.5  36.75000 1997-10-15         NA  39.500000  4.3582931 35.562500\n3942 chic  47.5  38.50000 1997-10-16         NA  35.000000  8.6115137 31.442564\n3943 chic  45.5  39.25000 1997-10-17         NA  37.500000  7.2973027 36.112058\n3944 chic  44.5  36.37500 1997-10-18         NA  40.000000  7.4583333 33.958333\n3945 chic  50.0  45.25000 1997-10-19         NA  35.000000 14.5879630 24.722222\n3946 chic  45.5  32.62500 1997-10-20         NA  17.000000  7.0404589 23.943910\n3947 chic  42.5  20.62500 1997-10-21         NA  24.000000 10.3766103 20.940670\n3948 chic  36.0  23.50000 1997-10-22         NA  27.000000 12.4302079 24.982008\n3949 chic  44.5  31.25000 1997-10-23         NA  43.500000  3.9094203 28.756250\n3950 chic  46.0  44.37500 1997-10-24         NA  31.500000  1.5416667 28.187500\n3951 chic  47.0  37.87500 1997-10-25         NA  21.230769 16.2592593 14.885417\n3952 chic  40.0  36.00000 1997-10-26         NA   7.500000 22.9398148  8.927083\n3953 chic  32.5  25.57143 1997-10-27         NA  14.000000 12.3949275 25.437500\n3954 chic  39.0  36.12500 1997-10-28         NA  30.500000  6.0169082 27.761364\n3955 chic  44.0  36.00000 1997-10-29         NA  44.500000  3.7073269 36.454257\n3956 chic  51.0  50.25000 1997-10-30         NA  44.500000 12.5688406 30.244565\n3957 chic  59.5  52.50000 1997-10-31         NA  36.384615 11.8216586 24.152174\n3958 chic  50.0  36.12500 1997-11-01         NA  18.500000  8.2916667 14.677083\n3959 chic  38.5  30.12500 1997-11-02         NA   8.000000  9.2395833 11.708333\n3960 chic  36.5  34.12500 1997-11-03         NA  17.000000  2.3437500 18.354167\n3961 chic  39.0  35.25000 1997-11-04         NA  20.000000  1.3854167 18.288496\n3962 chic  40.0  40.50000 1997-11-05         NA  28.500000  3.3768116 23.236413\n3963 chic  45.0  39.87500 1997-11-06         NA  21.153846  6.8842593 19.781250\n3964 chic  43.0  35.25000 1997-11-07         NA  12.500000 15.2291667 20.375000\n3965 chic  44.0  34.12500 1997-11-08         NA  17.000000 11.2708333 25.447917\n3966 chic  42.5  34.87500 1997-11-09         NA  26.000000  5.2708333 23.718750\n3967 chic  36.5  22.12500 1997-11-10         NA  16.500000  4.9166667 26.323370\n3968 chic  28.5  18.25000 1997-11-11         NA  24.500000  3.9375000 28.062500\n3969 chic  26.5  16.75000 1997-11-12         NA  28.153846  5.5217391 27.916214\n3970 chic  31.5  22.25000 1997-11-13         NA  31.000000  7.0416667 29.371377\n3971 chic  36.0  31.25000 1997-11-14         NA  14.000000 13.0833333 26.625000\n3972 chic  29.0  24.37500 1997-11-15         NA  15.000000  5.2083333 26.895833\n3973 chic  22.0  14.00000 1997-11-16         NA  12.500000 12.3958333 23.020833\n3974 chic  25.5  24.00000 1997-11-17         NA  37.000000  4.4791667 30.114583\n3975 chic  32.0  25.12500 1997-11-18         NA  36.307692  4.0833333 28.942935\n3976 chic  27.5  22.62500 1997-11-19         NA  42.000000  2.5652174 32.453228\n3977 chic  33.5  37.50000 1997-11-20         NA  50.000000  0.9565217 35.520833\n3978 chic  35.5  29.62500 1997-11-21         NA  19.000000 16.9375000 21.510417\n3979 chic  34.5  25.62500 1997-11-22         NA  30.000000  8.2500000 23.583333\n3980 chic  26.0  20.75000 1997-11-23         NA  18.500000 10.1458333 19.083333\n3981 chic  26.5  17.12500 1997-11-24         NA  31.846154  4.8541667 34.587409\n3982 chic  47.0  41.25000 1997-11-25         NA  44.000000  7.4538043 27.922425\n3983 chic  43.0  23.62500 1997-11-26         NA  33.000000  6.5625000 26.734848\n3984 chic  37.5  39.00000 1997-11-27         NA  23.000000  3.8125000 23.916667\n3985 chic  49.0  45.25000 1997-11-28         NA  28.000000  2.6458333 20.000000\n3986 chic  45.5  47.12500 1997-11-29         NA  41.000000  3.1875000 16.718750\n3987 chic  42.0  31.87500 1997-11-30         NA  16.230769 13.0000000 11.895833\n3988 chic  37.0  31.12500 1997-12-01         NA   6.000000 19.3750000 16.762311\n3989 chic  36.5  30.00000 1997-12-02         NA  25.000000  7.0235507 24.913949\n3990 chic  36.5  32.75000 1997-12-03         NA  29.500000  1.4375000 23.418561\n3991 chic  32.0  21.37500 1997-12-04         NA  15.500000  4.8125000 20.728714\n3992 chic  26.0  17.37500 1997-12-05         NA  22.000000  4.2083333 17.718750\n3993 chic  28.5  25.75000 1997-12-06         NA  19.538462  6.7916667 18.333333\n3994 chic  30.0  27.00000 1997-12-07         NA  17.500000  6.9375000 17.739583\n3995 chic  28.5  26.87500 1997-12-08         NA  25.500000  4.3333333 21.175725\n3996 chic  33.0  30.62500 1997-12-09         NA  41.500000  1.6458333 24.446023\n3997 chic  34.5  31.00000 1997-12-10         NA  10.000000 11.1875000 24.108243\n3998 chic  33.5  25.00000 1997-12-11         NA  13.500000 15.2282609 28.591938\n3999 chic  27.5  21.25000 1997-12-12         NA  25.076923  7.7989130 25.270833\n4000 chic  26.5  22.25000 1997-12-13         NA  28.500000  4.8333333 24.958333\n4001 chic  31.0  25.87500 1997-12-14         NA  35.500000  3.1458333 33.718750\n4002 chic  37.5  30.87500 1997-12-15         NA  40.500000  2.5416667 30.419508\n4003 chic  39.0  30.00000 1997-12-16         NA  42.000000  2.5625000 32.156250\n4004 chic  37.0  26.50000 1997-12-17         NA  40.500000  5.2916667 43.367754\n4005 chic  38.5  32.75000 1997-12-18         NA  44.416667  1.6956522 31.250000\n4006 chic  40.5  33.12500 1997-12-19         NA  53.000000  1.6875000 37.506629\n4007 chic  33.0  23.87500 1997-12-20         NA  15.500000  6.3958333 23.531250\n4008 chic  32.5  25.00000 1997-12-21         NA  16.500000 15.5208333 19.479167\n4009 chic  34.5  33.00000 1997-12-22         NA  19.500000  5.6250000 22.979167\n4010 chic  34.0  27.62500 1997-12-23         NA  36.500000  1.9673913 24.770833\n4011 chic  34.0  31.50000 1997-12-24         NA  31.846154  5.6458333 21.760417\n4012 chic  30.5  24.50000 1997-12-25         NA  18.000000  5.5000000 19.052083\n4013 chic  28.5  23.75000 1997-12-26         NA  26.500000  3.5416667 19.421196\n4014 chic  23.0  13.75000 1997-12-27         NA  19.500000  3.6875000 31.010417\n4015 chic  25.5  28.75000 1997-12-28         NA  23.500000  3.5833333 22.697917\n4016 chic  29.5  23.62500 1997-12-29         NA  22.500000  2.0878623 26.145833\n4017 chic  21.5  17.25000 1997-12-30         NA  23.076923  4.1992754 30.788043\n4018 chic  18.0   5.25000 1997-12-31         NA  24.500000  8.6041667 29.318388\n4019 chic  28.0  22.50000 1998-01-01         NA  23.000000 12.8194444 17.883333\n4020 chic  44.0  35.90000 1998-01-02         NA  28.000000  8.4305556 21.425000\n4021 chic  47.0  46.90000 1998-01-03         NA  23.500000 10.3194444 16.025000\n4022 chic  45.0  40.00000 1998-01-04         NA  12.000000  7.1111111 13.883333\n4023 chic  48.0  46.70000 1998-01-05  11.500000  20.615385  2.8000110 20.916074\n4024 chic  43.0  41.10000 1998-01-06         NA  30.000000  5.3888889 19.955303\n4025 chic  38.0  34.20000 1998-01-07         NA   6.000000 14.1388889 11.422826\n4026 chic  34.0  30.80000 1998-01-08         NA   4.500000 15.9643720 14.633333\n4027 chic  25.0  25.30000 1998-01-09         NA  20.000000 10.2777778 20.284420\n4028 chic  12.0   2.80000 1998-01-10         NA  23.500000 11.1250000 16.458333\n4029 chic  18.0   7.10000 1998-01-11  10.200000  30.750000  5.7083333 28.475000\n4030 chic  23.0  20.60000 1998-01-12         NA  27.000000  2.1944444 24.908333\n4031 chic   7.0  -6.00000 1998-01-13         NA  41.500000  6.2107488 33.917424\n4032 chic  17.0  15.40000 1998-01-14         NA  46.500000  9.0694444 28.951515\n4033 chic  28.0  23.10000 1998-01-15         NA  30.000000  3.4861111 30.745455\n4034 chic  28.0  23.60000 1998-01-16         NA  19.500000  8.4190821 23.685507\n4035 chic  23.0  21.90000 1998-01-17  38.100000  32.461538  3.1805556 25.300000\n4036 chic  16.0  13.50000 1998-01-18         NA  41.500000  3.6388889 31.216667\n4037 chic  24.0  19.10000 1998-01-19         NA  44.500000  1.6805556 35.150000\n4038 chic  26.0  21.30000 1998-01-20         NA  51.500000  3.5307971 35.375000\n4039 chic  31.0  26.80000 1998-01-21         NA  42.000000  5.1250000 24.725000\n4040 chic  32.0  29.90000 1998-01-22         NA  39.000000  1.7946860 26.485507\n4041 chic  28.0  25.80000 1998-01-23  33.950000  38.692308  1.7500000 29.376299\n4042 chic  28.0  24.20000 1998-01-24         NA  44.500000  2.2222222 35.166667\n4043 chic  28.0  22.90000 1998-01-25         NA  24.000000  8.5555556 23.816667\n4044 chic  31.0  28.60000 1998-01-26         NA  38.000000  1.6666667 31.525000\n4045 chic  33.0  30.40000 1998-01-27         NA  34.000000  1.4734300 36.417391\n4046 chic  36.0  32.50000 1998-01-28         NA  34.000000  1.2234300 33.193116\n4047 chic  37.0  30.60000 1998-01-29  21.400000  30.166667  3.0972222 30.316667\n4048 chic  31.0  25.60000 1998-01-30         NA  21.000000  4.6527778 31.122475\n4049 chic  35.0  29.10000 1998-01-31         NA  31.500000  4.5000000 27.427273\n4050 chic  39.0  31.00000 1998-02-01         NA  23.500000  6.2361111 23.866667\n4051 chic  33.0  26.60000 1998-02-02         NA  19.500000  8.7638889 23.975000\n4052 chic  34.0  28.90000 1998-02-03         NA  21.500000 12.6527778 25.237582\n4053 chic  32.0  25.60000 1998-02-04  13.900000  12.769231 24.7385266 14.084420\n4054 chic  32.0  27.40000 1998-02-05         NA   8.000000 27.6425121 14.639625\n4055 chic  36.0  29.40000 1998-02-06         NA  14.500000 22.7397343 23.500000\n4056 chic  34.0  28.70000 1998-02-07         NA  25.000000 18.1111111 20.691667\n4057 chic  33.0  28.30000 1998-02-08         NA  24.500000 23.4722222 20.883333\n4058 chic  35.0  28.80000 1998-02-09         NA  69.000000  4.5416667 45.394697\n4059 chic  39.0  33.90000 1998-02-10  29.500000  62.846154  4.9776570 36.241634\n4060 chic  41.0  38.60000 1998-02-11         NA  34.000000  4.2916667 29.301087\n4061 chic  35.0  28.30000 1998-02-12         NA  16.000000 12.1805556 24.283333\n4062 chic  36.0  31.40000 1998-02-13         NA  30.000000  5.7805556 26.091667\n4063 chic  38.0  31.00000 1998-02-14         NA  29.000000  3.9583333 26.633333\n4064 chic  43.0  32.00000 1998-02-15         NA  26.000000  7.5833333 25.833333\n4065 chic  42.0  35.30000 1998-02-16  22.550000  33.692308 11.4305556 22.216667\n4066 chic  41.0  38.80000 1998-02-17         NA  16.000000 11.2916667 19.681818\n4067 chic  39.0  35.30000 1998-02-18         NA   8.000000 14.4368687 22.920870\n4068 chic  40.0  35.00000 1998-02-19         NA  20.500000  5.5214646 27.844401\n4069 chic  39.0  33.50000 1998-02-20         NA  19.500000  8.3768939 27.870238\n4070 chic  38.0  30.10000 1998-02-21         NA  25.500000 12.5833333 28.900000\n4071 chic  44.0  35.00000 1998-02-22  27.750000  39.076923 11.8333333 23.300000\n4072 chic  41.0  29.70000 1998-02-23         NA  29.000000 18.9583333 32.002569\n4073 chic  45.0  36.70000 1998-02-24         NA  36.500000  7.8955314 30.449242\n4074 chic  42.0  34.60000 1998-02-25         NA  34.500000 17.8278986 25.332609\n4075 chic  54.0  36.70000 1998-02-26         NA  31.000000 14.4027778 27.867260\n4076 chic  42.0  37.70000 1998-02-27         NA  24.500000 14.8230676 26.025000\n4077 chic  41.0  33.20000 1998-02-28  16.500000  21.230769 12.6805556 28.108333\n4078 chic  35.0  28.50000 1998-03-01         NA  11.000000 11.0000000 20.116667\n4079 chic  33.0  31.50000 1998-03-02         NA  20.000000  4.1666667 29.023551\n4080 chic  34.0  30.40000 1998-03-03         NA   9.000000 17.6111111 24.781818\n4081 chic  34.0  24.10000 1998-03-04         NA  12.000000 21.4088164 23.242544\n4082 chic  36.0  24.10000 1998-03-05         NA  10.500000 19.6105072 21.800725\n4083 chic  34.0  27.90000 1998-03-06  19.600000  31.923077  9.0946970 29.224671\n4084 chic  36.0  28.10000 1998-03-07         NA  24.500000 22.5694444 20.491667\n4085 chic  38.0  34.20000 1998-03-08         NA  15.000000 21.7638889 12.983333\n4086 chic  26.0  20.70000 1998-03-09         NA  23.000000 30.0292398 12.347222\n4087 chic  18.0   4.90000 1998-03-10         NA  17.000000 20.4305556 24.927083\n4088 chic  18.0   2.30000 1998-03-11         NA  20.000000 16.1388889 29.894928\n4089 chic  18.0   6.70000 1998-03-12  18.900000  36.909091 15.0244565 32.538913\n4090 chic  29.0  20.70000 1998-03-13         NA  38.000000 17.2821558 29.351449\n4091 chic  28.0  14.00000 1998-03-14         NA  18.000000 28.2638889 22.383333\n4092 chic  27.0  20.90000 1998-03-15         NA  15.500000 29.1805556 24.019203\n4093 chic  30.0  22.60000 1998-03-16         NA  26.000000 30.2035024 20.558333\n4094 chic  36.0  31.70000 1998-03-17         NA  37.500000 16.3055556 26.328869\n4095 chic  45.0  41.90000 1998-03-18  26.400000  35.166667  4.8907005 31.310548\n4096 chic  37.0  34.20000 1998-03-19         NA   9.000000 21.2500000 22.075000\n4097 chic  35.0  27.10000 1998-03-20         NA   8.000000 39.0500000 13.227536\n4098 chic  37.0  24.70000 1998-03-21         NA   6.500000 37.9000000 14.741667\n4099 chic  36.0  22.60000 1998-03-22         NA  12.500000 26.8500000 27.058333\n4100 chic  38.0  21.60000 1998-03-23         NA  33.500000 18.1833333 38.500000\n4101 chic  40.0  23.30000 1998-03-24  15.950000  31.461538 17.6001318 36.113768\n4102 chic  51.0  38.60000 1998-03-25         NA  30.500000 21.8329710 28.981917\n4103 chic  68.0  53.90000 1998-03-26         NA  68.500000 35.4648551 17.051515\n4104 chic  67.0  52.30000 1998-03-27         NA  68.500000 34.3444444 18.140470\n4105 chic  57.0  50.90000 1998-03-28         NA  15.500000 31.2291667 15.270833\n4106 chic  62.0  54.30000 1998-03-29         NA  33.000000 22.8645833 16.739583\n4107 chic  73.0  59.40000 1998-03-30  15.600000  30.083333 27.2500000 14.665756\n4108 chic  59.0  51.70000 1998-03-31         NA  21.500000 24.6757246 20.316102\n4109 chic  44.0  36.60000 1998-04-01         NA  12.500000 20.9637681 19.379348\n4110 chic  44.0  37.10000 1998-04-02   9.100000  14.500000 14.8737573 21.367424\n4111 chic  41.0  35.00000 1998-04-03   7.000000  10.500000 20.6045784 16.884420\n4112 chic  41.0  28.10000 1998-04-04   2.100000   6.500000 29.4393939 13.200000\n4113 chic  41.0  23.70000 1998-04-05   6.400000  16.000000 21.3560606 23.016667\n4114 chic  48.0  32.60000 1998-04-06  14.900000  33.500000 20.9166667 29.233333\n4115 chic  52.0  39.40000 1998-04-07  27.600000  43.000000 20.3433161 25.181884\n4116 chic  48.0  46.30000 1998-04-08  22.700000  20.500000  9.6612319 26.203986\n4117 chic  43.0  32.80000 1998-04-09  14.300000  13.500000 26.0441206 16.783498\n4118 chic  46.0  27.00000 1998-04-10  11.900000  15.500000 25.7958333 24.991667\n4119 chic  50.0  34.90000 1998-04-11  16.950000  31.000000 22.4333333 32.575000\n4120 chic  64.0  38.50000 1998-04-12         NA  34.000000 44.8833333 13.575000\n4121 chic  62.0  46.70000 1998-04-13         NA  40.000000 33.8250000 20.466667\n4122 chic  58.0  48.10000 1998-04-14         NA  24.500000 23.5189394 23.731667\n4123 chic  53.0  46.60000 1998-04-15  23.600000  36.000000 15.5706971 26.233366\n4124 chic  42.0  40.00000 1998-04-16   8.500000  13.000000 11.7908432 20.012242\n4125 chic  45.0  30.20000 1998-04-17  11.550000  20.153846 18.4957181 30.188104\n4126 chic  50.0  32.10000 1998-04-18  16.100000  36.000000 22.5984848 29.694444\n4127 chic  52.0  33.00000 1998-04-19  20.000000  26.000000 29.3030303 29.840278\n4128 chic  52.0  40.80000 1998-04-20         NA  41.000000 24.3111001 34.604167\n4129 chic  50.0  46.20000 1998-04-21         NA  23.500000 30.6028986 20.207702\n4130 chic  53.0  37.10000 1998-04-22         NA  21.500000 31.3150826 25.524832\n4131 chic  56.0  35.60000 1998-04-23  18.500000  44.692308 18.3115448 47.815580\n4132 chic  62.0  36.50000 1998-04-24  16.800000  44.000000 26.7753623 30.439493\n4133 chic  56.0  46.80000 1998-04-25  23.200000  35.000000 30.7045455 22.025000\n4134 chic  48.0  43.30000 1998-04-26  18.400000  24.000000 28.3446970 12.675000\n4135 chic  45.0  27.50000 1998-04-27   8.500000  10.500000 31.3614954 12.025000\n4136 chic  46.0  33.80000 1998-04-28  18.200000  24.500000 22.6856061 21.833333\n4137 chic  54.0  48.40000 1998-04-29  29.450000  51.000000 14.4608636 23.542029\n4138 chic  55.0  51.30000 1998-04-30  39.400000  34.000000 10.7862319 25.313095\n4139 chic  59.0  53.70000 1998-05-01  35.400000  28.500000 14.2951252 31.429046\n4140 chic  57.0  52.00000 1998-05-02  33.300000  35.000000 20.6628788 26.798611\n4141 chic  53.0  50.30000 1998-05-03  19.300000  18.500000 22.8825758 15.784722\n4142 chic  60.0  47.00000 1998-05-04  18.900000  28.000000 21.8173584 27.152778\n4143 chic  62.0  54.10000 1998-05-05  28.000000  43.000000 21.3190801 35.479167\n4144 chic  68.0  56.80000 1998-05-06  23.900000  35.000000 25.0227273 33.032005\n4145 chic  57.0  56.00000 1998-05-07  32.100000  34.500000 24.2704216 33.991667\n4146 chic  62.0  51.30000 1998-05-08  16.900000  21.000000 36.5405609 17.867210\n4147 chic  58.0  43.50000 1998-05-09   7.900000  13.500000 26.6780303 14.593750\n4148 chic  58.0  40.10000 1998-05-10   6.600000  11.000000 29.1174242 14.812500\n4149 chic  61.0  48.10000 1998-05-11  11.750000  28.666667 23.0743802 22.232576\n4150 chic  63.0  55.10000 1998-05-12  23.500000  46.000000 35.2473500 22.975000\n4151 chic  68.0  52.50000 1998-05-13  15.600000  35.000000 31.6682971 28.940010\n4152 chic  68.0  55.40000 1998-05-14  26.200000  48.000000 35.2766469 38.431818\n4153 chic  75.0  65.80000 1998-05-15  56.500000  91.000000 38.5730072 29.032609\n4154 chic  72.0  50.90000 1998-05-16   7.300000  37.500000 36.2541667 15.583333\n4155 chic  68.0  49.20000 1998-05-17  10.600000  34.000000 28.7541667 31.841667\n4156 chic  76.0  49.40000 1998-05-18  13.200000  79.000000 38.1110507 31.274638\n4157 chic  79.0  61.00000 1998-05-19  25.900000  78.000000 37.3800366 44.208333\n4158 chic  65.0  52.80000 1998-05-20  12.200000  37.500000 21.9545290 34.276120\n4159 chic  64.0  46.90000 1998-05-21   5.700000  26.000000 26.7475789 21.832757\n4160 chic  57.0  47.90000 1998-05-22   9.000000  28.000000 22.7348485 17.388889\n4161 chic  61.0  45.50000 1998-05-23  10.100000  31.923077 34.0000000 14.541667\n4162 chic  61.0  54.30000 1998-05-24  19.400000  27.000000 33.2537879 16.263889\n4163 chic  62.0  48.30000 1998-05-25  11.600000  17.500000 37.9469697 17.312500\n4164 chic  63.0  45.70000 1998-05-26  27.700000  40.500000 26.9117260 38.246981\n4165 chic  67.0  52.80000 1998-05-27  29.500000  59.500000 37.2611989 39.269571\n4166 chic  75.0  64.30000 1998-05-28  25.600000  72.000000 34.3322276 30.119565\n4167 chic  74.0  62.30000 1998-05-29  12.300000  29.846154 29.0000000 32.944444\n4168 chic  73.0  62.70000 1998-05-30  18.900000  49.500000 33.4734848 27.680556\n4169 chic  70.0  60.20000 1998-05-31  10.400000  29.500000 40.2651515 11.631944\n4170 chic  63.0  45.70000 1998-06-01  10.000000  29.500000 28.1915349 21.736111\n4171 chic  63.0  50.70000 1998-06-02   7.800000  38.500000 26.7329321 22.011905\n4172 chic  55.0  45.70000 1998-06-03   7.100000  22.000000 14.8677536 24.515646\n4173 chic  56.0  37.70000 1998-06-04   6.850000  26.500000 23.3387681 24.673611\n4174 chic  50.0  41.60000 1998-06-05   9.400000   9.500000 21.3558959 14.263889\n4175 chic  54.0  38.90000 1998-06-06  11.800000  20.500000  9.1250000 28.770833\n4176 chic  58.0  41.10000 1998-06-07   8.400000  15.000000 23.8939394 20.020833\n4177 chic  56.0  46.00000 1998-06-08  19.000000  33.500000 18.4759552 31.000000\n4178 chic  61.0  59.00000 1998-06-09  33.800000  26.000000 17.8908103 25.496679\n4179 chic  68.0  58.00000 1998-06-10  27.150000  37.000000 23.2416008 25.755901\n4180 chic  68.0  65.80000 1998-06-11  23.100000  31.500000 18.7687747 27.445350\n4181 chic  74.0  61.50000 1998-06-12  11.700000  27.000000 33.7623967 19.742452\n4182 chic  69.0  58.20000 1998-06-13  15.500000  18.500000 33.5643939 23.368056\n4183 chic  67.0  57.50000 1998-06-14  20.000000  26.500000 29.0909091 27.340278\n4184 chic  70.0  58.70000 1998-06-15  19.400000  23.000000 29.6342975 21.555556\n4185 chic  70.0  61.20000 1998-06-16  14.100000  39.500000 16.0332675 31.314484\n4186 chic  73.0  63.70000 1998-06-17  20.300000  37.000000 22.4922596 31.136473\n4187 chic  77.0  69.30000 1998-06-18  22.000000  52.500000 37.2627304 25.679293\n4188 chic  73.0  61.20000 1998-06-19   9.700000  28.000000 32.8838933 23.270833\n4189 chic  78.0  68.00000 1998-06-20  16.700000  33.000000 33.8825758 26.173611\n4190 chic  79.0  66.00000 1998-06-21  13.700000  21.500000 34.4696970 22.118056\n4191 chic  74.0  61.90000 1998-06-22  12.550000  31.083333 28.7689394 24.361111\n4192 chic  74.0  60.60000 1998-06-23  15.700000  38.500000 41.7213439 29.348485\n4193 chic  83.0  70.20000 1998-06-24  25.400000  59.000000 37.8826506 28.765206\n4194 chic  83.0  70.80000 1998-06-25  21.300000  58.500000 45.4599802 19.775664\n4195 chic  79.0  68.40000 1998-06-26  15.600000  34.000000 39.0717676 24.546498\n4196 chic  82.0  70.30000 1998-06-27  21.400000  43.000000 49.6555258 21.152778\n4197 chic  78.0  69.00000 1998-06-28  11.450000  22.181818 40.8231749 18.326389\n4198 chic  77.0  68.20000 1998-06-29  14.600000  31.000000 22.8156879 30.934481\n4199 chic  74.0  60.50000 1998-06-30   9.100000  19.500000 28.3203228 18.763285\n4200 chic  70.0  56.70000 1998-07-01  22.100000  27.500000 25.4446640 20.173611\n4201 chic  73.0  57.80000 1998-07-02  25.700000  53.500000 28.4280303 31.566468\n4202 chic  79.0  65.40000 1998-07-03  21.600000  43.500000 35.1439394 24.930556\n4203 chic  69.0  62.40000 1998-07-04  15.250000  23.923077 26.5606061 12.430556\n4204 chic  70.0  56.30000 1998-07-05   8.200000  19.000000 26.9318182 11.715278\n4205 chic  78.0  69.00000 1998-07-06  24.400000  36.500000 31.5879447 24.555556\n4206 chic  72.0  66.70000 1998-07-07  18.800000  31.500000 35.7628458 16.185516\n4207 chic  74.0  64.90000 1998-07-08  14.700000  19.500000 36.1142951 16.033213\n4208 chic  75.0  64.20000 1998-07-09  25.400000  33.000000 33.6043838 26.451449\n4209 chic  73.0  62.40000 1998-07-10  20.600000  30.916667 31.4917355 19.546023\n4210 chic  71.0  55.90000 1998-07-11  13.500000  23.000000 39.7916667 18.666667\n4211 chic  71.0  55.60000 1998-07-12  19.800000  26.000000 39.6893939 25.736111\n4212 chic  73.0  60.30000 1998-07-13  30.300000  64.500000 37.0188645 37.930556\n4213 chic  78.0  67.10000 1998-07-14  41.400000  75.000000 40.0809017 32.590537\n4214 chic  79.0  66.10000 1998-07-15  32.600000  57.500000 40.2307013 24.525966\n4215 chic  80.0  57.90000 1998-07-16         NA  32.583333 24.8050725 23.044219\n4216 chic  75.0  64.70000 1998-07-17         NA  39.500000 29.1617965 17.798611\n4217 chic  77.0  65.50000 1998-07-18         NA  52.500000 32.8750000 31.395833\n4218 chic  81.0  71.80000 1998-07-19         NA  32.000000 36.1704545 17.125000\n4219 chic  79.0  68.10000 1998-07-20         NA  36.500000 29.2348485 26.868056\n4220 chic  85.0  72.90000 1998-07-21         NA  60.500000 36.8904919 22.136364\n4221 chic  76.0  67.60000 1998-07-22   9.800000  23.833333 20.5943227 27.948342\n4222 chic  73.0  56.60000 1998-07-23  13.700000  35.000000 22.1042490 21.655221\n4223 chic  72.0  51.10000 1998-07-24   8.500000  25.500000 22.7068511 23.419686\n4224 chic  70.0  55.40000 1998-07-25  11.300000  28.500000 25.3863636 25.284722\n4225 chic  70.0  56.80000 1998-07-26  11.600000  23.000000 28.5984848 21.666667\n4226 chic  74.0  65.10000 1998-07-27  25.200000  44.000000 30.0037879 22.116793\n4227 chic  79.0  64.90000 1998-07-28  11.350000  44.153846 26.9542161 20.075758\n4228 chic  77.0  55.20000 1998-07-29  16.000000  20.000000 34.1142951 15.242236\n4229 chic  72.0  57.50000 1998-07-30  16.800000  29.000000 21.8555665 23.266606\n4230 chic  71.0  54.70000 1998-07-31  13.900000  12.000000 26.3491436 10.124616\n4231 chic  72.0  57.30000 1998-08-01  11.800000  30.000000 32.7840909 20.319444\n4232 chic  72.0  55.90000 1998-08-02  11.600000  29.000000 40.5530303 23.930556\n4233 chic  78.0  64.80000 1998-08-03  36.400000  61.538462 34.8022069 24.715278\n4234 chic  70.0  68.60000 1998-08-04  16.000000  25.500000 21.2755570 26.948864\n4235 chic  76.0  70.70000 1998-08-05         NA  27.000000 24.0726285 20.229167\n4236 chic  78.0  71.30000 1998-08-06         NA  36.000000 22.8838184 20.115173\n4237 chic  75.0  70.80000 1998-08-07         NA  30.000000 12.6844862 25.680556\n4238 chic  77.0  70.70000 1998-08-08         NA  30.000000 20.8125000 19.076389\n4239 chic  77.0  70.10000 1998-08-09  32.500000  35.615385 22.7666667 23.569444\n4240 chic  76.0  68.50000 1998-08-10         NA  33.000000 29.8970772 22.177632\n4241 chic  71.0  63.40000 1998-08-11         NA  35.000000 25.1931818 15.688982\n4242 chic  70.0  60.90000 1998-08-12  20.700000  29.000000 30.5862828 15.432230\n4243 chic  71.0  60.20000 1998-08-13  22.900000  41.500000 32.9503234 27.897727\n4244 chic  71.0  64.40000 1998-08-14  28.400000  60.000000 28.3109504 42.229167\n4245 chic  71.0  64.30000 1998-08-15  13.950000  28.461538 22.9924242 20.743056\n4246 chic  72.0  62.90000 1998-08-16  16.400000  24.500000 29.0378788 17.743056\n4247 chic  75.0  69.00000 1998-08-17  29.000000  53.500000 25.5788396 31.534722\n4248 chic  68.0  63.90000 1998-08-18   8.800000  16.500000 23.2677866 16.220548\n4249 chic  69.0  55.10000 1998-08-19  16.000000  34.000000 22.7753388 20.965278\n4250 chic  73.0  65.40000 1998-08-20  24.400000  51.500000 27.1338933 32.763450\n4251 chic  80.0  70.80000 1998-08-21  29.300000  48.272727 33.1681749 24.826389\n4252 chic  78.0  69.50000 1998-08-22  21.300000  40.000000 34.1074561 18.104167\n4253 chic  81.0  71.20000 1998-08-23  39.600000  59.000000 45.8636364 14.326389\n4254 chic  76.0  71.40000 1998-08-24  23.400000  54.000000 20.8777448 27.116244\n4255 chic  76.0  63.90000 1998-08-25  13.200000  26.500000 26.9160426 23.625000\n4256 chic  73.0  60.90000 1998-08-26  14.800000  34.000000 26.7824440 26.089839\n4257 chic  72.0  64.50000 1998-08-27  18.950000  32.416667 28.2634298 27.307093\n4258 chic  69.0  66.40000 1998-08-28  21.500000  35.500000 14.7121212 33.146825\n4259 chic  76.0  63.10000 1998-08-29  11.300000  29.000000 22.0378788 23.750000\n4260 chic  70.0  55.70000 1998-08-30   7.200000  20.000000 23.4886364 18.805556\n4261 chic  69.0  54.60000 1998-08-31   8.600000  28.000000 20.1583423 24.586490\n4262 chic  69.0  58.50000 1998-09-01  14.300000  45.000000 19.4769733 31.972132\n4263 chic  65.0  50.10000 1998-09-02  24.150000  44.692308 22.6763834 28.077020\n4264 chic  68.0  57.90000 1998-09-03  19.300000  42.000000 25.6174242 31.740985\n4265 chic  69.0  54.20000 1998-09-04  14.700000  25.500000 36.7898551 20.093254\n4266 chic  70.0  61.40000 1998-09-05  27.300000  45.000000 33.0666667 37.041667\n4267 chic  81.0  70.40000 1998-09-06  31.500000  50.500000 50.6625000 20.312500\n4268 chic  66.0  57.10000 1998-09-07  10.300000  21.500000 30.3750000 14.486111\n4269 chic  63.0  46.90000 1998-09-08   5.150000  14.692308 18.0282369 16.906181\n4270 chic  63.0  50.30000 1998-09-09   7.400000  17.500000 16.1712780 20.707428\n4271 chic  63.0  52.80000 1998-09-10  14.800000  39.500000 17.3251288 35.664773\n4272 chic  71.0  53.10000 1998-09-11  21.700000  48.000000 30.5937687 44.892512\n4273 chic  74.0  56.70000 1998-09-12  24.500000  57.000000 37.3939394 44.451389\n4274 chic  74.0  62.70000 1998-09-13  28.100000  58.500000 37.0757576 37.763889\n4275 chic  72.0  67.50000 1998-09-14  26.450000  48.000000 24.1511858 27.875000\n4276 chic  70.0  67.00000 1998-09-15  11.200000  18.000000 16.5097167 14.758081\n4277 chic  72.0  64.90000 1998-09-16  12.900000  17.500000 25.5892472 12.284456\n4278 chic  68.0  58.40000 1998-09-17  15.300000  21.500000 28.6442688 17.197368\n4279 chic  68.0  57.80000 1998-09-18  20.900000  46.000000 28.2346838 27.550423\n4280 chic  72.0  60.90000 1998-09-19  33.700000  58.500000 37.6250000 35.722222\n4281 chic  76.0  66.30000 1998-09-20  30.300000  47.583333 22.0227273 27.798611\n4282 chic  63.0  51.80000 1998-09-21   5.500000  13.500000 14.6393281 14.585749\n4283 chic  58.0  47.70000 1998-09-22   4.600000  10.000000 19.6769481 13.312500\n4284 chic  56.0  41.50000 1998-09-23   9.900000  27.000000 11.9227602 28.824879\n4285 chic  59.0  53.60000 1998-09-24  21.300000  37.000000  8.4253953 33.302372\n4286 chic  66.0  64.10000 1998-09-25  31.600000  57.500000 12.3043478 34.633454\n4287 chic  79.0  65.80000 1998-09-26  29.650000  53.230769 39.5946970 18.534722\n4288 chic  73.0  63.80000 1998-09-27  19.200000  34.500000 32.7689394 13.694444\n4289 chic  63.0  52.50000 1998-09-28   9.400000  28.500000 19.3859444 22.355072\n4290 chic  63.0  57.00000 1998-09-29  21.300000  44.500000  7.9321176 40.131341\n4291 chic  64.0  57.90000 1998-09-30  17.700000  35.500000 15.7202809 28.167463\n4292 chic  53.0  35.70000 1998-10-01   5.100000  14.500000 11.8074769 20.658696\n4293 chic  49.0  41.90000 1998-10-02   7.550000  23.384615 12.8284226 24.241667\n4294 chic  55.0  49.30000 1998-10-03   7.100000  12.500000 21.7575758 11.250000\n4295 chic  60.0  50.30000 1998-10-04   8.400000  15.000000 21.9696970  9.675000\n4296 chic  65.0  61.40000 1998-10-05  32.500000  37.000000 12.3833992 19.400000\n4297 chic  65.0  61.20000 1998-10-06   9.300000  15.500000 10.6549407 18.813768\n4298 chic  56.0  49.20000 1998-10-07   7.300000  17.000000  4.7053195 17.891667\n4299 chic  54.0  44.80000 1998-10-08   5.150000  11.307692 12.6961957 18.250000\n4300 chic  53.0  45.60000 1998-10-09  16.300000  29.000000  6.7065217 29.275000\n4301 chic  53.0  46.40000 1998-10-10  26.400000  45.500000  9.9666667 31.400000\n4302 chic  56.0  49.10000 1998-10-11  30.900000  34.500000 22.1916667 28.341667\n4303 chic  60.0  46.90000 1998-10-12  18.100000  39.500000 10.9625000 33.741667\n4304 chic  49.0  36.80000 1998-10-13   6.900000  24.000000  7.0092227 21.716667\n4305 chic  48.0  40.40000 1998-10-14   6.450000  25.153846  6.1551383 21.386001\n4306 chic  58.0  48.40000 1998-10-15  14.800000  26.500000  7.3969203 27.109632\n4307 chic  68.0  57.20000 1998-10-16  24.900000  45.500000 25.1534420 27.550000\n4308 chic  67.0  64.40000 1998-10-17  32.200000  46.500000 24.3708333 21.250000\n4309 chic  57.0  48.10000 1998-10-18   6.300000  14.000000 16.2875000  9.575000\n4310 chic  52.0  39.20000 1998-10-19   9.000000  25.000000  7.9376812 23.441667\n4311 chic  50.0  33.90000 1998-10-20   6.450000  19.916667  9.8799572 27.524242\n4312 chic  48.0  34.50000 1998-10-21         NA  15.500000 10.4311430 22.914394\n4313 chic  45.0  31.10000 1998-10-22         NA  23.500000  7.3923419 29.216667\n4314 chic  52.0  36.30000 1998-10-23         NA  44.000000  7.6685606 32.061924\n4315 chic  54.0  38.90000 1998-10-24  18.200000  45.500000 11.2208333 31.500000\n4316 chic  55.0  44.80000 1998-10-25  23.800000  35.500000  7.6708333 34.875000\n4317 chic  62.0  49.70000 1998-10-26  28.600000  55.307692 10.7835465 46.733333\n4318 chic  63.0  58.60000 1998-10-27  36.100000  64.500000  5.2090580 39.391667\n4319 chic  54.0  52.30000 1998-10-28  11.700000  16.500000 12.2939394 20.037879\n4320 chic  52.0  51.90000 1998-10-29  29.000000  33.000000  5.1025033 25.136905\n4321 chic  61.0  58.40000 1998-10-30  41.000000  45.000000  1.4791667 23.025000\n4322 chic  57.0  52.70000 1998-10-31  11.500000  15.500000  4.7250000 13.133333\n4323 chic  54.0  50.00000 1998-11-01   5.550000   8.833333 19.6416667  8.800000\n4324 chic  49.0  39.80000 1998-11-02   5.500000   8.000000 22.3000000 10.776515\n4325 chic  41.0  33.40000 1998-11-03   3.700000   7.500000 28.7750000 10.975000\n4326 chic  37.0  32.80000 1998-11-04  10.200000  11.000000 19.6594203 25.927042\n4327 chic  39.0  27.40000 1998-11-05  10.800000  20.000000  5.5243590 30.467929\n4328 chic  38.0  25.80000 1998-11-06  13.500000  23.000000  6.9876894 30.271821\n4329 chic  35.0  26.10000 1998-11-07  21.250000  38.384615  5.7916667 31.635417\n4330 chic  37.0  31.80000 1998-11-08  33.700000  34.000000  5.8437500 30.406250\n4331 chic  43.0  37.30000 1998-11-09  36.500000  45.000000  6.1385870 28.190670\n4332 chic  52.0  41.20000 1998-11-10   9.800000  31.000000 14.7083333 12.616667\n4333 chic  41.0  28.50000 1998-11-11  11.300000  25.000000 14.2083333 18.900000\n4334 chic  40.0  31.10000 1998-11-12  19.400000  28.000000  1.8055556 33.196970\n4335 chic  43.0  34.60000 1998-11-13  20.500000  31.090909  8.5618687 31.847727\n4336 chic  50.0  40.20000 1998-11-14  16.600000  27.000000  6.8194444 23.816667\n4337 chic  43.0  32.20000 1998-11-15  15.100000  16.000000 14.2500000 16.758333\n4338 chic  48.0  39.10000 1998-11-16  23.500000  31.500000  3.5416667 22.250000\n4339 chic  42.0  34.60000 1998-11-17  18.900000  27.000000  4.1388889 25.575000\n4340 chic  48.0  38.70000 1998-11-18  24.100000  35.500000  3.9772727 25.622727\n4341 chic  45.0  31.10000 1998-11-19  12.950000  25.846154  5.3508454 14.993207\n4342 chic  31.0  24.40000 1998-11-20  14.800000  17.000000  5.3571429 22.036905\n4343 chic  34.0  24.40000 1998-11-21  16.500000  28.000000  5.5000000 27.041667\n4344 chic  49.0  34.90000 1998-11-22  11.700000  40.500000 12.5972222 20.558333\n4345 chic  50.0  35.40000 1998-11-23  10.900000  34.000000  9.3472222 25.561957\n4346 chic  46.0  30.10000 1998-11-24  17.600000  34.500000  3.3750000 37.326515\n4347 chic  50.0  35.80000 1998-11-25  14.700000  33.307692  1.1997930 30.541356\n4348 chic  50.0  32.30000 1998-11-26         NA  20.000000  6.8750000 21.583333\n4349 chic  48.0  35.70000 1998-11-27         NA  50.500000  2.5000000 35.983333\n4350 chic  54.0  48.60000 1998-11-28  28.000000  39.000000  8.3055556 28.941667\n4351 chic  63.0  58.40000 1998-11-29  31.700000  43.500000 10.3472222 15.516667\n4352 chic  52.0  50.70000 1998-11-30  25.100000  31.000000  9.5138889 17.766667\n4353 chic  45.0  37.70000 1998-12-01  17.850000  22.846154  3.6376812 25.025000\n4354 chic  55.0  45.80000 1998-12-02  14.800000  29.000000  5.8472222 25.816831\n4355 chic  61.0  54.90000 1998-12-03  22.900000  37.000000  6.0740558 24.474012\n4356 chic  61.0  59.30000 1998-12-04  31.600000  42.500000  0.5555556 24.391667\n4357 chic  59.0  56.60000 1998-12-05  23.900000  30.000000  4.8055556 21.250000\n4358 chic  50.0  49.20000 1998-12-06  15.600000  17.000000  4.8194444 14.108333\n4359 chic  39.0  31.60000 1998-12-07  11.800000   9.166667 15.5277778 19.145238\n4360 chic  38.0  29.00000 1998-12-08  24.900000  25.000000  2.9444444 33.539493\n4361 chic  39.0  29.50000 1998-12-09  20.700000  27.500000  3.0896465 31.040476\n4362 chic  35.0  29.00000 1998-12-10  23.000000  22.500000  1.8925121 30.091667\n4363 chic  39.0  26.10000 1998-12-11  15.000000  28.500000  2.9402174 32.025000\n4364 chic  38.0  26.10000 1998-12-12  18.000000  27.000000  3.7222222 34.158333\n4365 chic  38.0  31.20000 1998-12-13  19.500000  24.615385  9.1666667 28.316667\n4366 chic  36.0  32.10000 1998-12-14  22.900000  40.500000  4.6183575 40.964888\n4367 chic  44.0  31.20000 1998-12-15         NA  31.500000  3.2032828 28.123715\n4368 chic  37.0  27.20000 1998-12-16         NA  18.000000  2.5833333 32.437879\n4369 chic  32.0  22.30000 1998-12-17  14.200000  19.500000  5.4317633 29.566667\n4370 chic  43.0  30.10000 1998-12-18  14.300000  40.000000  5.2500000 24.247727\n4371 chic  35.0  26.30000 1998-12-19  17.750000  21.666667  6.0416667 18.658333\n4372 chic  31.0  27.60000 1998-12-20  19.200000  16.500000  2.8055556 24.725000\n4373 chic  23.0  18.80000 1998-12-21  22.600000  22.500000  3.6919192 24.796970\n4374 chic  10.0  -1.90000 1998-12-22  14.800000  24.000000 11.8985507 23.791304\n4375 chic  17.0   5.70000 1998-12-23  15.800000  25.000000  5.8810386 27.947727\n4376 chic  19.0   4.80000 1998-12-24  11.000000  24.000000  7.3333333 28.100000\n4377 chic  25.0  11.10000 1998-12-25  11.800000  17.583333 11.8888889 19.575000\n4378 chic  26.0  12.30000 1998-12-26         NA  31.000000  9.2083333 22.608333\n4379 chic  36.0  24.00000 1998-12-27         NA  29.500000  6.8750000 21.758333\n4380 chic  29.0  23.30000 1998-12-28         NA  33.000000  2.3774155 32.618643\n4381 chic  22.0  18.40000 1998-12-29         NA  28.000000  9.5694444 21.708333\n4382 chic   7.0  -1.60000 1998-12-30         NA  28.000000  6.0138889 32.430105\n4383 chic  13.0   5.10000 1998-12-31  20.400000  23.900000  6.3888889 28.169763\n4384 chic  14.0   7.70000 1999-01-01         NA  21.500000 15.6111111 21.491667\n4385 chic  22.0  21.00000 1999-01-02         NA         NA 25.7638889 12.641667\n4386 chic  16.0   8.40000 1999-01-03         NA  29.500000 19.3888889 19.041667\n4387 chic  -2.0  -6.90000 1999-01-04         NA  16.500000  8.5972222 28.450000\n4388 chic   1.0  -6.10000 1999-01-05         NA  28.000000  4.8194444 35.125000\n4389 chic  12.0   9.80000 1999-01-06  22.333333  22.000000  5.5169082 32.853623\n4390 chic   1.0  -6.70000 1999-01-07         NA  38.000000  3.6527778 45.908333\n4391 chic  16.0  10.90000 1999-01-08  14.100000  23.000000 12.7361111 36.250758\n4392 chic   4.0  -1.10000 1999-01-09         NA  23.000000  9.1805556 32.183333\n4393 chic   6.0  -0.40000 1999-01-10         NA  22.500000 15.6527778 23.375000\n4394 chic   5.0   0.00000 1999-01-11         NA  29.000000  6.7222222 40.966667\n4395 chic  20.0  14.10000 1999-01-12         NA  31.142857  6.6165459 34.914855\n4396 chic  20.0  15.40000 1999-01-13         NA   6.000000 28.2222222 12.397727\n4397 chic  18.0  12.60000 1999-01-14         NA  22.500000 14.8055556 26.656061\n4398 chic  23.0  20.20000 1999-01-15         NA  33.500000  2.9690382 32.764888\n4399 chic  30.0  29.80000 1999-01-16         NA  31.500000  6.3333333 29.075000\n4400 chic  28.0  31.30000 1999-01-17         NA  33.500000  5.0416667 30.283333\n4401 chic  29.0  25.80000 1999-01-18  13.300000  10.857143 19.0138889 16.890217\n4402 chic  27.0  20.00000 1999-01-19         NA  30.000000  6.4722222 40.895455\n4403 chic  30.0  28.80000 1999-01-20  28.600000  48.000000  3.9583333 44.491770\n4404 chic  37.0  32.60000 1999-01-21         NA  46.000000  4.2916667 35.109058\n4405 chic  42.0  41.50000 1999-01-22         NA  18.000000  2.7638889 35.448485\n4406 chic  39.0  35.30000 1999-01-23         NA  10.000000  4.9444444 24.016667\n4407 chic  33.0  30.00000 1999-01-24  21.450000  16.142857 14.8750000 21.591667\n4408 chic  28.0  24.60000 1999-01-25         NA  19.000000  7.4583333 26.241667\n4409 chic  29.0  23.40000 1999-01-26         NA  29.500000  5.6135266 31.925000\n4410 chic  42.0  34.00000 1999-01-27         NA  40.000000  8.1388889 24.193478\n4411 chic  33.0  27.40000 1999-01-28         NA  27.000000  7.6805556 24.819697\n4412 chic  33.0  25.60000 1999-01-29         NA  29.500000  9.8399758 31.675000\n4413 chic  34.0  28.00000 1999-01-30  31.928571  38.000000 15.2222222 24.666667\n4414 chic  36.0  27.50000 1999-01-31  32.500000  22.500000 20.5972222 16.108333\n4415 chic  40.0  38.40000 1999-02-01         NA  21.500000  4.3611111 22.255263\n4416 chic  38.0  32.40000 1999-02-02         NA  10.500000  4.7548309 28.062500\n4417 chic  41.0  27.40000 1999-02-03         NA  28.500000 12.9583333 26.829710\n4418 chic  31.0  21.10000 1999-02-04         NA  20.500000 14.0328283 24.194129\n4419 chic  31.0  24.20000 1999-02-05  19.637500  23.857143  3.0555556 32.684848\n4420 chic  40.0  30.40000 1999-02-06         NA  24.500000  8.4305556 27.500000\n4421 chic  33.0  29.80000 1999-02-07         NA  27.500000 11.9722222 19.033333\n4422 chic  37.0  36.20000 1999-02-08  27.600000  29.500000  4.4321476 29.679658\n4423 chic  44.0  29.80000 1999-02-09         NA  17.500000  8.5063131 36.087253\n4424 chic  44.0  27.20000 1999-02-10         NA  38.000000  9.2083333 41.525000\n4425 chic  49.0  47.80000 1999-02-11  17.380000  24.857143 12.0815217 16.270455\n4426 chic  23.0  13.10000 1999-02-12         NA  21.000000 22.0972222 16.966667\n4427 chic  23.0  10.80000 1999-02-13         NA  26.000000 14.7638889 27.116667\n4428 chic  34.0  21.90000 1999-02-14  13.300000  27.500000 12.6666667 27.075000\n4429 chic  45.0  30.60000 1999-02-15         NA  37.000000 12.7361111 28.841667\n4430 chic  39.0  32.10000 1999-02-16         NA  31.000000  6.6944444 22.380435\n4431 chic  27.0  20.40000 1999-02-17  15.250000  16.428571 11.1073232 23.645909\n4432 chic  29.0  21.80000 1999-02-18         NA  30.500000  9.3568841 33.460766\n4433 chic  28.0  20.90000 1999-02-19         NA  11.000000 22.9293478 20.725000\n4434 chic  25.0  17.00000 1999-02-20  10.250000  10.500000 20.7916667 20.916667\n4435 chic  28.0  15.70000 1999-02-21         NA   4.500000 32.1805556 12.475000\n4436 chic  26.0   9.40000 1999-02-22         NA  18.500000 23.9722222 22.183333\n4437 chic  29.0  14.90000 1999-02-23  19.800000  32.857143 11.4082126 23.343841\n4438 chic  27.0  22.90000 1999-02-24  39.900000  52.500000  3.3750000 31.750000\n4439 chic  33.0  26.50000 1999-02-25         NA  30.000000  6.1618357 30.191304\n4440 chic  36.0  27.90000 1999-02-26  48.100000  40.500000  5.6473430 34.739027\n4441 chic  43.0  39.20000 1999-02-27         NA  35.000000  3.8194444 27.716667\n4442 chic  37.0  32.10000 1999-02-28         NA  10.500000 12.5000000 15.083333\n4443 chic  38.0  25.30000 1999-03-01  10.100000  18.250000 21.2361111 25.358333\n4444 chic  37.0  33.10000 1999-03-02         NA  30.000000  2.2803030 35.934091\n4445 chic  31.0  18.70000 1999-03-03         NA  10.500000 17.7361111 22.675000\n4446 chic  30.0  18.40000 1999-03-04  18.800000  20.500000 12.7602657 33.443478\n4447 chic  35.0  28.70000 1999-03-05         NA  30.500000 11.8611111 25.453623\n4448 chic  25.0  19.70000 1999-03-06         NA   7.000000 32.2083333 12.466667\n4449 chic  21.0  14.40000 1999-03-07  11.842857  17.000000 35.0000000 18.733333\n4450 chic  24.0  16.20000 1999-03-08         NA  35.000000 25.1527778 21.950000\n4451 chic  29.0  26.40000 1999-03-09         NA  15.000000 21.6805556 20.041667\n4452 chic  29.0  20.30000 1999-03-10         NA   6.500000 33.6388889 17.794895\n4453 chic  28.0  20.40000 1999-03-11         NA  15.000000 22.3635540 35.116304\n4454 chic  27.0  19.60000 1999-03-12         NA  11.000000 28.9157197 26.163768\n4455 chic  28.0  18.10000 1999-03-13  10.914286  19.142857 29.9375000 22.408333\n4456 chic  32.0  18.90000 1999-03-14         NA   7.000000 37.2395833 13.266667\n4457 chic  31.0  19.20000 1999-03-15         NA  30.000000 14.7287138 45.225000\n4458 chic  43.0  29.80000 1999-03-16  20.000000  36.500000 12.8663043 37.568808\n4459 chic  50.0  40.70000 1999-03-17         NA  43.000000 30.2533213 19.120652\n4460 chic  38.0  27.10000 1999-03-18         NA  17.000000 27.8996212 19.431818\n4461 chic  36.0  23.70000 1999-03-19  10.483333  18.000000 23.6250431 27.475000\n4462 chic  39.0  27.20000 1999-03-20         NA  28.500000 19.6736111 33.740942\n4463 chic  38.0  23.20000 1999-03-21         NA  11.000000 32.4513889 15.425000\n4464 chic  36.0  21.30000 1999-03-22         NA  22.500000 22.5471014 30.650000\n4465 chic  38.0  21.00000 1999-03-23         NA  40.500000 15.4202899 38.803623\n4466 chic  35.0  21.90000 1999-03-24         NA  17.500000 34.3242754 21.740580\n4467 chic  32.0  23.30000 1999-03-25   9.914286  18.285714 32.4323671 24.883333\n4468 chic  35.0  25.90000 1999-03-26  11.000000  14.000000 31.4513889 25.100000\n4469 chic  41.0  26.30000 1999-03-27         NA  36.000000 22.9305556 35.225000\n4470 chic  43.0  33.70000 1999-03-28         NA  49.500000 18.9236111 29.650000\n4471 chic  48.0  24.50000 1999-03-29         NA  33.500000 16.8891908 36.406291\n4472 chic  55.0  28.50000 1999-03-30         NA  75.000000 25.4435935 33.250000\n4473 chic  60.0  41.30000 1999-03-31  26.814286  61.000000 31.0729578 21.197917\n4474 chic  58.0  51.70000 1999-04-01         NA  38.000000 15.7148311 26.250000\n4475 chic  64.0  54.60000 1999-04-02         NA  43.500000 15.2765152 34.100000\n4476 chic  63.0  57.80000 1999-04-03         NA  35.000000 15.9810606 23.550000\n4477 chic  56.0  47.30000 1999-04-04         NA  18.000000 22.4886364 15.983333\n4478 chic  50.0  43.20000 1999-04-05         NA  19.000000 20.4144565 19.643478\n4479 chic  53.0  42.40000 1999-04-06  11.616667  15.142857 23.4967032 19.837879\n4480 chic  55.0  42.70000 1999-04-07         NA  47.000000 27.8142292 34.547464\n4481 chic  55.0  43.70000 1999-04-08  14.500000  35.500000 29.0095520 28.476449\n4482 chic  45.0  40.00000 1999-04-09   8.400000  12.000000 30.8616601 18.100000\n4483 chic  47.0  35.00000 1999-04-10         NA  18.000000 33.8825758 12.783333\n4484 chic  46.0  39.70000 1999-04-11         NA  14.500000 22.3522727 16.000000\n4485 chic  45.0  32.10000 1999-04-12  10.925000  21.428571 23.5533597 26.883333\n4486 chic  50.0  33.30000 1999-04-13  19.900000  32.500000 19.8962451 32.950000\n4487 chic  49.0  26.00000 1999-04-14         NA  47.000000 26.7829381 38.298551\n4488 chic  49.0  39.40000 1999-04-15  16.950000  25.500000 35.4686489 18.658465\n4489 chic  44.0  37.30000 1999-04-16         NA  11.000000 26.3334980 26.910507\n4490 chic  44.0  34.00000 1999-04-17         NA  11.500000 16.8440989 25.066667\n4491 chic  42.0  37.10000 1999-04-18  19.185714  24.285714 12.3583333 29.741667\n4492 chic  42.0  36.50000 1999-04-19         NA  35.000000 12.7521559 32.350000\n4493 chic  45.0  39.40000 1999-04-20  25.900000  35.500000 22.3904809 28.244565\n4494 chic  54.0  48.00000 1999-04-21         NA  31.000000 24.7616930 23.649304\n4495 chic  48.0  47.20000 1999-04-22         NA  31.500000 11.6968599 23.236111\n4496 chic  43.0  35.60000 1999-04-23         NA   6.000000 29.2937253 15.658730\n4497 chic  44.0  24.60000 1999-04-24   7.137500  13.428571 31.8500000 18.625000\n4498 chic  48.0  30.50000 1999-04-25         NA  23.000000 32.2375000 23.625000\n4499 chic  51.0  33.40000 1999-04-26         NA  31.000000 37.2500000 29.479167\n4500 chic  50.0  41.50000 1999-04-27         NA  32.000000 28.8778147 22.279491\n4501 chic  51.0  38.40000 1999-04-28         NA  14.500000 30.0328632 15.645202\n4502 chic  52.0  32.70000 1999-04-29         NA  15.500000 34.9648386 16.796219\n4503 chic  51.0  29.00000 1999-04-30   9.100000  22.285714 30.8572134 26.467172\n4504 chic  56.0  30.50000 1999-05-01         NA  24.000000 31.0600233 29.541667\n4505 chic  58.0  37.30000 1999-05-02         NA  30.500000 43.1250000 27.270833\n4506 chic  64.0  42.80000 1999-05-03         NA  44.500000 39.9886364 33.221230\n4507 chic  67.0  52.20000 1999-05-04         NA  61.000000 41.2494910 27.319444\n4508 chic  70.0  57.20000 1999-05-05         NA  63.500000 35.6200593 18.588768\n4509 chic  58.0  52.80000 1999-05-06  11.475000  22.500000 19.7294436 23.285024\n4510 chic  56.0  46.90000 1999-05-07         NA  26.000000 21.5342556 18.185145\n4511 chic  53.0  48.20000 1999-05-08         NA  14.000000 12.2901515 16.366667\n4512 chic  51.0  42.70000 1999-05-09         NA  11.500000 18.5871212 15.950000\n4513 chic  58.0  46.50000 1999-05-10         NA  32.000000 33.3829710 22.433333\n4514 chic  67.0  52.10000 1999-05-11         NA  60.000000 34.1333864 28.669565\n4515 chic  62.0  52.70000 1999-05-12  21.383333  41.142857 28.8812582 25.807246\n4516 chic  51.0  41.00000 1999-05-13         NA  16.500000 28.3415978 18.086051\n4517 chic  53.0  41.30000 1999-05-14         NA  16.000000 26.9986825 18.452778\n4518 chic  60.0  54.80000 1999-05-15  45.600000  45.500000 22.4242424 23.555556\n4519 chic  69.0  63.10000 1999-05-16         NA  43.500000 37.0189394 19.895833\n4520 chic  69.0  62.60000 1999-05-17         NA  28.000000 29.6730896 18.906944\n4521 chic  61.0  52.30000 1999-05-18   8.637500  15.375000 22.2849144 21.830556\n4522 chic  61.0  44.80000 1999-05-19         NA  30.000000 21.0604414 29.319158\n4523 chic  64.0  49.10000 1999-05-20         NA  41.000000 36.1734190 30.569005\n4524 chic  66.0  56.80000 1999-05-21  34.700000  54.500000 47.5087286 27.777778\n4525 chic  59.0  52.80000 1999-05-22         NA  16.500000 35.4053030 11.291667\n4526 chic  60.0  50.70000 1999-05-23         NA  20.500000 18.2424242 20.425000\n4527 chic  51.0  40.70000 1999-05-24   6.433333  13.000000 17.4826476 17.662500\n4528 chic  56.0  38.70000 1999-05-25         NA  35.000000 26.7654809 19.277778\n4529 chic  60.0  40.40000 1999-05-26         NA  23.000000 24.1317523 22.709569\n4530 chic  64.0  41.30000 1999-05-27         NA  53.000000 25.7648371 40.712286\n4531 chic  75.0  53.80000 1999-05-28         NA  54.000000 29.5657115 35.814815\n4532 chic  76.0  54.40000 1999-05-29         NA  53.500000 46.4583333 33.008333\n4533 chic  70.0  56.00000 1999-05-30  32.400000  48.571429 51.8484848 26.758333\n4534 chic  73.0  63.40000 1999-05-31         NA  32.000000 30.5538538 15.500000\n4535 chic  65.0  59.70000 1999-06-01         NA  27.500000 17.2887022 20.891667\n4536 chic  64.0  57.70000 1999-06-02         NA  16.000000 15.1701252 21.657440\n4537 chic  58.0  47.70000 1999-06-03         NA  16.500000 22.8189005 16.962423\n4538 chic  64.0  56.60000 1999-06-04         NA  29.500000 32.3335879 23.046717\n4539 chic  75.0  68.00000 1999-06-05  17.516667  26.142857 30.3674242 21.183333\n4540 chic  80.0  69.90000 1999-06-06         NA  41.000000 33.0492424 16.891667\n4541 chic  81.0  63.80000 1999-06-07         NA  38.500000 36.4055426 19.083333\n4542 chic  80.0  63.20000 1999-06-08         NA  45.500000 38.2723979 28.178571\n4543 chic  79.0  63.20000 1999-06-09         NA  44.500000 27.1026620 35.266908\n4544 chic  79.0  66.70000 1999-06-10         NA  50.000000 28.9107378 36.042874\n4545 chic  78.0  67.50000 1999-06-11  32.783333  43.285714 32.7997365 34.839674\n4546 chic  75.0  68.20000 1999-06-12  36.000000  39.500000 39.6780303 30.958333\n4547 chic  65.0  63.50000 1999-06-13         NA  21.500000 28.1969697 19.604167\n4548 chic  66.0  55.00000 1999-06-14         NA  13.500000 25.5826746 14.965278\n4549 chic  58.0  37.90000 1999-06-15         NA   8.500000 25.8932806 10.791667\n4550 chic  61.0  44.70000 1999-06-16         NA  18.000000 28.8123727 16.721014\n4551 chic  57.0  42.90000 1999-06-17   6.362500  13.142857 25.3883399 13.232186\n4552 chic  59.0  47.60000 1999-06-18         NA  27.500000 27.4995059 20.489130\n4553 chic  68.0  49.90000 1999-06-19         NA  26.500000 38.4469697 20.159722\n4554 chic  67.0  54.40000 1999-06-20  26.000000  39.000000 52.9659091 19.263889\n4555 chic  72.0  59.80000 1999-06-21         NA  57.000000 53.4065457 27.722222\n4556 chic  74.0  66.20000 1999-06-22         NA  71.000000 33.9745671 40.428030\n4557 chic  76.0  67.30000 1999-06-23  49.042857  57.571429 45.5660334 27.472881\n4558 chic  76.0  65.90000 1999-06-24         NA  26.000000 28.3783152 24.169298\n4559 chic  75.0  58.20000 1999-06-25         NA  40.500000 30.2672925 34.598128\n4560 chic  76.0  66.20000 1999-06-26  24.900000  37.500000 35.5991736 27.090278\n4561 chic  78.0  70.60000 1999-06-27         NA  44.500000 41.5208333 23.000000\n4562 chic  77.0  69.20000 1999-06-28         NA  44.000000 31.3669302 21.247475\n4563 chic  66.0  51.10000 1999-06-29   8.212500  20.625000 23.5313618 16.964848\n4564 chic  68.0  54.70000 1999-06-30         NA  26.000000 28.6918643 27.283734\n4565 chic  74.0  64.30000 1999-07-01         NA  31.500000 27.2788208 23.815152\n4566 chic  77.0  67.30000 1999-07-02         NA  30.500000 28.7727273 21.661836\n4567 chic  84.0  76.20000 1999-07-03         NA  55.500000 28.9886364 12.738095\n4568 chic  86.0  74.10000 1999-07-04         NA  45.000000 29.8939394 10.232051\n4569 chic  87.0  74.40000 1999-07-05  24.500000  32.875000 33.2916667 10.270833\n4570 chic  79.0  62.70000 1999-07-06         NA  27.500000 28.4048090 23.151429\n4571 chic  75.0  53.70000 1999-07-07         NA  28.000000 29.8133908 30.816667\n4572 chic  76.0  60.40000 1999-07-08  20.400000  59.000000 38.9889059 29.396970\n4573 chic  76.0  65.00000 1999-07-09         NA  40.500000 34.6907713 17.176010\n4574 chic  64.0  51.50000 1999-07-10         NA  11.500000 23.7916667 10.062500\n4575 chic  67.0  50.30000 1999-07-11  10.462500  23.571429 21.3409091 22.208333\n4576 chic  68.0  50.80000 1999-07-12         NA  37.000000 25.5634058 29.357488\n4577 chic  70.0  55.70000 1999-07-13         NA  64.000000 33.0295544 35.219066\n4578 chic  74.0  59.20000 1999-07-14         NA  71.500000 45.6510061 30.882453\n4579 chic  78.0  62.80000 1999-07-15         NA  71.000000 51.4741436 23.051027\n4580 chic  82.0  68.30000 1999-07-16         NA  82.500000 45.8812582 22.229167\n4581 chic  75.0  70.60000 1999-07-17  19.450000  29.285714 26.0984848 17.416667\n4582 chic  77.0  66.60000 1999-07-18         NA  28.000000 31.9469697 17.152778\n4583 chic  79.0  70.10000 1999-07-19         NA  35.000000 26.9342287 19.763889\n4584 chic  76.0  70.40000 1999-07-20  23.300000  26.500000 27.9329710 17.044192\n4585 chic  83.0  72.10000 1999-07-21         NA  39.000000 30.2704216 24.256944\n4586 chic  82.0  73.40000 1999-07-22         NA  40.000000 27.1665619 21.643116\n4587 chic  83.0  72.80000 1999-07-23  18.785714  33.875000 25.6688675 29.458333\n4588 chic  82.0  73.20000 1999-07-24         NA  23.500000 34.6439394 25.135417\n4589 chic  85.0  70.60000 1999-07-25         NA  25.000000 37.3750000 18.229167\n4590 chic  80.0  69.50000 1999-07-26  20.400000  41.500000 24.0243742 30.175000\n4591 chic  79.0  68.30000 1999-07-27         NA  26.000000 26.2572464 21.608333\n4592 chic  82.0  71.80000 1999-07-28         NA  35.500000 34.0021410 22.534091\n4593 chic  83.0  76.60000 1999-07-29  22.616667  42.857143 30.4891903 25.026515\n4594 chic  90.0  77.10000 1999-07-30         NA  54.000000 34.1706522 27.479771\n4595 chic  83.0  71.40000 1999-07-31         NA  30.000000 37.6958333 18.409722\n4596 chic  74.0  60.10000 1999-08-01         NA  12.000000 26.1576923  9.652778\n4597 chic  71.0  56.30000 1999-08-02         NA  13.500000 17.2570346 15.361111\n4598 chic  71.0  59.00000 1999-08-03         NA  37.000000 23.4925725 30.630556\n4599 chic  76.0  58.30000 1999-08-04  13.633333  29.142857 23.7701845 25.261364\n4600 chic  73.0  55.60000 1999-08-05  10.900000  19.500000 20.4930830 22.712596\n4601 chic  76.0  62.00000 1999-08-06         NA  43.000000 28.6839592 23.812720\n4602 chic  72.0  67.70000 1999-08-07         NA  38.500000 22.1742424 25.083333\n4603 chic  66.0  57.00000 1999-08-08         NA  10.000000 25.3863636  7.881944\n4604 chic  66.0  56.20000 1999-08-09         NA  26.000000 22.2824440 19.437500\n4605 chic  78.0  63.80000 1999-08-10  15.828571  31.428571 31.2180501 20.361111\n4606 chic  75.0  61.10000 1999-08-11         NA  34.500000 17.9173254 25.759415\n4607 chic  70.0  65.90000 1999-08-12         NA  26.000000 14.0435531 29.152256\n4608 chic  72.0  65.60000 1999-08-13         NA  28.000000 22.5632411 12.918176\n4609 chic  64.0  52.70000 1999-08-14         NA   8.500000 22.2083333 10.048611\n4610 chic  66.0  54.40000 1999-08-15         NA  16.500000 20.5871212 20.118056\n4611 chic  73.0  57.90000 1999-08-16  21.366667  32.857143 30.0610552 27.993056\n4612 chic  75.0  60.60000 1999-08-17         NA  34.000000 28.6749012 23.433207\n4613 chic  67.0  62.70000 1999-08-18         NA  36.000000  6.8282279 36.461490\n4614 chic  68.0  62.30000 1999-08-19  12.000000  16.500000 23.5757875 15.085090\n4615 chic  67.0  57.20000 1999-08-20         NA  16.500000 22.6190711 19.804650\n4616 chic  65.0  57.40000 1999-08-21         NA  28.500000 18.4772727 34.979167\n4617 chic  67.0  57.10000 1999-08-22  20.371429  28.571429 22.6296296 34.340278\n4618 chic  72.0  64.20000 1999-08-23         NA  36.500000 20.5278223 33.979167\n4619 chic  71.0  67.10000 1999-08-24         NA  33.500000 29.3176877 19.423611\n4620 chic  70.0  66.10000 1999-08-25  28.800000  24.000000 32.6908911 20.802226\n4621 chic  72.0  64.60000 1999-08-26         NA  33.500000 25.9395586 25.147041\n4622 chic  74.0  66.10000 1999-08-27  29.300000  57.500000 24.5159420 42.297101\n4623 chic  80.0  69.70000 1999-08-28  39.540000  56.571429 31.5125000 30.650000\n4624 chic  69.0  56.00000 1999-08-29         NA  13.500000 29.9500000  7.641667\n4625 chic  62.0  51.80000 1999-08-30         NA  17.500000 26.0186571 12.683333\n4626 chic  65.0  54.40000 1999-08-31         NA  28.000000 25.3017128 22.296014\n4627 chic  70.0  57.30000 1999-09-01         NA  62.500000 35.8590721 36.589646\n4628 chic  74.0  62.10000 1999-09-02         NA  83.500000 40.0575069 49.549242\n4629 chic  76.0  61.50000 1999-09-03  44.957143  74.000000 48.1165559 42.982790\n4630 chic  79.0  61.60000 1999-09-04         NA  60.500000 57.4886364 26.701389\n4631 chic  77.0  63.50000 1999-09-05         NA  59.000000 54.9621212 25.458333\n4632 chic  66.0  54.90000 1999-09-06         NA  14.000000 25.3181818 11.048611\n4633 chic  65.0  55.20000 1999-09-07         NA  28.000000 16.3842227 25.791667\n4634 chic  71.0  54.20000 1999-09-08         NA  37.500000 19.4150198 31.543561\n4635 chic  62.0  46.60000 1999-09-09   8.400000  40.285714 13.4068002 21.221014\n4636 chic  62.0  45.20000 1999-09-10         NA  52.000000 15.0385375 29.140042\n4637 chic  64.0  48.70000 1999-09-11         NA  48.000000 21.9469697 29.722222\n4638 chic  68.0  58.90000 1999-09-12         NA  31.000000 26.4128788 22.833333\n4639 chic  59.0  49.90000 1999-09-13         NA  18.500000  7.8633070 16.423611\n4640 chic  59.0  44.40000 1999-09-14         NA  23.500000 10.2284256 20.610982\n4641 chic  55.0  46.20000 1999-09-15   9.816667  24.285714 10.4568511 22.583745\n4642 chic  59.0  47.80000 1999-09-16   8.700000  18.000000 13.7194574 20.670439\n4643 chic  59.0  48.10000 1999-09-17         NA  25.000000 14.6641963 23.216486\n4644 chic  62.0  49.00000 1999-09-18         NA  42.500000 20.2689394 32.635417\n4645 chic  64.0  53.50000 1999-09-19         NA  43.500000 31.4886364 26.090278\n4646 chic  58.0  45.90000 1999-09-20         NA  13.000000 13.2434573 12.750000\n4647 chic  51.0  44.60000 1999-09-21   5.650000  11.875000 15.8804348 14.549603\n4648 chic  57.0  39.80000 1999-09-22         NA  30.000000 13.6994401 33.804799\n4649 chic  66.0  46.30000 1999-09-23         NA  44.500000 24.8959157 26.643912\n4650 chic  57.0  47.10000 1999-09-24   6.000000   9.000000 21.2514822 10.425615\n4651 chic  62.0  48.40000 1999-09-25         NA  38.000000 26.9125000 25.395833\n4652 chic  72.0  49.30000 1999-09-26         NA  72.000000 46.6708333 20.756944\n4653 chic  66.0  58.70000 1999-09-27  11.100000  23.571429 37.1234848 14.201389\n4654 chic  58.0  56.70000 1999-09-28   8.300000  12.500000 18.0453152 19.252976\n4655 chic  56.0  43.70000 1999-09-29         NA  11.000000 12.6240119 19.203804\n4656 chic  56.0  38.90000 1999-09-30   9.100000  29.500000 13.5112319 26.263466\n4657 chic  51.0  35.00000 1999-10-01         NA  27.000000  9.0634881 28.652273\n4658 chic  46.0  40.80000 1999-10-02         NA  19.000000 10.1750000 20.833333\n4659 chic  44.0  40.20000 1999-10-03   7.450000  14.750000 16.4083333 15.300000\n4660 chic  47.0  38.00000 1999-10-04         NA  13.500000 15.7666667 20.685714\n4661 chic  51.0  36.80000 1999-10-05         NA  33.000000  9.3844203 30.808333\n4662 chic  52.0  41.80000 1999-10-06  10.550000  20.500000 17.6117754 17.569851\n4663 chic  59.0  42.40000 1999-10-07         NA  28.500000 14.4694335 28.836726\n4664 chic  61.0  54.10000 1999-10-08         NA  49.500000 14.4223485 28.836034\n4665 chic  59.0  57.60000 1999-10-09  34.857143  47.000000  5.9458333 24.100000\n4666 chic  66.0  58.00000 1999-10-10         NA  24.500000 23.1000000 16.825000\n4667 chic  55.0  46.10000 1999-10-11         NA  27.000000 14.3541667 26.108333\n4668 chic  62.0  47.20000 1999-10-12         NA  56.500000 20.8960145 28.753788\n4669 chic  56.0  44.00000 1999-10-13         NA  27.000000 14.2385870 19.791017\n4670 chic  48.0  34.80000 1999-10-14         NA  25.000000 10.8197464 23.230797\n4671 chic  64.0  46.30000 1999-10-15  16.400000  44.285714 24.8472826 23.923814\n4672 chic  58.0  54.20000 1999-10-16         NA  43.500000 23.2166667 20.833333\n4673 chic  45.0  33.80000 1999-10-17         NA   9.500000 14.8958333 17.020833\n4674 chic  44.0  34.40000 1999-10-18  14.700000  23.000000  4.7847826 24.533333\n4675 chic  50.0  33.50000 1999-10-19         NA  36.500000  9.1001812 24.925000\n4676 chic  44.0  30.70000 1999-10-20         NA  31.000000  6.8682971 22.946739\n4677 chic  52.0  36.30000 1999-10-21  11.500000  36.428571 10.4373188 27.431522\n4678 chic  51.0  26.60000 1999-10-22         NA  29.500000 20.1387681 15.083333\n4679 chic  43.0  25.70000 1999-10-23         NA  14.500000 20.7208333 12.208333\n4680 chic  40.0  22.10000 1999-10-24         NA  13.500000 13.7500000 23.141667\n4681 chic  50.0  28.10000 1999-10-25         NA  51.000000 13.2169887 31.207609\n4682 chic  53.0  29.40000 1999-10-26         NA  46.500000 11.3244565 32.700000\n4683 chic  48.0  37.00000 1999-10-27  16.262500  38.857143  9.8317523 27.090119\n4684 chic  64.0  43.30000 1999-10-28         NA  68.000000 15.0750000 33.291667\n4685 chic  62.0  47.00000 1999-10-29         NA  71.000000 26.6230896 38.090909\n4686 chic  66.0  50.70000 1999-10-30         NA  68.500000 38.6916667 23.108333\n4687 chic  58.0  49.30000 1999-10-31         NA  46.500000 14.7666667 24.925000\n4688 chic  59.0  46.90000 1999-11-01         NA  54.500000 12.7676768 30.241667\n4689 chic  42.0  22.60000 1999-11-02   5.180000  20.285714 16.9728261 19.615476\n4690 chic  37.0  17.70000 1999-11-03         NA  28.500000 12.9444444 27.253788\n4691 chic  46.0  24.20000 1999-11-04         NA  79.500000  8.7753623 37.851773\n4692 chic  55.0  34.30000 1999-11-05  22.200000  51.500000 11.3623188 33.958333\n4693 chic  45.0  20.30000 1999-11-06         NA  29.000000 10.3888889 33.987879\n4694 chic  44.0  32.30000 1999-11-07         NA  36.000000 17.3055556 31.298529\n4695 chic  55.0  41.00000 1999-11-08  18.414286  42.142857  5.8611111 42.919048\n4696 chic  67.0  48.50000 1999-11-09         NA  51.000000 22.0833333 29.808333\n4697 chic  58.0  46.70000 1999-11-10         NA  49.500000 23.1944444 21.435266\n4698 chic  44.0  38.00000 1999-11-11         NA  18.000000 18.2777778 20.016667\n4699 chic  47.0  41.20000 1999-11-12         NA  61.500000  2.6976285 31.354183\n4700 chic  54.0  43.80000 1999-11-13         NA  66.000000 12.4166667 35.141667\n4701 chic  45.0  30.50000 1999-11-14   7.728571  23.750000 18.9861111 17.108333\n4702 chic  41.0  26.30000 1999-11-15         NA  22.000000  6.5833333 29.833333\n4703 chic  38.0  29.30000 1999-11-16         NA  16.500000 12.0138889 23.341667\n4704 chic  40.0  25.00000 1999-11-17  13.700000  25.000000  7.1497585 32.309524\n4705 chic  58.0  36.20000 1999-11-18         NA  91.000000 14.5694444 27.410714\n4706 chic  49.0  37.70000 1999-11-19         NA  80.000000 11.7252415 18.190580\n4707 chic  39.0  35.20000 1999-11-20  26.212500  37.625000  0.8541667 15.116667\n4708 chic  42.0  42.00000 1999-11-21         NA  51.000000  1.5625000 20.458333\n4709 chic  54.0  46.00000 1999-11-22         NA  58.000000  5.5833333 29.204420\n4710 chic  52.0  50.00000 1999-11-23         NA  38.000000  6.5467172 19.859058\n4711 chic  40.0  30.70000 1999-11-24         NA  19.000000  6.1225845 21.265942\n4712 chic  36.0  27.80000 1999-11-25         NA  30.000000  5.7222222 30.683333\n4713 chic  37.0  32.20000 1999-11-26  23.450000  29.625000  6.5694444 27.784848\n4714 chic  41.0  30.10000 1999-11-27         NA  15.000000  6.4722222 25.250000\n4715 chic  34.0  25.00000 1999-11-28         NA  11.000000  7.0138889 25.975000\n4716 chic  32.0  19.90000 1999-11-29  11.200000  17.000000  7.6527778 27.266667\n4717 chic  30.0  15.30000 1999-11-30  20.600000  25.000000  3.9516908 34.206522\n4718 chic  36.0  20.80000 1999-12-01         NA  38.000000  3.9293478 26.774333\n4719 chic  50.0  32.90000 1999-12-02  16.440000  31.142857  5.9444444 30.514286\n4720 chic  53.0  48.00000 1999-12-03  18.500000  43.000000  8.2669082 28.415308\n4721 chic  49.0  48.50000 1999-12-04         NA  39.500000  2.4166667 25.937500\n4722 chic  39.0  34.30000 1999-12-05         NA   5.500000 10.7638889 13.968750\n4723 chic  29.0  22.60000 1999-12-06         NA  16.500000  6.9583333 25.906250\n4724 chic  33.0  29.10000 1999-12-07         NA  26.000000  3.4305556 23.187500\n4725 chic  38.0  33.50000 1999-12-08  24.957143  28.285714  2.2826087 25.950758\n4726 chic  43.0  38.60000 1999-12-09         NA  44.500000  4.6944444 28.218479\n4727 chic  31.0  23.40000 1999-12-10         NA  17.500000  6.9886364 22.785038\n4728 chic  31.0  25.00000 1999-12-11  12.600000  24.000000  4.7083333 30.229167\n4729 chic  35.0  30.60000 1999-12-12  23.800000  19.500000  1.5972222 24.958333\n4730 chic  35.0  31.20000 1999-12-13         NA  38.000000  7.5809179 24.312754\n4731 chic  38.0  34.20000 1999-12-14  13.762500  15.285714 10.5507246 21.135870\n4732 chic  36.0  33.90000 1999-12-15         NA  19.000000  2.4444444 24.250000\n4733 chic  27.0  20.30000 1999-12-16         NA  18.500000  4.0477053 19.069565\n4734 chic  23.0  17.90000 1999-12-17  13.500000  17.500000  7.8907005 24.629831\n4735 chic  19.0  14.60000 1999-12-18         NA  26.500000  7.1805556 30.908333\n4736 chic  32.0  29.10000 1999-12-19         NA  32.000000  3.4027778 22.416667\n4737 chic  21.0  11.00000 1999-12-20  12.700000  24.750000 13.5664251 16.906250\n4738 chic   8.0  -1.60000 1999-12-21  12.600000  27.000000  7.9015152 28.162022\n4739 chic  13.0   5.80000 1999-12-22         NA  24.500000  4.6733092 33.725000\n4740 chic  10.0   3.80000 1999-12-23  20.800000  39.000000  6.2361111 29.600000\n4741 chic  14.0   4.70000 1999-12-24         NA  35.000000  7.1111111 31.266667\n4742 chic  19.0  14.00000 1999-12-25         NA  45.500000  7.1388889 23.741667\n4743 chic  28.0  14.30000 1999-12-26   6.728571  26.750000 20.0277778 15.566667\n4744 chic  19.0  11.60000 1999-12-27         NA  29.500000 10.8484300 27.095238\n4745 chic  21.0  16.40000 1999-12-28         NA  23.000000  8.4583333 26.041667\n4746 chic  36.0  30.20000 1999-12-29  12.800000  24.500000  3.6443237 25.538571\n4747 chic  34.0  28.90000 1999-12-30         NA  13.000000  9.7518116 25.040267\n4748 chic  34.0  25.90000 1999-12-31         NA  21.500000  5.6805556 27.500000\n4749 chic  42.0  32.20000 2000-01-01  25.700000  29.333333  4.6212121 24.069444\n4750 chic  48.0  42.30000 2000-01-02  30.600000  47.500000 16.5277778 16.312500\n4751 chic  35.0  33.70000 2000-01-03  12.450000  11.500000  9.0990338 15.114583\n4752 chic  28.0  22.20000 2000-01-04  11.550000  19.000000 11.0591787 23.801786\n4753 chic  20.0  16.60000 2000-01-05  18.600000  23.500000  4.3526570 20.349802\n4754 chic  34.0  25.30000 2000-01-06  18.400000  32.000000  3.7618577 22.088043\n4755 chic  25.0  13.30000 2000-01-07  16.800000  27.000000  7.9381313 26.100000\n4756 chic  37.0  28.50000 2000-01-08  15.500000  27.000000  6.1944444 23.766667\n4757 chic  39.0  38.50000 2000-01-09  25.700000  25.500000  1.8055556 21.241667\n4758 chic  42.0  34.90000 2000-01-10  15.185714  17.000000  7.9444444 19.732143\n4759 chic  33.0  21.50000 2000-01-11   7.800000  24.500000 11.8194444 17.765349\n4760 chic  31.0  21.70000 2000-01-12  11.300000  18.000000 11.9335749 21.394565\n4761 chic  25.0  18.40000 2000-01-13  12.100000  19.142857  8.7361111 26.708696\n4762 chic  20.0  14.50000 2000-01-14  20.450000  28.000000  3.1117150 35.158333\n4763 chic  34.0  24.20000 2000-01-15  19.650000  35.000000  3.3194444 23.841667\n4764 chic  31.0  19.40000 2000-01-16  11.675000  16.000000 20.5000000 13.783333\n4765 chic  22.0  12.70000 2000-01-17  11.700000  23.500000 17.9444444 20.066667\n4766 chic  25.0  20.90000 2000-01-18  20.100000  24.500000  4.1400966 28.315584\n4767 chic  21.0  15.70000 2000-01-19  23.050000  33.285714  3.0277778 41.322464\n4768 chic  10.0   2.10000 2000-01-20  16.000000  22.500000 12.8345411 27.923810\n4769 chic   5.0  -3.20000 2000-01-21  31.800000  46.500000  6.3926768 38.187022\n4770 chic  17.0  14.50000 2000-01-22  27.757143  31.500000  5.4305556 36.375000\n4771 chic  16.0   4.30000 2000-01-23  19.800000  27.000000 14.6388889 20.100000\n4772 chic   6.0  -0.60000 2000-01-24  25.400000  36.000000  6.1805556 36.100000\n4773 chic  17.0   8.50000 2000-01-25  15.085714  23.857143 10.5757576 28.091061\n4774 chic  15.0   5.40000 2000-01-26  10.100000  31.000000  9.1944444 31.817457\n4775 chic  20.0  11.50000 2000-01-27  16.700000  26.000000 10.8532609 35.511364\n4776 chic  21.0  14.50000 2000-01-28  30.614286  48.500000  6.1944444 47.250000\n4777 chic  24.0  19.10000 2000-01-29  17.100000  32.000000 21.3055556 22.066667\n4778 chic  28.0  23.30000 2000-01-30  32.100000  28.000000  8.8194444 30.341667\n4779 chic  20.0  14.40000 2000-01-31  32.425000  33.857143 11.6527778 32.775000\n4780 chic  25.0  16.50000 2000-02-01  21.100000  28.500000  9.4027778 33.534524\n4781 chic  21.0  16.00000 2000-02-02  31.700000  41.000000  6.5000000 37.121320\n4782 chic  33.0  26.70000 2000-02-03  25.050000  28.000000 10.1868687 29.039328\n4783 chic  25.0  19.00000 2000-02-04  15.500000  20.500000 12.2089372 30.066304\n4784 chic  21.0  16.50000 2000-02-05  19.800000  27.000000 11.4722222 28.208333\n4785 chic  23.0  21.60000 2000-02-06  34.300000  37.666667  6.3055556 33.281250\n4786 chic  26.0  23.30000 2000-02-07  25.000000  25.500000 14.3647343 30.136569\n4787 chic  22.0  21.60000 2000-02-08  30.600000  39.000000  9.8611111 42.684783\n4788 chic  41.0  30.20000 2000-02-09  37.250000  41.500000 11.5205314 29.142292\n4789 chic  35.0  32.10000 2000-02-10  40.400000  55.000000  7.8888889 30.016667\n4790 chic  24.0  13.90000 2000-02-11   8.500000  16.000000 19.4305556 24.891667\n4791 chic  24.0  14.50000 2000-02-12  20.028571  27.166667 21.3750000 26.491667\n4792 chic  30.0  26.80000 2000-02-13  26.750000  36.000000 11.8194444 21.991667\n4793 chic  26.0  22.50000 2000-02-14  13.450000  17.000000 13.1780303 30.771212\n4794 chic  31.0  28.10000 2000-02-15  26.833333  29.500000  4.9861111 31.991667\n4795 chic  28.0  19.00000 2000-02-16  15.400000  25.000000 16.4649758 28.981431\n4796 chic  27.0  18.60000 2000-02-17  25.200000  34.000000 14.3007246 30.875947\n4797 chic  30.0  27.80000 2000-02-18  14.828571  20.142857 24.0416667 17.511364\n4798 chic  29.0  21.70000 2000-02-19  21.500000  16.000000 22.3737374 23.766667\n4799 chic  27.0  19.70000 2000-02-20  26.300000  26.000000 23.0833333 28.600000\n4800 chic  35.0  29.10000 2000-02-21  24.342857  40.000000  8.3055556 37.345652\n4801 chic  49.0  40.30000 2000-02-22  21.100000  39.000000  8.3055556 32.231818\n4802 chic  59.0  40.60000 2000-02-23  26.800000  61.000000 26.4861111 31.834058\n4803 chic  49.0  49.90000 2000-02-24  19.642857  22.166667 15.2689786 26.655390\n4804 chic  55.0  50.30000 2000-02-25  17.200000  48.500000 15.3278986 25.399275\n4805 chic  56.0  51.70000 2000-02-26   9.700000  28.500000 24.6111111 15.616667\n4806 chic  45.0  30.70000 2000-02-27   4.962500  11.500000 21.8333333 13.068627\n4807 chic  43.0  26.80000 2000-02-28  18.100000  37.000000 10.5000000 36.415476\n4808 chic  54.0  34.40000 2000-02-29  12.400000  35.000000 19.9673913 28.324275\n4809 chic  46.0  32.90000 2000-03-01   9.912500  15.833333 23.5912698 18.892236\n4810 chic  33.0  23.80000 2000-03-02   7.000000  11.500000 25.7669082 19.247464\n4811 chic  35.0  24.10000 2000-03-03  11.600000  27.000000 20.0000000 31.033333\n4812 chic  46.0  30.70000 2000-03-04  19.962500  37.000000 13.0138889 33.025000\n4813 chic  52.0  36.50000 2000-03-05  25.800000  32.000000 11.8611111 31.308333\n4814 chic  51.0  32.10000 2000-03-06  23.200000  51.500000 16.6250000 40.408333\n4815 chic  66.0  49.70000 2000-03-07  21.287500  38.285714 21.7500000 30.395843\n4816 chic  67.0  50.90000 2000-03-08  21.300000  78.000000 27.4861111 24.903623\n4817 chic  46.0  32.70000 2000-03-09   7.300000  42.500000 18.1968599 13.316667\n4818 chic  30.0  21.90000 2000-03-10   8.987500  11.000000 19.2463768 18.569565\n4819 chic  30.0  19.00000 2000-03-11   5.900000   6.000000 27.4583333 14.200000\n4820 chic  34.0  19.30000 2000-03-12  17.900000  20.000000 13.4305556 31.575000\n4821 chic  39.0  33.40000 2000-03-13  30.262500  33.571429  4.1250000 32.263333\n4822 chic  45.0  32.60000 2000-03-14  26.100000  45.500000 13.9939614 25.342029\n4823 chic  50.0  41.90000 2000-03-15  29.900000  34.000000 16.5561594 25.854710\n4824 chic  33.0  22.30000 2000-03-16   5.614286   5.500000 37.4166667 11.825000\n4825 chic  32.0  18.50000 2000-03-17   7.500000  11.000000 34.5056936 15.151812\n4826 chic  34.0  20.80000 2000-03-18  15.100000  18.000000 21.2500000 20.733333\n4827 chic  39.0  34.10000 2000-03-19  21.742857  26.857143 15.0416667 16.066667\n4828 chic  49.0  46.40000 2000-03-20  17.050000  19.500000 14.2833333 21.758333\n4829 chic  47.0  45.30000 2000-03-21  28.900000  36.000000  1.8594203 25.616667\n4830 chic  51.0  44.00000 2000-03-22  34.462500  52.500000  7.1321429 35.068182\n4831 chic  50.0  43.70000 2000-03-23  39.800000  62.500000 14.9054348 36.352743\n4832 chic  57.0  49.00000 2000-03-24  25.500000  39.000000 18.0985507 29.600000\n4833 chic  53.0  32.80000 2000-03-25   6.628571  18.714286 30.4500000 15.991667\n4834 chic  52.0  31.80000 2000-03-26   7.800000  24.500000 30.5916667 22.241667\n4835 chic  47.0  31.20000 2000-03-27   7.200000  21.000000 27.8246377 18.866667\n4836 chic  39.0  31.10000 2000-03-28   8.128571  14.000000 14.9891304 25.035870\n4837 chic  40.0  29.30000 2000-03-29   9.700000  18.500000 16.5295455 23.881258\n4838 chic  40.0  31.00000 2000-03-30  15.000000  27.000000 19.7500000 27.900000\n4839 chic  45.0  28.10000 2000-03-31  27.957143  51.571429 10.0652174 50.811232\n4840 chic  52.0  33.90000 2000-04-01  22.900000  48.000000 14.0694444 37.233333\n4841 chic  51.0  42.50000 2000-04-02  40.300000  46.000000 21.6712963 25.925000\n4842 chic  52.0  34.30000 2000-04-03  26.342857  45.000000 17.7923913 27.066667\n4843 chic  38.0  19.70000 2000-04-04   7.100000  18.500000 23.7969203 24.372727\n4844 chic  44.0  23.80000 2000-04-05  14.700000  61.000000 22.3500000 30.960714\n4845 chic  53.0  27.30000 2000-04-06   8.428571  78.166667 23.8436594 21.348551\n4846 chic  41.0  32.70000 2000-04-07   9.400000  29.000000 13.8905303 23.427083\n4847 chic  34.0  23.00000 2000-04-08   8.700000  22.500000 25.8583333 22.864583\n4848 chic  45.0  26.70000 2000-04-09  12.112500  21.500000 21.6982456 22.278333\n4849 chic  37.0  28.10000 2000-04-10   9.100000  17.500000 26.9801932 16.269203\n4850 chic  34.0  33.10000 2000-04-11  12.100000  12.000000 20.9599436 22.373485\n4851 chic  39.0  25.30000 2000-04-12  18.037500  28.571429 19.8152174 29.512681\n4852 chic  49.0  28.30000 2000-04-13  19.400000  39.000000 21.0615942 33.241667\n4853 chic  58.0  42.80000 2000-04-14  21.000000  72.000000 23.7765152 28.108333\n4854 chic  56.0  46.90000 2000-04-15  23.462500  46.000000 23.3560606 15.575000\n4855 chic  44.0  40.90000 2000-04-16  14.800000  20.000000 17.7977602 15.739583\n4856 chic  41.0  38.90000 2000-04-17  16.400000  14.500000 14.6953463 17.045952\n4857 chic  48.0  42.50000 2000-04-18  29.385714  35.285714  7.8055456 28.605789\n4858 chic  52.0  48.80000 2000-04-19  46.700000  45.500000  8.8286621 25.882251\n4859 chic  53.0  50.20000 2000-04-20  25.250000  27.000000 12.6097886 22.566667\n4860 chic  44.0  35.00000 2000-04-21   7.571429   8.000000 28.3438735 18.891667\n4861 chic  48.0  31.40000 2000-04-22  17.750000  24.500000 20.0331522 37.358333\n4862 chic  47.0  40.30000 2000-04-23  13.000000  20.500000 31.5500000 21.491667\n4863 chic  52.0  32.60000 2000-04-24   9.266667  18.714286 32.9659420 20.716304\n4864 chic  49.0  23.40000 2000-04-25  13.000000  13.000000 34.9130884 21.025000\n4865 chic  52.0  24.20000 2000-04-26  12.250000  24.500000 26.4833427 34.115217\n4866 chic  53.0  26.30000 2000-04-27  17.628571  60.000000 23.0046113 43.864583\n4867 chic  54.0  32.20000 2000-04-28  14.900000  52.500000 28.8450413 34.650000\n4868 chic  48.0  39.10000 2000-04-29   5.400000  10.500000 22.2234848 11.191667\n4869 chic  54.0  40.00000 2000-04-30  14.662500  35.333333 23.0151515 29.558333\n4870 chic  57.0  49.20000 2000-05-01  24.700000  45.000000 21.1313930 39.181187\n4871 chic  57.0  43.10000 2000-05-02  12.400000  36.000000 25.7184393 30.612456\n4872 chic  63.0  48.60000 2000-05-03  17.325000  45.500000 30.8350252 34.719368\n4873 chic  72.0  58.10000 2000-05-04  12.600000  62.500000 31.4991765 23.238095\n4874 chic  74.0  59.30000 2000-05-05  18.600000  65.000000 33.8415679 24.069444\n4875 chic  74.0  61.30000 2000-05-06  13.487500  38.285714 32.0166667 15.944444\n4876 chic  71.0  65.00000 2000-05-07  14.650000  29.500000 25.2875000 15.850198\n4877 chic  76.0  67.50000 2000-05-08  23.000000  85.000000 24.9407115 16.354641\n4878 chic  59.0  55.00000 2000-05-09   8.657143  15.500000 20.7728920 16.652778\n4879 chic  55.0  45.00000 2000-05-10   8.000000  21.500000 20.4873188 23.307065\n4880 chic  67.0  59.90000 2000-05-11  22.500000  43.500000 19.2763851 28.437239\n4881 chic  73.0  66.80000 2000-05-12  25.725000  38.000000 22.8211462 21.051630\n4882 chic  53.0  38.40000 2000-05-13   5.000000  31.500000 24.5378788 13.375000\n4883 chic  52.0  33.00000 2000-05-14   7.200000  20.000000 32.1022727 18.972222\n4884 chic  57.0  35.00000 2000-05-15  11.475000  37.000000 18.5075758 37.446970\n4885 chic  61.0  49.60000 2000-05-16  22.100000  41.000000 19.0441777 32.107955\n4886 chic  61.0  56.50000 2000-05-17  40.300000  48.000000 14.4518805 29.492797\n4887 chic  58.0  51.80000 2000-05-18  15.050000  24.857143 27.8990448 17.958333\n4888 chic  46.0  40.30000 2000-05-19   5.600000   5.500000 25.2396245 14.034722\n4889 chic  55.0  37.80000 2000-05-20   9.700000  16.500000 23.3185262 22.016414\n4890 chic  57.0  48.60000 2000-05-21  17.814286  29.500000 26.5946970 24.744318\n4891 chic  67.0  56.40000 2000-05-22  15.700000  51.500000 19.0360672 32.516908\n4892 chic  69.0  52.00000 2000-05-23   9.900000  42.000000 24.7363307 29.841994\n4893 chic  68.0  42.20000 2000-05-24  11.012500  59.142857 33.9851779 26.201691\n4894 chic  64.0  36.50000 2000-05-25   9.100000  56.500000 29.2757067 26.544643\n4895 chic  61.0  48.50000 2000-05-26  18.400000  58.500000 17.3155468 38.584088\n4896 chic  60.0  55.90000 2000-05-27  26.612500  31.500000 32.3257576 13.618056\n4897 chic  55.0  52.00000 2000-05-28  13.500000  10.500000 25.3901515 11.525000\n4898 chic  56.0  47.40000 2000-05-29   7.000000   9.500000 25.8636364 14.250000\n4899 chic  65.0  61.40000 2000-05-30  22.828571  32.714286 26.4211433 29.211477\n4900 chic  67.0  64.80000 2000-05-31  28.000000  46.500000 13.8697299 28.504371\n4901 chic  73.0  65.50000 2000-06-01  22.800000  49.000000 33.4529028 23.623446\n4902 chic  60.0  52.80000 2000-06-02  10.025000  22.000000 25.8739669 17.965278\n4903 chic  55.0  44.90000 2000-06-03   2.800000  12.000000 29.4507576 13.118056\n4904 chic  56.0  50.60000 2000-06-04  12.800000  20.000000 28.0311265 14.449275\n4905 chic  54.0  47.00000 2000-06-05   9.575000  15.142857 30.6409151 13.004960\n4906 chic  60.0  41.80000 2000-06-06   8.700000  36.000000 20.4231345 28.655236\n4907 chic  64.0  46.80000 2000-06-07  13.250000  65.500000 33.5615119 30.248024\n4908 chic  78.0  59.80000 2000-06-08  17.228571  55.000000 50.6192358 24.581349\n4909 chic  77.0  57.50000 2000-06-09  18.300000  76.000000 55.7610343 24.190476\n4910 chic  80.0  67.00000 2000-06-10  15.900000  82.500000 32.0492424 16.166667\n4911 chic  70.0  66.80000 2000-06-11  10.671429  21.142857 16.0227273 10.575000\n4912 chic  57.0  56.00000 2000-06-12   9.200000  11.500000  8.5941558 10.517532\n4913 chic  69.0  63.80000 2000-06-13  13.700000  29.000000 12.9690382 24.729296\n4914 chic  72.0  64.60000 2000-06-14  10.642857  33.000000 27.5567358 22.674107\n4915 chic  70.0  58.80000 2000-06-15   9.300000  21.000000 26.6968948 16.791667\n4916 chic  67.0  60.30000 2000-06-16   8.500000  22.500000 23.0317852 17.958031\n4917 chic  60.0  45.30000 2000-06-17   4.200000  11.833333 25.7594697 11.506944\n4918 chic  65.0  46.90000 2000-06-18   6.000000  11.500000 29.3939394 15.625000\n4919 chic  66.0  57.00000 2000-06-19  15.900000  40.500000 30.6439394 25.998106\n4920 chic  74.0  68.60000 2000-06-20  16.262500  31.500000 21.4263085 19.654167\n4921 chic  74.0  58.00000 2000-06-21   6.500000  16.500000 26.4754312 15.430089\n4922 chic  72.0  56.20000 2000-06-22   7.200000  23.000000 28.5978261 16.611111\n4923 chic  71.0  61.70000 2000-06-23  14.228571  27.666667 24.2180501 30.096907\n4924 chic  71.0  67.50000 2000-06-24   9.400000  23.500000 22.7613636 17.361111\n4925 chic  75.0  65.10000 2000-06-25  16.450000  25.500000 29.9223485 20.555556\n4926 chic  72.0  63.90000 2000-06-26   9.925000  19.000000 22.3811983 22.157738\n4927 chic  68.0  52.60000 2000-06-27   8.700000  20.500000 19.6862648 22.496032\n4928 chic  62.0  57.00000 2000-06-28  11.400000  30.000000 10.0169631 29.578299\n4929 chic  66.0  52.30000 2000-06-29  10.262500  22.250000 20.1049901 22.932971\n4930 chic  66.0  54.70000 2000-06-30  14.300000  28.000000 20.9635585 29.555556\n4931 chic  71.0  61.20000 2000-07-01  18.200000  27.000000 34.7453887 20.003321\n4932 chic  74.0  70.00000 2000-07-02  24.257143  32.000000 35.7113801 13.888889\n4933 chic  68.0  64.70000 2000-07-03  11.900000  15.000000 21.2736331 13.583333\n4934 chic  70.0  64.50000 2000-07-04  15.900000  22.000000 27.2803030 11.965278\n4935 chic  76.0  65.00000 2000-07-05  18.750000  31.250000 40.7925725 16.224418\n4936 chic  74.0  64.20000 2000-07-06  16.900000  26.500000 38.0099413 15.646465\n4937 chic  70.0  58.00000 2000-07-07   7.600000  22.000000 24.5747694 13.753386\n4938 chic  73.0  64.00000 2000-07-08  17.525000  38.000000 34.3446970 18.763889\n4939 chic  81.0  70.70000 2000-07-09  25.500000  46.500000 37.2045455 12.923611\n4940 chic  73.0  68.30000 2000-07-10  10.600000  20.500000 29.3157197 20.948919\n4941 chic  69.0  64.00000 2000-07-11  13.712500  25.166667 32.6178442 11.827652\n4942 chic  72.0  58.10000 2000-07-12  14.200000  25.500000 36.7943841 17.683333\n4943 chic  75.0  64.50000 2000-07-13  18.100000  36.500000 33.1995224 25.795455\n4944 chic  77.0  63.40000 2000-07-14  11.514286  23.000000 32.6572793 18.292659\n4945 chic  73.0  60.10000 2000-07-15   9.900000  16.000000 26.8712121 11.902778\n4946 chic  73.0  57.70000 2000-07-16  14.400000  21.500000 22.6856061 19.312500\n4947 chic  77.0  63.40000 2000-07-17  12.900000  29.285714 23.8148880 22.924874\n4948 chic  66.0  54.30000 2000-07-18   4.800000  17.000000 21.2627635  7.064513\n4949 chic  63.0  53.90000 2000-07-19   5.350000  11.500000 19.4132830 11.021122\n4950 chic  67.0  56.30000 2000-07-20  10.250000  36.000000 17.3878309 22.229167\n4951 chic  67.0  51.10000 2000-07-21   9.100000  19.500000 16.5859919 20.159852\n4952 chic  63.0  53.90000 2000-07-22   6.900000  16.500000 17.1553030 13.593750\n4953 chic  63.0  49.70000 2000-07-23   5.757143  13.714286 17.5946970 11.545139\n4954 chic  66.0  53.60000 2000-07-24  12.100000  24.000000 29.7289196 17.416667\n4955 chic  69.0  56.70000 2000-07-25  17.900000  37.000000 30.7792325 30.227506\n4956 chic  73.0  60.80000 2000-07-26  26.262500  62.000000 35.8824934 29.769066\n4957 chic  77.0  65.80000 2000-07-27  33.000000  59.000000 32.0309618 32.364899\n4958 chic  74.0  65.50000 2000-07-28  20.150000  30.000000 32.2343469 24.692331\n4959 chic  73.0  65.90000 2000-07-29  19.962500  27.285714 48.2083333 10.170139\n4960 chic  71.0  67.10000 2000-07-30  25.300000  20.500000 35.3130764 11.026872\n4961 chic  70.0  66.20000 2000-07-31  17.500000  24.500000 17.7862768 24.437500\n4962 chic  73.0  67.20000 2000-08-01  15.771429  31.500000 18.0361271 26.372998\n4963 chic  76.0  64.60000 2000-08-02  12.300000  34.000000 26.0803689 15.899256\n4964 chic  63.0  54.50000 2000-08-03   3.100000   5.500000 27.6556324  9.829861\n4965 chic  67.0  53.80000 2000-08-04  11.014286  27.200000 22.7420949 25.184028\n4966 chic  67.0  61.30000 2000-08-05  17.700000  33.500000 23.5359848 25.156250\n4967 chic  78.0  70.60000 2000-08-06  22.900000  32.000000 30.5073052 15.062500\n4968 chic  76.0  66.50000 2000-08-07  13.412500  22.000000 18.4277726 20.679473\n4969 chic  77.0  69.40000 2000-08-08  10.300000  30.000000 20.7565876 21.790261\n4970 chic  79.0  67.00000 2000-08-09  13.100000  38.500000 25.8103875 19.152146\n4971 chic  74.0  62.30000 2000-08-10  13.112500  26.200000 22.8556489 22.298611\n4972 chic  71.0  60.80000 2000-08-11  11.800000  23.500000 17.5833333 20.024206\n4973 chic  71.0  61.00000 2000-08-12  12.600000  25.500000 23.5056818 22.270833\n4974 chic  74.0  62.50000 2000-08-13  13.562500  23.000000 25.9375000 22.104167\n4975 chic  76.0  67.90000 2000-08-14  28.400000  50.000000 30.8886094 25.590593\n4976 chic  82.0  68.80000 2000-08-15  29.000000  53.500000 38.9682302 21.005051\n4977 chic  70.0  54.90000 2000-08-16   6.012500  17.500000 21.2249671 12.202446\n4978 chic  68.0  62.30000 2000-08-17  13.600000  22.000000 21.5627117 19.489773\n4979 chic  67.0  59.50000 2000-08-18   8.300000  12.500000 22.8465460 14.868056\n4980 chic  64.0  56.00000 2000-08-19   9.487500  19.500000 17.3958333 12.795139\n4981 chic  65.0  54.00000 2000-08-20   8.700000  11.500000 27.8371212 12.979167\n4982 chic  67.0  56.30000 2000-08-21  19.100000  27.500000 29.0049407 23.159722\n4983 chic  76.0  67.60000 2000-08-22  29.825000  41.166667 28.7535408 26.785722\n4984 chic  76.0  69.00000 2000-08-23  27.600000  46.500000 28.4123024 24.118056\n4985 chic  71.0  58.50000 2000-08-24  20.600000  29.500000 25.2206701 21.807672\n4986 chic  70.0  59.00000 2000-08-25  24.937500  53.500000 23.8659420 36.174819\n4987 chic  73.0  64.60000 2000-08-26  33.100000  48.000000 29.8768939 23.864583\n4988 chic  72.0  64.30000 2000-08-27  15.500000  18.500000 41.7935606  7.295592\n4989 chic  75.0  64.20000 2000-08-28  23.687500  37.285714 31.2518939 20.611111\n4990 chic  77.0  68.70000 2000-08-29  33.700000  44.500000 28.3520257 18.816919\n4991 chic  77.0  70.60000 2000-08-30  41.700000  59.000000 29.6788538 19.302989\n4992 chic  80.0  68.20000 2000-08-31  34.650000  56.500000 35.4707729 30.799094\n4993 chic  80.0  69.00000 2000-09-01  31.300000  57.500000 40.8192758 32.700000\n4994 chic  79.0  67.30000 2000-09-02  15.600000  31.500000 37.3865741 20.308333\n4995 chic  77.0  66.80000 2000-09-03  18.771429  33.714286 36.2824074 16.920833\n4996 chic  66.0  55.10000 2000-09-04   4.900000   9.000000 24.4097222  6.158333\n4997 chic  63.0  45.20000 2000-09-05   3.900000  12.500000 29.8736550 10.993401\n4998 chic  61.0  48.40000 2000-09-06  13.562500  30.500000 24.7773551 24.058020\n4999 chic  74.0  60.50000 2000-09-07  20.400000  48.000000 26.0270833 29.435833\n5000 chic  75.0  66.80000 2000-09-08  20.200000  42.000000 14.9514493 29.669192\n5001 chic  76.0  67.40000 2000-09-09  17.750000  26.714286 18.2395833 17.687500\n5002 chic  78.0  70.50000 2000-09-10  13.400000  20.000000 13.8291667 13.572917\n5003 chic  75.0  67.90000 2000-09-11  15.550000  37.000000 20.0946558 19.396149\n5004 chic  63.0  52.90000 2000-09-12   7.642857  16.500000 17.4166667 20.193015\n5005 chic  63.0  49.70000 2000-09-13  13.700000  41.500000 11.5561594 35.018763\n5006 chic  65.0  52.50000 2000-09-14   8.750000  23.500000 18.6069664 27.326389\n5007 chic  56.0  40.10000 2000-09-15   5.250000  13.142857 12.6590909 19.977808\n5008 chic  56.0  41.00000 2000-09-16   6.900000  14.500000 13.8200758 23.791667\n5009 chic  68.0  47.70000 2000-09-17  10.900000  25.000000 27.9453228 22.972222\n5010 chic  69.0  53.20000 2000-09-18  18.071429  57.000000 23.7109684 41.397947\n5011 chic  75.0  51.10000 2000-09-19  17.400000  69.500000 39.6236525 30.532828\n5012 chic  58.0  53.00000 2000-09-20  10.900000  21.500000  9.2270257 23.494565\n5013 chic  54.0  40.50000 2000-09-21   6.312500  17.000000 14.8480207 18.939141\n5014 chic  58.0  51.30000 2000-09-22  15.000000  27.000000  7.4078557 26.136926\n5015 chic  63.0  58.20000 2000-09-23  13.100000  13.500000 12.3593544 16.839976\n5016 chic  53.0  46.20000 2000-09-24   3.875000   4.500000 22.5075758  8.208333\n5017 chic  49.0  40.20000 2000-09-25   6.600000   7.000000 17.2075099 15.488519\n5018 chic  56.0  41.20000 2000-09-26  12.300000  28.500000 10.1703647 31.640783\n5019 chic  59.0  46.60000 2000-09-27   9.925000  22.000000 15.3781291 21.724638\n5020 chic  55.0  41.10000 2000-09-28   8.800000  16.000000 15.2486974 17.535326\n5021 chic  61.0  42.10000 2000-09-29  11.600000  37.500000 10.2178524 28.962912\n5022 chic  65.0  48.10000 2000-09-30  16.150000  47.500000 24.0000000 22.920000\n5023 chic  72.0  50.70000 2000-10-01  21.500000  65.000000 47.0927536 15.038043\n5024 chic  69.0  53.80000 2000-10-02  17.100000  46.000000 29.1939394 23.296970\n5025 chic  59.0  49.70000 2000-10-03  14.237500  30.000000 14.3790184 20.650099\n5026 chic  57.0  47.10000 2000-10-04   4.800000  10.000000 27.5807971 12.107971\n5027 chic  52.0  48.20000 2000-10-05   8.100000  13.500000 16.8499094 18.210178\n5028 chic  41.0  29.40000 2000-10-06   8.387500  14.500000 14.4154397 19.394928\n5029 chic  40.0  26.70000 2000-10-07   5.300000  13.000000 10.8460145 15.850000\n5030 chic  39.0  26.60000 2000-10-08   4.600000   8.000000 12.4270833 16.370175\n5031 chic  44.0  25.90000 2000-10-09  10.366667  18.285714  7.8063406 29.331522\n5032 chic  49.0  27.00000 2000-10-10  17.400000  33.500000  7.6597003 31.539530\n5033 chic  53.0  30.20000 2000-10-11  16.000000  52.500000  8.7750000 39.419048\n5034 chic  58.0  36.30000 2000-10-12  16.100000  79.000000 20.0672678 39.757955\n5035 chic  66.0  39.60000 2000-10-13  17.900000  81.000000 29.0133152 32.541667\n5036 chic  67.0  49.30000 2000-10-14  19.400000  54.500000 24.9229167 31.041667\n5037 chic  55.0  47.60000 2000-10-15  11.428571  19.571429 17.0520833 17.529167\n5038 chic  51.0  46.60000 2000-10-16  14.800000  27.000000 15.5695652 19.805797\n5039 chic  52.0  45.50000 2000-10-17  19.700000  28.500000 10.0142045 26.255952\n5040 chic  54.0  45.70000 2000-10-18  23.828571  57.500000  9.2684783 37.993182\n5041 chic  62.0  47.30000 2000-10-19  14.450000  45.500000 12.8011117 35.744746\n5042 chic  66.0  49.10000 2000-10-20  18.200000  57.000000 22.8370965 35.103571\n5043 chic  58.0  50.30000 2000-10-21  19.771429  39.000000 20.6562500 22.891667\n5044 chic  59.0  51.80000 2000-10-22  26.050000  35.000000 11.6414855 24.282609\n5045 chic  65.0  60.50000 2000-10-23  39.800000  55.500000  3.1515152 37.191667\n5046 chic  63.0  60.30000 2000-10-24  34.185714  31.500000 10.1743659 22.916667\n5047 chic  62.0  57.90000 2000-10-25  26.400000  33.000000 11.7938406 23.860079\n5048 chic  68.0  58.30000 2000-10-26  41.400000  65.500000 18.0453804 32.055435\n5049 chic  61.0  53.40000 2000-10-27  21.214286  29.714286 15.2509058 19.826316\n5050 chic  50.0  41.40000 2000-10-28   4.000000   8.500000 23.3437500 10.283333\n5051 chic  46.0  36.80000 2000-10-29  10.900000  23.500000 16.3750000 17.029167\n5052 chic  50.0  32.70000 2000-10-30  12.414286  24.000000 11.0664855 28.008333\n5053 chic  59.0  37.60000 2000-10-31  13.850000  36.500000  5.4569746 30.641667\n5054 chic  63.0  44.60000 2000-11-01  18.950000  38.500000  7.8472222 32.234649\n5055 chic  55.0  48.60000 2000-11-02  20.542857  31.666667  5.6805556 26.637681\n5056 chic  48.0  34.80000 2000-11-03   9.350000  30.000000  7.4414251 25.871344\n5057 chic  46.0  31.40000 2000-11-04  11.250000  28.500000  6.7192029 28.349638\n5058 chic  46.0  31.00000 2000-11-05  12.071429  26.000000 14.3080808 24.694474\n5059 chic  49.0  38.00000 2000-11-06  15.650000  30.000000 18.6129227 19.182292\n5060 chic  49.0  41.90000 2000-11-07  12.250000  13.500000  4.8617150 16.009923\n5061 chic  40.0  31.50000 2000-11-08  10.100000  17.714286  3.0060386 21.739583\n5062 chic  39.0  37.00000 2000-11-09   8.300000  10.500000  4.8562802 17.025136\n5063 chic  37.0  31.60000 2000-11-10  17.050000  17.500000  3.5694444 19.750000\n5064 chic  38.0  32.10000 2000-11-11  18.625000  22.000000  4.9305556 21.989583\n5065 chic  45.0  37.30000 2000-11-12  16.500000  14.500000  5.7361111 17.578125\n5066 chic  36.0  29.70000 2000-11-13         NA  16.000000  3.8333333 17.031250\n5067 chic  32.0  26.40000 2000-11-14  10.866667  13.571429  7.0000000 16.305871\n5068 chic  31.0  23.60000 2000-11-15         NA  26.500000  7.5416667 24.258929\n5069 chic  36.0  29.20000 2000-11-16  14.850000  26.500000  4.9045894 18.327989\n5070 chic  30.0  20.80000 2000-11-17  13.114286  15.000000  8.3490338 19.902627\n5071 chic  27.0  18.30000 2000-11-18  15.500000  27.000000 12.2222222 15.948822\n5072 chic  30.0  22.00000 2000-11-19  10.900000  17.500000 11.2083333 16.791667\n5073 chic  24.0  17.90000 2000-11-20  10.025000  20.428571 10.2159091 16.132102\n5074 chic  19.0   8.00000 2000-11-21  11.000000  24.000000 10.7222222 25.378968\n5075 chic  22.0  11.00000 2000-11-22  24.700000  30.000000  4.7916667 32.479167\n5076 chic  29.0  17.00000 2000-11-23  26.600000  33.000000  4.2916667 34.218750\n5077 chic  32.0  19.20000 2000-11-24  28.200000  34.000000  3.7886473 33.384058\n5078 chic  38.0  32.60000 2000-11-25  17.750000  28.000000  7.3750000 24.786458\n5079 chic  39.0  36.60000 2000-11-26  20.014286  23.285714  1.0416667 19.010417\n5080 chic  34.0  30.50000 2000-11-27  41.700000  40.500000  1.1388889 19.360054\n5081 chic  34.0  29.70000 2000-11-28  20.450000  28.500000  2.6944444 23.166667\n5082 chic  35.0  33.10000 2000-11-29  19.362500  21.000000  1.3194444 22.303977\n5083 chic  34.0  30.70000 2000-11-30  16.750000  16.500000  4.8712121 23.851223\n5084 chic  34.0  24.80000 2000-12-01   3.950000   7.000000 21.1666667 17.866667\n5085 chic  31.0  21.60000 2000-12-02   3.914286   6.428571 27.7083333 15.525000\n5086 chic  28.0  19.30000 2000-12-03  13.200000  16.000000  6.1388889 31.409848\n5087 chic  32.0  24.00000 2000-12-04  18.050000  30.500000  6.1250000 21.114394\n5088 chic  21.0   2.80000 2000-12-05   7.360000  18.000000 13.2071256 22.971739\n5089 chic  15.0   8.00000 2000-12-06  18.100000  23.000000  4.8333333 25.436472\n5090 chic  25.0  23.50000 2000-12-07  27.600000  26.500000  1.7741546 25.321212\n5091 chic  18.0  11.80000 2000-12-08  20.262500  30.000000  7.0694444 27.616667\n5092 chic  16.0  13.10000 2000-12-09  26.500000  37.500000  3.1944444 35.258333\n5093 chic  30.0  24.80000 2000-12-10  24.450000  27.000000  2.4444444 23.125000\n5094 chic  23.0  21.20000 2000-12-11   7.860000  14.000000 15.5694444 18.483333\n5095 chic   4.0   0.30000 2000-12-12  25.100000  28.000000  8.2361111 32.116667\n5096 chic   8.0   7.90000 2000-12-13  23.400000  37.000000  3.9335749 34.745244\n5097 chic  17.0  17.10000 2000-12-14  29.575000  33.571429  2.6527778 41.783333\n5098 chic  17.0  17.40000 2000-12-15  39.650000  39.000000  1.4631643 35.468841\n5099 chic  25.0  27.00000 2000-12-16  20.550000  16.500000  1.2083333 26.041667\n5100 chic   8.0   0.60000 2000-12-17  12.957143  18.500000 13.4166667 16.116667\n5101 chic   8.0   3.50000 2000-12-18  24.750000  27.500000  3.6041667 33.525000\n5102 chic  14.0   9.20000 2000-12-19  14.150000  25.500000  6.7916667 35.133136\n5103 chic   6.0   4.70000 2000-12-20  24.157143  38.571429  3.1657609 39.008772\n5104 chic   6.0   0.10000 2000-12-21  19.300000  35.000000 10.9239130 24.349130\n5105 chic  -1.0  -7.10000 2000-12-22  16.700000  24.500000  7.7916667 30.888043\n5106 chic   8.0   5.10000 2000-12-23  23.233333  33.000000  4.6041667 35.160870\n5107 chic   5.0  -1.40000 2000-12-24  21.700000  35.500000  8.9791667 31.766667\n5108 chic   5.0  -1.70000 2000-12-25  18.250000  40.500000  4.5000000 41.800000\n5109 chic  11.0   9.20000 2000-12-26  20.100000  25.833333  6.9375000 36.850000\n5110 chic  12.0   7.60000 2000-12-27  27.250000  38.000000  5.0833333 33.022464\n5111 chic  13.0   9.00000 2000-12-28  21.550000  31.500000  7.2708333 36.125774\n5112 chic  21.0  16.90000 2000-12-29  17.366667  23.000000 11.7083333 33.303788\n5113 chic  27.0  23.00000 2000-12-30   6.200000   8.500000 17.1458333 23.916667\n5114 chic  16.0  16.30000 2000-12-31  14.450000  10.500000 12.8541667 30.041667\n5115 chic  15.0   9.90000 2001-01-01  18.633333  28.200000  7.2708333 37.041667\n5116 chic  12.0   6.10000 2001-01-02  27.100000  26.000000  4.9753788 43.004464\n5117 chic  18.0  18.30000 2001-01-03  27.200000  30.000000  5.9166667 31.812500\n5118 chic  25.0  21.30000 2001-01-04  25.000000  25.000000  7.6250000 30.750000\n5119 chic  29.0  23.70000 2001-01-05  11.050000  24.000000  9.2780797 31.328598\n5120 chic  25.0  19.40000 2001-01-06  18.400000  22.000000  6.0000000 33.239583\n5121 chic  28.0  22.80000 2001-01-07  15.766667  21.800000  8.6250000 27.750000\n5122 chic  19.0  13.00000 2001-01-08   7.500000  17.000000  7.9791667 34.479167\n5123 chic  17.0  11.40000 2001-01-09  26.000000         NA  7.6041667 36.062500\n5124 chic  26.0  19.10000 2001-01-10  26.650000  31.000000  4.7500000 35.721591\n5125 chic  29.0  23.70000 2001-01-11  37.450000  36.000000  2.1974638 42.041990\n5126 chic  30.0  29.30000 2001-01-12  41.100000  35.000000  1.8623188 40.528533\n5127 chic  34.0  31.60000 2001-01-13  30.300000  31.833333  4.5833333 27.635417\n5128 chic  34.0  33.90000 2001-01-14  28.000000  22.000000  0.5000000 26.187500\n5129 chic  33.0  31.40000 2001-01-15  19.200000  13.500000  1.5833333 17.510417\n5130 chic  29.0  25.00000 2001-01-16  23.580000  15.000000  4.2500000 23.964583\n5131 chic  23.0  19.30000 2001-01-17  27.400000  30.000000  4.4375000 30.495536\n5132 chic  25.0  20.60000 2001-01-18  34.700000  43.000000  4.3822464 31.302989\n5133 chic  22.0  17.80000 2001-01-19  18.137500  26.000000  8.0461957 27.968750\n5134 chic  18.0   9.90000 2001-01-20  12.650000  20.000000 10.6250000 29.437500\n5135 chic  17.0  10.50000 2001-01-21  30.600000  34.000000  5.1458333 30.906250\n5136 chic  18.0  14.60000 2001-01-22  49.471429  68.000000  3.1250000 43.677083\n5137 chic  28.0  22.70000 2001-01-23  45.700000  45.000000  3.1875000 36.792045\n5138 chic  22.0  16.60000 2001-01-24  19.100000  31.000000  8.1534091 33.667861\n5139 chic  19.0  11.00000 2001-01-25  16.500000  28.500000  7.1585145 34.682018\n5140 chic  26.0  21.70000 2001-01-26  24.000000  34.000000  4.6250000 28.770833\n5141 chic  21.0  12.50000 2001-01-27  11.950000  14.500000 19.0625000 21.781250\n5142 chic  22.0  15.20000 2001-01-28  23.457143  29.000000  7.4583333 30.614583\n5143 chic  36.0  33.00000 2001-01-29  26.800000  31.000000  4.8522727 29.042749\n5144 chic  36.0  33.60000 2001-01-30  17.150000  11.000000  6.2500000 34.385417\n5145 chic  31.0  29.00000 2001-01-31  24.066667  24.333333  4.9990942 26.037879\n5146 chic  18.0  15.30000 2001-02-01  21.700000  29.000000 10.6458333 28.483734\n5147 chic   5.0  -1.70000 2001-02-02  22.000000  32.500000 10.4791667 25.065217\n5148 chic  20.0  16.40000 2001-02-03  17.175000  25.500000  5.0833333 23.812500\n5149 chic  30.0  29.00000 2001-02-04  26.750000  18.000000  4.5833333 28.604167\n5150 chic  29.0  24.40000 2001-02-05  32.950000  35.000000  5.4565217 28.088068\n5151 chic  28.0  25.30000 2001-02-06  30.171429  36.500000  5.8632246 33.991667\n5152 chic  26.0  24.70000 2001-02-07  47.500000  34.000000  4.7291667 38.598755\n5153 chic  44.0  42.20000 2001-02-08  39.500000  44.500000  5.1875000 35.259058\n5154 chic  37.0  35.90000 2001-02-09  12.740000  22.500000 14.8750000 23.890399\n5155 chic  16.0   7.20000 2001-02-10  10.450000  16.500000 15.8639706 25.057971\n5156 chic  19.0  12.40000 2001-02-11  12.850000  19.000000 14.0744048 23.751894\n5157 chic  29.0  23.20000 2001-02-12  22.537500  29.000000  6.1458333 26.697917\n5158 chic  35.0  29.70000 2001-02-13  37.300000  34.000000  7.1739130 29.547917\n5159 chic  33.0  31.10000 2001-02-14  22.800000  18.500000 10.1875000 22.182871\n5160 chic  29.0  23.90000 2001-02-15  15.071429  12.000000 23.8541667 18.559330\n5161 chic  23.0  17.30000 2001-02-16  20.350000  23.000000 16.5625000 28.982337\n5162 chic  13.0   0.30000 2001-02-17  10.100000  11.000000 16.9791667 19.646286\n5163 chic  18.0   6.10000 2001-02-18   9.475000  16.400000 17.5000000 18.875000\n5164 chic  35.0  26.20000 2001-02-19  22.800000  64.000000 10.5000000 22.819293\n5165 chic  27.0  17.10000 2001-02-20  28.650000  30.000000 18.7500000 30.501488\n5166 chic  15.0  -0.90000 2001-02-21   8.537500  16.000000 23.1956522 20.681612\n5167 chic  23.0  18.60000 2001-02-22  20.300000  21.500000 13.4166667 23.718750\n5168 chic  24.0  14.80000 2001-02-23  18.100000  23.500000 25.4166667 24.235548\n5169 chic  43.0  35.70000 2001-02-24  28.675000  31.500000  9.5625000 21.093750\n5170 chic  42.0  29.10000 2001-02-25  10.000000  12.000000 25.2708333 11.614583\n5171 chic  31.0  22.00000 2001-02-26  22.100000  21.000000 18.7282609 28.454257\n5172 chic  23.0   8.20000 2001-02-27   9.983333  11.000000 19.5587121 24.554924\n5173 chic  20.0   2.00000 2001-02-28   6.800000  18.000000 15.2826087 26.479167\n5174 chic  31.0  15.50000 2001-03-01   7.200000  27.000000 14.8750000 25.769886\n5175 chic  35.0  29.00000 2001-03-02  30.057143  35.000000  7.5208333 30.250000\n5176 chic  36.0  25.10000 2001-03-03  47.400000  49.500000  6.1875000 48.718750\n5177 chic  30.0  21.00000 2001-03-04  11.300000  14.500000 23.0000000 20.653986\n5178 chic  23.0  11.60000 2001-03-05   7.371429  22.500000 19.3541667 20.297348\n5179 chic  28.0  17.10000 2001-03-06   5.700000  20.000000 15.5190217 28.538496\n5180 chic  33.0  19.20000 2001-03-07  15.300000  31.000000 17.2916667 28.930556\n5181 chic  31.0  21.70000 2001-03-08  16.557143  25.000000 22.2946429 27.116186\n5182 chic  31.0  18.00000 2001-03-09  10.200000  19.500000 13.6250000 32.747283\n5183 chic  34.0  25.00000 2001-03-10  22.950000  45.500000 16.8333333 33.177083\n5184 chic  33.0  23.50000 2001-03-11  10.728571   9.000000 29.1250000 14.010417\n5185 chic  40.0  34.20000 2001-03-12  24.700000  31.500000 10.3541667 25.345644\n5186 chic  37.0  29.70000 2001-03-13  24.300000  18.500000 22.8958333 21.287879\n5187 chic  38.0  32.90000 2001-03-14  15.000000  20.000000 14.3913043 32.673913\n5188 chic  39.0  35.70000 2001-03-15  20.050000  17.000000 20.2361111 21.229167\n5189 chic  32.0  30.00000 2001-03-16  14.600000   7.000000 33.2777778 16.854167\n5190 chic  32.0  24.50000 2001-03-17   7.540000   6.000000 30.3055556 21.721920\n5191 chic  32.0  21.50000 2001-03-18  11.500000  16.500000 25.0833333 30.895833\n5192 chic  36.0  23.10000 2001-03-19  16.150000  23.000000 24.9255051 35.270833\n5193 chic  38.0  25.20000 2001-03-20  15.950000  28.833333 27.9716184 32.845562\n5194 chic  41.0  26.60000 2001-03-21  22.900000  34.500000 25.9957729 36.215774\n5195 chic  42.0  33.40000 2001-03-22  36.050000  39.000000 18.1527778 41.739912\n5196 chic  42.0  30.70000 2001-03-23  27.200000  32.500000 21.2777778 26.677083\n5197 chic  29.0  12.60000 2001-03-24  11.650000  20.500000 28.5277778 15.187500\n5198 chic  22.0   7.80000 2001-03-25   8.200000  24.000000 20.8472222 14.020833\n5199 chic  25.0  11.10000 2001-03-26  10.025000  16.333333 14.7916667 22.678744\n5200 chic  32.0  18.80000 2001-03-27  14.300000  20.500000 16.7204106 31.552083\n5201 chic  36.0  22.20000 2001-03-28  25.200000  45.000000 19.3544686 35.208333\n5202 chic  41.0  32.10000 2001-03-29  34.575000  37.000000 21.3736825 30.944444\n5203 chic  42.0  31.90000 2001-03-30  40.300000  49.000000 26.5694444 28.305556\n5204 chic  46.0  34.90000 2001-03-31  38.400000  44.500000 21.6111111 25.944444\n5205 chic  40.0  24.40000 2001-04-01  10.685714  13.666667 25.7958333 22.027778\n5206 chic  45.0  27.20000 2001-04-02  21.750000  37.500000 15.5780303 39.541667\n5207 chic  41.0  32.50000 2001-04-03  20.550000  17.000000 37.9985507 19.936111\n5208 chic  42.0  30.90000 2001-04-04  27.587500  31.000000 28.7750000 28.488095\n5209 chic  48.0  37.40000 2001-04-05  30.400000  55.000000 16.0233696 39.263889\n5210 chic  53.0  51.60000 2001-04-06  38.900000  39.000000 11.9098485 25.020833\n5211 chic  64.0  48.80000 2001-04-07  14.237500  43.833333 32.4041667 17.614583\n5212 chic  61.0  41.70000 2001-04-08  10.500000  22.500000 34.4833333 19.510417\n5213 chic  52.0  43.30000 2001-04-09  11.000000  22.500000 26.8713768 22.018569\n5214 chic  47.0  43.80000 2001-04-10  25.575000  24.500000 13.9518116 20.809659\n5215 chic  64.0  58.00000 2001-04-11  16.400000  24.000000 15.6784420 20.885417\n5216 chic  57.0  40.40000 2001-04-12   5.900000  38.000000 30.6807477 14.510281\n5217 chic  48.0  36.40000 2001-04-13   9.075000  24.666667 20.6166667 27.510417\n5218 chic  52.0  35.10000 2001-04-14  15.400000  26.000000 25.5541667 31.591856\n5219 chic  49.0  39.50000 2001-04-15   8.100000  21.500000 39.8666667 15.968750\n5220 chic  36.0  24.00000 2001-04-16   8.028571  17.000000 26.2677536 18.406250\n5221 chic  38.0  24.00000 2001-04-17   6.950000  14.500000 29.6579710 21.903680\n5222 chic  41.0  24.40000 2001-04-18  16.400000  33.000000 16.3295290 41.640399\n5223 chic  51.0  31.70000 2001-04-19  13.200000  37.400000 28.2543478 32.465909\n5224 chic  64.0  54.50000 2001-04-20  17.300000  56.000000 34.2333333 21.541667\n5225 chic  69.0  58.80000 2001-04-21  13.600000  44.500000 29.2250000 15.145833\n5226 chic  65.0  55.50000 2001-04-22  13.828571  30.000000 23.5583333 17.489583\n5227 chic  58.0  50.20000 2001-04-23  10.850000  53.000000 25.7355072 13.393569\n5228 chic  52.0  31.10000 2001-04-24  10.400000  21.000000 27.9536397 25.510417\n5229 chic  51.0  38.30000 2001-04-25  13.157143  25.400000 19.1597826 37.823564\n5230 chic  61.0  43.30000 2001-04-26  11.800000  63.500000 31.2251153 28.858631\n5231 chic  52.0  32.50000 2001-04-27   7.900000  17.000000 35.8992754 21.895833\n5232 chic  53.0  35.80000 2001-04-28  10.528571  18.500000 29.2333333 24.437500\n5233 chic  61.0  34.50000 2001-04-29  10.400000  28.000000 35.3250000 22.989583\n5234 chic  68.0  45.30000 2001-04-30  17.700000  65.500000 36.8586957 33.031250\n5235 chic  73.0  53.20000 2001-05-01  20.414286  59.666667 42.8200922 23.715292\n5236 chic  73.0  53.40000 2001-05-02  19.600000  89.500000 36.7003623 24.250000\n5237 chic  72.0  52.60000 2001-05-03  22.700000  97.500000 42.2202899 27.886364\n5238 chic  55.0  46.20000 2001-05-04   8.787500  17.000000 33.5202899 20.692482\n5239 chic  58.0  46.30000 2001-05-05   8.100000  18.000000 30.7625000 14.145833\n5240 chic  65.0  48.40000 2001-05-06  14.400000  32.500000 32.7708333 19.166667\n5241 chic  60.0  54.10000 2001-05-07  15.450000  27.333333 18.7788043 26.791667\n5242 chic  62.0  45.30000 2001-05-08   7.300000  51.500000 26.4762681 27.583333\n5243 chic  67.0  46.10000 2001-05-09  10.700000  59.000000 36.8536891 29.293561\n5244 chic  70.0  55.80000 2001-05-10  15.875000  68.000000 36.1219203 28.094697\n5245 chic  54.0  50.20000 2001-05-11   6.250000  16.000000 21.1284420 16.800000\n5246 chic  48.0  33.30000 2001-05-12   5.300000   7.500000 31.1568841 13.717029\n5247 chic  53.0  33.00000 2001-05-13  13.387500  31.000000 22.9750000 28.325000\n5248 chic  54.0  46.30000 2001-05-14  10.400000  42.000000 20.0022563 34.991667\n5249 chic  72.0  62.50000 2001-05-15  17.100000  43.000000 30.1335145 29.479348\n5250 chic  77.0  62.40000 2001-05-16  25.350000  41.000000 33.3641798 27.705402\n5251 chic  74.0  61.70000 2001-05-17  21.900000  46.000000 24.3299819 40.907818\n5252 chic  65.0  40.00000 2001-05-18   9.900000  20.500000 37.3773551 18.361775\n5253 chic  61.0  41.40000 2001-05-19   8.000000  21.500000 36.1708333 19.800000\n5254 chic  63.0  48.60000 2001-05-20  11.900000  23.500000 41.0005435 20.573551\n5255 chic  62.0  56.90000 2001-05-21  13.600000  23.500000 24.2177536 19.958333\n5256 chic  53.0  42.20000 2001-05-22   6.612500  25.000000 20.5608696 17.898188\n5257 chic  54.0  43.50000 2001-05-23   9.500000  26.000000 12.6213627 28.868074\n5258 chic  51.0  45.90000 2001-05-24  13.200000  16.500000 14.1075886 26.704167\n5259 chic  51.0  44.70000 2001-05-25  14.900000  20.333333 11.6360709 27.949275\n5260 chic  48.0  44.30000 2001-05-26  12.700000  13.500000 19.4470612 18.711594\n5261 chic  55.0  49.20000 2001-05-27  14.900000  21.000000 25.2532206 20.300000\n5262 chic  59.0  51.80000 2001-05-28  20.637500  23.500000 22.5879630 26.358333\n5263 chic  53.0  43.60000 2001-05-29   7.800000  11.500000 20.6226852 23.252976\n5264 chic  53.0  35.10000 2001-05-30   4.800000  11.500000 27.7185533 18.038060\n5265 chic  53.0  44.90000 2001-05-31  13.271429  26.000000 22.4940217 21.697101\n5266 chic  57.0  49.50000 2001-06-01  11.200000  15.500000 24.2144763 23.099638\n5267 chic  53.0  48.00000 2001-06-02   6.250000   8.500000 22.7708333 15.125000\n5268 chic  52.0  44.50000 2001-06-03   4.825000   5.000000 15.4250000  9.670833\n5269 chic  51.0  44.00000 2001-06-04   6.100000   8.500000 19.5875000 11.467572\n5270 chic  53.0  51.70000 2001-06-05  18.800000  19.000000 12.0006341 20.262500\n5271 chic  57.0  54.40000 2001-06-06  29.175000  35.333333 15.4722826 21.536190\n5272 chic  59.0  53.20000 2001-06-07  16.100000  21.500000 22.3791667 25.095833\n5273 chic  61.0  51.60000 2001-06-08  15.300000  29.000000 21.8159420 32.787319\n5274 chic  66.0  55.70000 2001-06-09  17.487500  43.500000 29.4291667 35.516667\n5275 chic  74.0  62.00000 2001-06-10  18.200000  35.500000 42.8541667 16.266667\n5276 chic  76.0  66.20000 2001-06-11  23.200000  50.000000 34.7547101 29.734091\n5277 chic  75.0  65.60000 2001-06-12  16.237500  34.333333 37.9848732 29.325000\n5278 chic  80.0  69.50000 2001-06-13  36.300000  61.000000 51.8198370 29.813768\n5279 chic  80.0  68.50000 2001-06-14  30.100000  57.500000 41.3428030 21.408333\n5280 chic  70.0  62.10000 2001-06-15   9.187500  25.000000 19.9731884 24.133333\n5281 chic  71.0  57.50000 2001-06-16   7.800000  24.000000 32.6166667 21.625000\n5282 chic  71.0  55.40000 2001-06-17  11.300000  27.000000 34.6229167 25.816667\n5283 chic  78.0  61.40000 2001-06-18  13.450000  36.500000 48.3247283 21.878623\n5284 chic  75.0  61.50000 2001-06-19  13.700000  39.500000 46.4770422 18.469928\n5285 chic  70.0  52.90000 2001-06-20  14.650000  19.000000 30.0812500 24.929058\n5286 chic  62.0  54.90000 2001-06-21  16.662500  22.500000 23.3856108 28.537164\n5287 chic  60.0  54.30000 2001-06-22  14.200000  20.000000 20.4875000 20.266667\n5288 chic  62.0  52.80000 2001-06-23  13.550000  21.000000 19.5416667 24.566667\n5289 chic  66.0  55.00000 2001-06-24  21.371429  30.166667 34.1958333 30.383333\n5290 chic  72.0  58.90000 2001-06-25  21.850000  45.500000 39.3654891 33.608333\n5291 chic  74.0  57.90000 2001-06-26  24.800000  43.000000 42.6815382 36.149275\n5292 chic  75.0  61.10000 2001-06-27  31.300000  57.500000 42.1101449 37.222101\n5293 chic  75.0  62.90000 2001-06-28  41.300000  66.000000 42.9583333 36.940000\n5294 chic  77.0  63.90000 2001-06-29  38.850000  70.500000 42.5458333 35.098551\n5295 chic  78.0  64.90000 2001-06-30  30.175000  45.666667 46.9458333 21.816667\n5296 chic  64.0  52.00000 2001-07-01   7.200000  16.000000 22.7395833  8.650000\n5297 chic  62.0  42.70000 2001-07-02   6.600000  20.500000 21.4062500 17.641667\n5298 chic  72.0  63.30000 2001-07-03   9.371429  26.000000 20.2451087 26.371325\n5299 chic  78.0  58.80000 2001-07-04  19.000000  27.500000 30.9833333 20.866667\n5300 chic  64.0  49.20000 2001-07-05   6.700000  19.500000 22.0190217 14.283333\n5301 chic  66.0  49.70000 2001-07-06  10.262500  22.000000 26.0622283 24.902899\n5302 chic  74.0  71.80000 2001-07-07  18.150000  34.500000 28.0143116 20.166667\n5303 chic  79.0  63.20000 2001-07-08  14.300000  26.000000 23.0966184 24.183333\n5304 chic  79.0  67.40000 2001-07-09  22.600000  36.500000 27.0644516 31.742424\n5305 chic  81.0  61.20000 2001-07-10  17.000000  35.500000 33.7047101 27.344048\n5306 chic  69.0  51.70000 2001-07-11   5.450000  10.000000 24.9645833 13.838636\n5307 chic  69.0  53.40000 2001-07-12   8.157143  20.200000 18.0318264 21.222348\n5308 chic  68.0  50.90000 2001-07-13   7.600000  20.000000 16.1972332 22.077609\n5309 chic  74.0  50.40000 2001-07-14  11.100000  30.500000 28.5125000 27.675000\n5310 chic  74.0  57.20000 2001-07-15  19.971429  47.500000 38.2875000 30.833333\n5311 chic  75.0  60.50000 2001-07-16  26.100000  58.000000 40.8931159 34.444481\n5312 chic  79.0  70.00000 2001-07-17  39.000000  67.500000 41.8674242 33.038636\n5313 chic  78.0  72.90000 2001-07-18  31.142857  47.800000 26.6572875 25.624374\n5314 chic  77.0  73.00000 2001-07-19  28.500000  42.000000 32.7817761 29.462319\n5315 chic  82.0  72.20000 2001-07-20  32.300000  58.500000 33.0038043 33.675000\n5316 chic  83.0  73.40000 2001-07-21  21.985714  39.500000 30.4416667 30.291667\n5317 chic  82.0  72.00000 2001-07-22  19.300000  25.500000 29.3125000 29.608333\n5318 chic  83.0  75.10000 2001-07-23  20.600000  34.000000 21.0333132 32.020833\n5319 chic  79.0  71.80000 2001-07-24  15.712500  32.400000 33.2979167 25.050000\n5320 chic  71.0  67.50000 2001-07-25  10.400000  20.500000 30.7289855 16.483873\n5321 chic  73.0  62.90000 2001-07-26   9.200000  11.000000 27.9526845 12.196970\n5322 chic  71.0  58.40000 2001-07-27  10.912500  25.000000 30.5804348 18.833333\n5323 chic  72.0  66.20000 2001-07-28  26.300000  37.500000 27.7454545 30.527273\n5324 chic  78.0  70.30000 2001-07-29  27.400000  37.500000 37.4354167 17.983333\n5325 chic  80.0  69.90000 2001-07-30  29.512500  48.166667 41.0873188 23.325000\n5326 chic  83.0  73.10000 2001-07-31  27.100000  45.000000 42.1452122 26.918939\n5327 chic  84.0  72.90000 2001-08-01  43.700000  81.500000 45.1773551 27.442391\n5328 chic  79.0  73.70000 2001-08-02  15.085714  38.500000 22.3635481 33.087780\n5329 chic  75.0  70.50000 2001-08-03  15.200000  23.000000 26.9838768 21.963043\n5330 chic  76.0  63.80000 2001-08-04  10.300000  20.000000 23.4395833 21.108333\n5331 chic  76.0  68.50000 2001-08-05  21.837500  32.500000 37.8480072 30.058333\n5332 chic  81.0  68.10000 2001-08-06  22.700000  50.000000 32.3516304 33.075000\n5333 chic  85.0  73.70000 2001-08-07  27.150000  40.500000 39.5966486 28.741667\n5334 chic  85.0  72.60000 2001-08-08  38.837500  70.000000 37.9804682 27.627433\n5335 chic  84.0  72.60000 2001-08-09  38.200000  66.000000 36.7324522 26.467424\n5336 chic  70.0  59.90000 2001-08-10   6.350000  13.500000 23.5074879 13.817624\n5337 chic  69.0  56.00000 2001-08-11   5.737500  16.666667 22.4854167 14.366667\n5338 chic  72.0  59.30000 2001-08-12  13.800000  27.000000 28.3277174 24.216667\n5339 chic  67.0  58.60000 2001-08-13   7.750000  18.000000 25.9020833 15.612500\n5340 chic  66.0  52.10000 2001-08-14   6.887500  16.500000 21.6938406 19.519203\n5341 chic  67.0  56.00000 2001-08-15  16.300000  38.500000 22.3541749 38.013095\n5342 chic  68.0  63.70000 2001-08-16  21.600000  31.000000 21.5771410 25.841667\n5343 chic  70.0  55.60000 2001-08-17   8.987500  20.500000 15.3771739 21.834524\n5344 chic  66.0  61.00000 2001-08-18  10.800000  22.000000 12.2958333 29.475000\n5345 chic  68.0  59.90000 2001-08-19   7.200000  16.500000 23.0354167 12.537500\n5346 chic  69.0  55.80000 2001-08-20  10.512500  36.000000 12.1166667 20.870833\n5347 chic  72.0  59.70000 2001-08-21  19.900000  48.000000 17.9390399 27.937500\n5348 chic  77.0  68.10000 2001-08-22  21.400000  44.000000 23.0271739 29.382143\n5349 chic  72.0  67.70000 2001-08-23  22.000000  30.500000 29.8554513 19.111742\n5350 chic  74.0  67.70000 2001-08-24  28.850000  38.000000 37.2157115 19.303788\n5351 chic  74.0  70.20000 2001-08-25  19.550000  26.000000 20.6333333 22.966667\n5352 chic  75.0  65.10000 2001-08-26  11.975000  24.500000 26.6388889 21.433333\n5353 chic  74.0  65.20000 2001-08-27  17.100000  39.500000 19.6982689 32.708333\n5354 chic  68.0  57.30000 2001-08-28  11.300000  24.500000 19.0765993 18.562500\n5355 chic  69.0  57.70000 2001-08-29  15.175000  32.800000 22.8365539 25.857726\n5356 chic  77.0  65.10000 2001-08-30  16.600000  36.500000 29.1650492 28.274144\n5357 chic  68.0  59.90000 2001-08-31   6.100000  21.500000 18.8584239 16.206818\n5358 chic  60.0  49.80000 2001-09-01   4.662500  14.000000 25.5812500 11.325000\n5359 chic  64.0  55.00000 2001-09-02  11.650000  27.000000 21.0541667 26.191667\n5360 chic  74.0  63.00000 2001-09-03  18.050000  37.000000 34.0229167 19.991667\n5361 chic  67.0  57.80000 2001-09-04   5.650000  14.600000 22.1880435 13.195833\n5362 chic  66.0  58.50000 2001-09-05   8.950000  31.500000 23.6516304 22.016288\n5363 chic  73.0  63.50000 2001-09-06  20.400000  43.000000 32.7273221 29.404084\n5364 chic  78.0  69.50000 2001-09-07  12.475000  20.000000 20.8021739 16.993116\n5365 chic  72.0  65.10000 2001-09-08  10.000000  30.500000 28.1291667 15.300000\n5366 chic  64.0  60.90000 2001-09-09   8.100000  21.000000 11.1875000 19.275000\n5367 chic  65.0  50.60000 2001-09-10   7.171429  19.400000 12.9635211 22.308333\n5368 chic  64.0  54.90000 2001-09-11  13.600000  28.000000 15.5998188 31.836594\n5369 chic  69.0  56.80000 2001-09-12  14.400000  51.500000 26.4399457 34.848913\n5370 chic  63.0  51.60000 2001-09-13   5.112500  15.500000 23.3461957  9.831884\n5371 chic  59.0  43.80000 2001-09-14   3.800000  15.000000 22.2288208 12.111759\n5372 chic  58.0  46.80000 2001-09-15   9.100000  21.000000 18.4645833 18.287121\n5373 chic  60.0  49.30000 2001-09-16  16.485714  30.833333 24.0645833 21.395833\n5374 chic  59.0  54.30000 2001-09-17  24.800000  38.500000 13.0634058 38.225000\n5375 chic  62.0  58.30000 2001-09-18  27.500000  34.500000 34.8092391 23.723188\n5376 chic  62.0  59.90000 2001-09-19  16.000000  17.000000 17.1153986 20.868144\n5377 chic  63.0  54.60000 2001-09-20  16.900000  55.000000 14.9498188 26.937060\n5378 chic  62.0  58.50000 2001-09-21  13.700000  28.500000 10.0938406 26.693841\n5379 chic  63.0  54.40000 2001-09-22  14.425000  24.833333 14.5729167 27.175000\n5380 chic  58.0  54.50000 2001-09-23  11.000000  21.500000 14.6541667 18.170833\n5381 chic  50.0  38.20000 2001-09-24   3.200000  11.000000 15.0020916 16.825296\n5382 chic  49.0  34.40000 2001-09-25   5.414286  15.500000 13.7728261 23.937500\n5383 chic  60.0  40.20000 2001-09-26   6.000000  20.500000 15.6138230 25.308626\n5384 chic  54.0  44.90000 2001-09-27   6.000000  17.000000 15.7999094 23.687500\n5385 chic  54.0  47.40000 2001-09-28   5.442857  11.166667 15.3498188 15.905303\n5386 chic  56.0  48.80000 2001-09-29   9.500000  17.000000 13.7937500 20.916667\n5387 chic  58.0  49.70000 2001-09-30  16.700000  37.500000 11.8083333 31.937500\n5388 chic  64.0  52.70000 2001-10-01  18.075000  62.000000 12.4394065 43.912202\n5389 chic  64.0  53.70000 2001-10-02  19.400000  74.500000 23.3374780 40.215909\n5390 chic  66.0  51.50000 2001-10-03  16.200000  66.500000 35.4860105 21.476974\n5391 chic  55.0  48.70000 2001-10-04  12.725000  23.500000  6.4537037 24.864583\n5392 chic  46.0  40.60000 2001-10-05   8.700000  18.500000  5.2854908 25.114583\n5393 chic  40.0  27.90000 2001-10-06   7.200000  25.500000 10.6597222 20.093750\n5394 chic  41.0  27.60000 2001-10-07  12.287500  24.000000 12.0995370 24.833333\n5395 chic  52.0  37.90000 2001-10-08  10.700000  30.500000 18.0778986 23.024004\n5396 chic  65.0  47.60000 2001-10-09  14.700000  52.000000 29.4004630 21.168561\n5397 chic  60.0  56.60000 2001-10-10  14.928571  25.666667 17.1620370 19.048295\n5398 chic  58.0  47.10000 2001-10-11   9.400000  36.000000 12.6797504 27.777462\n5399 chic  56.0  52.30000 2001-10-12   9.500000  30.500000  9.5833333 24.593750\n5400 chic  60.0  57.20000 2001-10-13  11.242857  26.500000  7.8726852 21.166667\n5401 chic  53.0  43.30000 2001-10-14   5.800000  12.000000 13.9722222 13.583333\n5402 chic  47.0  38.10000 2001-10-15   6.400000  32.500000  6.0454545 18.656250\n5403 chic  45.0  35.10000 2001-10-16   6.314286  11.400000  7.9962121 20.002717\n5404 chic  42.0  28.60000 2001-10-17   7.050000  41.000000  8.6316425 27.356061\n5405 chic  51.0  34.70000 2001-10-18   7.800000  68.500000 13.3630051 27.496377\n5406 chic  53.0  35.40000 2001-10-19   8.314286  39.500000 10.5034219 31.250000\n5407 chic  56.0  39.30000 2001-10-20  10.100000  58.500000 13.1203704 33.656250\n5408 chic  59.0  46.20000 2001-10-21  16.300000  44.500000 17.1180556 25.135417\n5409 chic  56.0  53.30000 2001-10-22  21.571429  35.500000 10.4533743 29.072917\n5410 chic  62.0  57.70000 2001-10-23  15.400000  44.000000 11.3331320 27.315341\n5411 chic  52.0  50.30000 2001-10-24   7.700000  33.000000 10.4893461 19.776042\n5412 chic  38.0  26.10000 2001-10-25   7.412500  34.000000 17.8463896 12.592580\n5413 chic  39.0  25.50000 2001-10-26   6.500000  22.500000 14.1525765 19.062500\n5414 chic  38.0  23.60000 2001-10-27   7.000000  26.000000 15.7492955 24.000000\n5415 chic  43.0  28.00000 2001-10-28  10.625000  18.500000 13.2870370 23.035779\n5416 chic  52.0  37.50000 2001-10-29   9.100000  39.500000 11.9907407 25.510417\n5417 chic  50.0  43.90000 2001-10-30  18.550000  39.500000  3.8758783 23.833333\n5418 chic  59.0  38.00000 2001-10-31  16.987500  92.500000 23.7340342 30.033144\n5419 chic  62.0  50.40000 2001-11-01  15.100000  83.000000 25.5839372 25.227129\n5420 chic  56.0  36.80000 2001-11-02   8.200000  38.500000 13.1250000 24.979167\n5421 chic  51.0  33.60000 2001-11-03  14.214286  36.166667  8.9722222 34.864583\n5422 chic  49.0  37.50000 2001-11-04  10.300000  35.000000 14.3789683 24.260417\n5423 chic  43.0  31.00000 2001-11-05  19.900000  59.000000  4.3472222 41.340774\n5424 chic  48.0  31.10000 2001-11-06  13.587500  75.500000  5.6328502 35.536458\n5425 chic  56.0  43.30000 2001-11-07  23.500000  84.500000  6.9329710 41.519475\n5426 chic  45.0  37.90000 2001-11-08  15.800000  42.000000  9.6250000 26.341033\n5427 chic  40.0  29.80000 2001-11-09  14.700000  32.000000  5.6527778 27.833333\n5428 chic  49.0  33.40000 2001-11-10  10.100000  40.000000 14.0555556 17.270833\n5429 chic  43.0  32.50000 2001-11-11   6.000000  15.500000 19.4583333 19.718750\n5430 chic  42.0  32.30000 2001-11-12  20.037500  44.500000  4.0555556 34.218750\n5431 chic  52.0  33.40000 2001-11-13  15.900000  78.500000  7.9722222 32.030208\n5432 chic  57.0  49.10000 2001-11-14  38.900000  95.000000  9.1781401 38.563156\n5433 chic  61.0  53.50000 2001-11-15  39.512500  59.666667 11.1111111 31.740942\n5434 chic  50.0  47.00000 2001-11-16  27.050000  46.500000  8.2590580 24.656250\n5435 chic  52.0  47.40000 2001-11-17  33.400000  73.000000  2.8333333 29.630208\n5436 chic  56.0  51.70000 2001-11-18  38.075000  62.000000  5.6527778 25.109375\n5437 chic  46.0  33.90000 2001-11-19  10.700000  28.000000 11.5295894 23.160714\n5438 chic  36.0  23.20000 2001-11-20   6.700000  29.000000  7.5000000 26.222222\n5439 chic  44.0  29.70000 2001-11-21  11.500000  29.600000  4.7916667 26.172101\n5440 chic  48.0  30.30000 2001-11-22  10.800000  35.500000  9.4861111 22.437198\n5441 chic  52.0  39.90000 2001-11-23  15.300000  34.500000 12.3282828 26.820707\n5442 chic  57.0  51.50000 2001-11-24  10.142857  27.000000 19.1733092 15.276721\n5443 chic  46.0  38.50000 2001-11-25   4.400000  12.000000  9.0138889 11.062500\n5444 chic  43.0  40.40000 2001-11-26  17.700000  35.500000  6.2693237 21.729167\n5445 chic  44.0  37.60000 2001-11-27  13.837500  21.166667  4.9166667 18.802083\n5446 chic  39.0  34.30000 2001-11-28  19.100000  23.500000  2.9747475 19.181159\n5447 chic  42.0  40.10000 2001-11-29   5.000000  12.500000  2.9861111 17.338542\n5448 chic  45.0  42.50000 2001-11-30   6.100000  13.000000  1.2361111 16.476799\n5449 chic  36.0  32.80000 2001-12-01  19.000000  33.500000  7.4027778 18.447917\n5450 chic  39.0  35.40000 2001-12-02  16.750000  29.000000  6.8611111 24.833333\n5451 chic  49.0  42.90000 2001-12-03  20.137500  28.666667  5.6274155 32.226935\n5452 chic  58.0  51.10000 2001-12-04  14.300000  58.000000  6.9565217 28.260417\n5453 chic  56.0  50.10000 2001-12-05  19.600000  81.500000 22.8611111 21.177083\n5454 chic  44.0  30.90000 2001-12-06   9.812500  33.000000  8.5555556 27.128788\n5455 chic  41.0  34.10000 2001-12-07  12.900000  23.500000 11.1186869 24.479167\n5456 chic  39.0  32.70000 2001-12-08  21.100000  31.500000 10.7361111 24.447917\n5457 chic  31.0  21.90000 2001-12-09  19.812500  23.166667  5.6388889 26.375000\n5458 chic  39.0  23.10000 2001-12-10  22.350000  51.000000  3.9027778 33.994792\n5459 chic  36.0  26.90000 2001-12-11  29.100000  55.000000  3.0772947 38.493433\n5460 chic  43.0  40.90000 2001-12-12  27.200000  51.500000  1.7222222 30.199811\n5461 chic  39.0  36.60000 2001-12-13  15.000000  19.000000  2.9633838 22.322917\n5462 chic  35.0  32.10000 2001-12-14  27.500000  36.500000  2.2850242 26.078125\n5463 chic  35.0  34.60000 2001-12-15  22.542857  25.800000  4.2361111 27.770833\n5464 chic  42.0  41.80000 2001-12-16  17.600000  20.000000  2.5694444 25.411458\n5465 chic  40.0  38.50000 2001-12-17  14.800000  17.000000  3.0422705 21.468750\n5466 chic  39.0  32.30000 2001-12-18  19.737500  50.500000  3.7427536 26.566690\n5467 chic  36.0  25.60000 2001-12-19  10.700000  22.500000  8.6642512 24.385417\n5468 chic  33.0  18.80000 2001-12-20   9.900000  30.000000  5.9722222 29.467597\n5469 chic  31.0  20.00000 2001-12-21  18.187500  39.000000  3.5416667 36.513889\n5470 chic  41.0  34.40000 2001-12-22  11.000000  24.000000 10.7312802 24.245169\n5471 chic  27.0  18.00000 2001-12-23   9.800000  46.000000 17.1340580 10.125000\n5472 chic  18.0  12.00000 2001-12-24   7.800000  34.000000 19.5138889 14.013889\n5473 chic  17.0   8.30000 2001-12-25  10.200000  23.500000 15.2500000 15.805556\n5474 chic  14.0   8.10000 2001-12-26  11.600000  41.500000  8.7727822 19.875000\n5475 chic  23.0  17.10000 2001-12-27  15.312500  28.000000 11.9027778 18.819444\n5476 chic  21.0  12.10000 2001-12-28  12.100000  37.000000 14.2777778 22.617754\n5477 chic  14.0   4.10000 2001-12-29   8.200000  32.000000 17.5694444 18.145833\n5478 chic  13.0   4.80000 2001-12-30  11.525000  27.500000 15.0694444 15.479167\n5479 chic  14.0   3.70000 2001-12-31  17.400000  31.000000 11.1919192 22.047222\n5480 chic  18.0   6.00000 2002-01-01  16.000000  51.500000  5.7083333 30.864583\n5481 chic  21.0  11.90000 2002-01-02  25.785714  49.600000  3.6944444 41.875000\n5482 chic  20.0  11.30000 2002-01-03  20.100000  50.000000  5.8478261 35.735054\n5483 chic  28.0  17.50000 2002-01-04  16.000000  71.000000  8.4070048 24.011775\n5484 chic  32.0  25.90000 2002-01-05  20.087500  40.000000  4.3055556 21.708333\n5485 chic  29.0  22.60000 2002-01-06  13.300000  26.500000 11.3750000 19.520833\n5486 chic  22.0  12.40000 2002-01-07  10.100000  24.000000  9.2336957 25.316423\n5487 chic  31.0  22.00000 2002-01-08  14.762500  24.600000  6.0277778 23.031250\n5488 chic  47.0  33.70000 2002-01-09  11.400000  29.500000  3.9722222 22.022110\n5489 chic  39.0  30.90000 2002-01-10  13.150000  23.000000  5.7210145 27.218750\n5490 chic  38.0  27.00000 2002-01-11  12.125000  19.500000 10.6250000 21.802083\n5491 chic  35.0  24.70000 2002-01-12  10.400000  16.500000 10.3750000 20.770833\n5492 chic  33.0  22.70000 2002-01-13   8.900000  19.500000  7.5416667 22.104167\n5493 chic  35.0  30.80000 2002-01-14  16.800000  19.333333  3.6805556 21.555060\n5494 chic  32.0  23.60000 2002-01-15  18.600000  17.000000 10.2771739 18.510417\n5495 chic  29.0  23.50000 2002-01-16  15.450000  22.500000  5.0277778 24.536849\n5496 chic  19.0  14.40000 2002-01-17  17.937500  21.500000  8.0820707 25.354167\n5497 chic  16.0   6.50000 2002-01-18  16.100000  28.500000  6.8333333 30.156250\n5498 chic  20.0  12.40000 2002-01-19  19.500000  30.000000  7.7361111 30.614583\n5499 chic  29.0  22.80000 2002-01-20  20.712500  22.833333 13.4166667 17.979167\n5500 chic  31.0  25.70000 2002-01-21  18.500000  24.500000  9.0416667 23.708333\n5501 chic  44.0  24.70000 2002-01-22  11.700000  37.500000 10.3611111 27.333333\n5502 chic  42.0  39.20000 2002-01-23  18.700000  38.500000  8.0585749 23.135417\n5503 chic  36.0  24.20000 2002-01-24  11.800000  17.500000 15.2632850 21.161355\n5504 chic  39.0  20.70000 2002-01-25   8.800000  30.000000 12.1014493 22.375000\n5505 chic  44.0  25.60000 2002-01-26   9.475000  15.666667 14.1666667 21.697917\n5506 chic  49.0  30.30000 2002-01-27   7.000000  28.000000 19.9027778 18.260417\n5507 chic  41.0  33.50000 2002-01-28  16.600000  32.000000 12.2572464 24.218750\n5508 chic  34.0  29.60000 2002-01-29   9.585714  15.000000 16.0416667 19.041667\n5509 chic  32.0  28.30000 2002-01-30  15.050000  11.500000 15.3520531 22.152627\n5510 chic  32.0        NA 2002-01-31   8.650000   9.500000 12.0227273 21.270833\n5511 chic  27.0  22.50000 2002-02-01   9.271429  12.000000 15.1899758 26.270833\n5512 chic  21.0  17.70000 2002-02-02  19.200000  32.000000 11.5555556 29.895833\n5513 chic  27.0  20.10000 2002-02-03  16.800000  22.000000 20.9818841 19.494112\n5514 chic  18.0   5.80000 2002-02-04   9.757143  21.000000 14.8948413 27.699728\n5515 chic  20.0  12.20000 2002-02-05  18.800000  38.500000  7.9583333 35.482639\n5516 chic  29.0  19.20000 2002-02-06  25.000000  49.500000  4.2291667 36.649909\n5517 chic  32.0  26.10000 2002-02-07  34.857143  41.166667  8.2119565 36.704545\n5518 chic  36.0  28.30000 2002-02-08  34.850000  60.000000  5.8750000 32.805871\n5519 chic  40.0  32.90000 2002-02-09  21.400000  30.500000 11.0833333 28.885417\n5520 chic  37.0  29.30000 2002-02-10  10.014286  20.000000 19.4583333 17.906250\n5521 chic  29.0  19.80000 2002-02-11   8.100000  28.000000 15.1250000 22.875000\n5522 chic  35.0  22.00000 2002-02-12   6.050000  22.500000 20.2708333 17.250000\n5523 chic  25.0  11.00000 2002-02-13   7.712500  17.250000 12.7581522 29.395780\n5524 chic  38.0  21.70000 2002-02-14   8.200000  46.500000 15.5416667 23.304924\n5525 chic  39.0  27.60000 2002-02-15  12.800000  33.500000 12.0573671 19.871212\n5526 chic  37.0  24.50000 2002-02-16   6.585714  13.500000 17.7916667 18.291667\n5527 chic  33.0  20.20000 2002-02-17   5.800000  11.000000 20.4583333 19.656250\n5528 chic  38.0  22.90000 2002-02-18  10.500000  31.000000 12.6805556 24.750000\n5529 chic  42.0  39.90000 2002-02-19  14.850000  20.400000 12.9305556 24.306914\n5530 chic  44.0  42.80000 2002-02-20  11.400000  20.000000  9.6666667 16.145833\n5531 chic  32.0  26.20000 2002-02-21   8.400000  12.500000 13.9374177 21.559783\n5532 chic  30.0  18.40000 2002-02-22   8.471429  15.000000 16.0694444 27.664855\n5533 chic  36.0  24.80000 2002-02-23  10.500000  25.000000 13.8472222 24.166667\n5534 chic  50.0  31.60000 2002-02-24  11.600000  30.500000 20.4722222 16.645833\n5535 chic  42.0  30.90000 2002-02-25   9.828571  18.333333 20.7777778 17.117918\n5536 chic  26.0  19.60000 2002-02-26   8.400000  26.500000 17.8333333 20.239583\n5537 chic  21.0  10.80000 2002-02-27   9.200000  26.000000 18.3152174 23.668616\n5538 chic  23.0  14.00000 2002-02-28  14.987500  43.500000 11.6666667 26.348485\n5539 chic  26.0  17.20000 2002-03-01  17.800000  27.500000 16.3194444 28.906250\n5540 chic  28.0  27.90000 2002-03-02  15.900000  19.000000 12.9166667 32.166667\n5541 chic  11.0   3.30000 2002-03-03   7.200000  15.500000 30.1250000 14.885417\n5542 chic   6.0  -0.60000 2002-03-04  12.800000  29.000000 18.9510870 25.361607\n5543 chic  23.0  17.90000 2002-03-05  22.700000  29.000000  8.8007246 36.723485\n5544 chic  35.0  28.10000 2002-03-06  21.942857  20.000000 16.1388889 30.010417\n5545 chic  36.0  30.60000 2002-03-07  33.700000  41.000000 16.1962560 25.213768\n5546 chic  51.0  46.50000 2002-03-08  13.600000  12.000000 18.9722222 23.166667\n5547 chic  42.0  30.90000 2002-03-09   9.457143  23.500000 28.8750000  8.302083\n5548 chic  21.0   7.20000 2002-03-10   7.550000  20.500000 27.5507246 12.041667\n5549 chic  33.0  21.00000 2002-03-11  13.350000  33.000000 11.1690821 30.697917\n5550 chic  40.0  31.30000 2002-03-12  25.325000  53.000000  6.7904589 31.125000\n5551 chic  48.0  37.60000 2002-03-13  24.100000  48.000000 13.5138889 30.844656\n5552 chic  50.0  41.00000 2002-03-14  27.000000  34.000000 18.8224638 22.166667\n5553 chic  47.0  31.50000 2002-03-15  11.114286  19.400000 20.9305556 15.125000\n5554 chic  37.0  26.30000 2002-03-16   5.500000  10.500000 36.3055556 11.302083\n5555 chic  38.0  30.40000 2002-03-17  16.100000  23.500000 18.4444444 20.812500\n5556 chic  42.0  32.00000 2002-03-18  20.925000  23.500000 15.9263285 25.412202\n5557 chic  42.0  35.50000 2002-03-19  30.450000  41.000000  9.1111111 28.593750\n5558 chic  40.0  34.00000 2002-03-20  16.800000  20.500000 19.8888889 27.083333\n5559 chic  28.0  12.90000 2002-03-21  10.928571  20.166667 22.8750000 16.403986\n5560 chic  26.0   8.10000 2002-03-22  10.700000  34.500000 24.1805556 14.734848\n5561 chic  39.0  15.80000 2002-03-23  12.100000  39.000000 26.7500000 17.927083\n5562 chic  34.0  22.90000 2002-03-24   7.537500  19.000000 35.0972222 11.412138\n5563 chic  28.0  19.10000 2002-03-25   7.100000  19.000000 26.3333333 11.368506\n5564 chic  32.0  23.70000 2002-03-26  12.250000  16.000000 22.0694444 19.677083\n5565 chic  36.0  22.10000 2002-03-27  20.562500  31.166667 14.3888889 33.911504\n5566 chic  40.0  32.60000 2002-03-28  31.500000  52.500000 10.3387681 30.593750\n5567 chic  41.0  39.30000 2002-03-29  20.500000  31.500000  9.4166667 34.385417\n5568 chic  43.0  29.20000 2002-03-30   8.225000  12.000000 20.3611111 20.177083\n5569 chic  38.0  27.30000 2002-03-31  10.600000  17.000000 19.5138889 22.156250\n5570 chic  34.0  27.10000 2002-04-01  13.300000  25.000000 14.0338542 28.233696\n5571 chic  39.0  34.50000 2002-04-02  19.125000  24.500000 16.2943841 25.730655\n5572 chic  35.0  28.10000 2002-04-03   9.700000  15.000000 21.0313118 23.128788\n5573 chic  31.0  25.00000 2002-04-04   9.000000  15.000000 23.0562726 22.816123\n5574 chic  33.0  24.80000 2002-04-05  18.642857  28.000000 18.1805933 29.197917\n5575 chic  34.0  22.80000 2002-04-06  15.900000  25.000000 23.8671875 30.322917\n5576 chic  42.0  34.50000 2002-04-07  15.600000  24.000000 22.9348958 21.208333\n5577 chic  49.0  48.30000 2002-04-08  23.475000  27.500000 18.5677083 37.102273\n5578 chic  43.0  38.80000 2002-04-09   9.800000  18.000000 18.8643569 26.760417\n5579 chic  49.0  35.60000 2002-04-10  15.250000  31.000000 21.5643024 29.705492\n5580 chic  63.0  41.30000 2002-04-11  11.425000  45.000000 30.1260064 26.417874\n5581 chic  57.0  51.40000 2002-04-12  13.700000  36.000000 19.7606500 22.291667\n5582 chic  52.0  45.50000 2002-04-13  16.000000  24.000000 19.8472222 30.444444\n5583 chic  59.0  50.30000 2002-04-14  17.914286  26.166667 29.4074074 20.250000\n5584 chic  75.0  59.00000 2002-04-15  14.100000  62.000000 35.0972222 19.943496\n5585 chic  78.0  60.80000 2002-04-16  14.400000  41.000000 36.1854011 17.125000\n5586 chic  75.0  58.10000 2002-04-17  13.462500  47.000000 28.6344422 24.339976\n5587 chic  76.0  61.10000 2002-04-18  13.700000  67.000000 29.6387791 21.868961\n5588 chic  56.0  46.80000 2002-04-19   5.700000  22.000000 30.3912037 17.583333\n5589 chic  45.0  29.60000 2002-04-20   4.142857   6.800000 41.0092593  7.802083\n5590 chic  41.0  38.30000 2002-04-21   5.700000   9.000000 30.2476852 10.197917\n5591 chic  40.0  33.50000 2002-04-22   6.800000   8.000000 25.5663245 22.460417\n5592 chic  46.0  36.90000 2002-04-23  17.400000  22.000000 20.1294375 32.925595\n5593 chic  58.0  44.50000 2002-04-24  11.500000  19.000000 26.6563003 21.848020\n5594 chic  46.0  26.50000 2002-04-25   7.800000         NA 24.8418881 17.044643\n5595 chic  45.0  25.70000 2002-04-26   9.900000  30.250000 23.9322665 26.260417\n5596 chic  48.0  37.40000 2002-04-27  12.600000  34.000000 24.6574074 20.604167\n5597 chic  50.0  41.40000 2002-04-28   6.600000  14.000000 27.8101852 12.317708\n5598 chic  51.0  37.80000 2002-04-29  10.928571  38.000000 25.1340488 25.634848\n5599 chic  54.0  33.80000 2002-04-30   8.500000  29.000000 20.5936997 29.241667\n5600 chic  53.0  35.30000 2002-05-01   9.300000  35.000000 22.4957912 28.692391\n5601 chic  49.0  35.30000 2002-05-02   8.512500  13.833333 31.2284805 18.099123\n5602 chic  46.0  27.00000 2002-05-03   4.300000  15.000000 20.9058977 22.737500\n5603 chic  52.0  34.60000 2002-05-04   9.500000  18.000000 27.7800926 27.212500\n5604 chic  59.0  44.60000 2002-05-05  10.325000  16.000000 33.7847222 18.233333\n5605 chic  68.0  59.80000 2002-05-06  11.000000  17.000000 26.4014694 24.650000\n5606 chic  56.0  44.90000 2002-05-07   6.400000   7.000000 27.5550615 13.945833\n5607 chic  55.0  54.20000 2002-05-08  16.225000  23.800000 14.6794485 19.905303\n5608 chic  58.0  41.80000 2002-05-09   7.350000  28.000000 25.6113124 14.004167\n5609 chic  56.0  28.10000 2002-05-10   9.300000  37.000000 31.4188808 23.250000\n5610 chic  51.0  39.20000 2002-05-11  14.550000  29.500000 32.8463542 21.054167\n5611 chic  48.0  46.80000 2002-05-12  10.700000  17.000000 24.0208333 20.083333\n5612 chic  50.0  40.60000 2002-05-13   9.300000  16.000000 27.6348723 22.710714\n5613 chic  54.0  42.20000 2002-05-14  12.312500  19.166667 22.1915258 29.937500\n5614 chic  58.0  48.20000 2002-05-15  12.700000  59.000000 33.6334267 24.978409\n5615 chic  55.0  50.20000 2002-05-16   8.000000  21.000000 22.4490741 21.418939\n5616 chic  41.0  32.70000 2002-05-17   2.912500   6.000000 26.4095066 13.204167\n5617 chic  44.0  32.50000 2002-05-18   5.750000  15.000000 25.5231481 18.345833\n5618 chic  46.0  35.60000 2002-05-19  10.150000  14.500000 28.1388889 17.966667\n5619 chic  41.0  30.10000 2002-05-20   3.485714   7.666667 31.2750421 12.900595\n5620 chic  45.0  29.80000 2002-05-21   6.400000  16.000000 20.9094203 27.704167\n5621 chic  55.0  37.60000 2002-05-22  14.250000  27.000000 28.3486312 23.074420\n5622 chic  65.0  52.40000 2002-05-23  18.987500  56.500000 33.7650966 24.296429\n5623 chic  54.0  39.10000 2002-05-24   6.700000   7.000000 24.0637077 14.116667\n5624 chic  49.0  46.00000 2002-05-25  11.300000  13.500000 16.3726852 17.912500\n5625 chic  55.0  45.40000 2002-05-26   9.775000  17.000000 25.3240741 20.250000\n5626 chic  64.0  51.00000 2002-05-27  13.900000  21.500000 37.9953704 20.091667\n5627 chic  69.0  57.60000 2002-05-28  27.200000  42.000000 26.1726596 34.948106\n5628 chic  73.0  62.00000 2002-05-29  13.925000  49.000000 24.1001409 25.600000\n5629 chic  75.0  63.70000 2002-05-30  19.100000  56.000000 30.4930556 25.479745\n5630 chic  77.0  56.40000 2002-05-31  10.700000  59.500000 31.5879630 27.033333\n5631 chic  76.0  53.10000 2002-06-01   9.875000  39.166667 40.5763889 24.525000\n5632 chic  62.0  45.60000 2002-06-02   9.700000  22.000000 33.9745370 17.161905\n5633 chic  62.0  56.00000 2002-06-03  18.100000  36.500000 21.8163837 22.636957\n5634 chic  65.0  64.10000 2002-06-04  20.562500  35.000000  8.3394360 38.027899\n5635 chic  56.0  53.90000 2002-06-05  10.850000  11.000000 14.3436997 18.302717\n5636 chic  58.0  51.80000 2002-06-06  11.550000  16.000000 25.1726413 21.294048\n5637 chic  64.0  53.10000 2002-06-07  17.175000  29.000000 22.8748994 32.045833\n5638 chic  71.0  58.60000 2002-06-08  25.000000  45.000000 43.9537037 27.266667\n5639 chic  72.0  59.60000 2002-06-09  30.050000  54.000000 51.7199074 23.587500\n5640 chic  80.0  70.60000 2002-06-10  18.637500  48.000000 28.4845008 22.541667\n5641 chic  76.0  69.50000 2002-06-11   9.600000  21.000000 22.6320451 18.168506\n5642 chic  64.0  60.10000 2002-06-12   9.800000  17.000000 15.8882576 15.563745\n5643 chic  60.0  57.20000 2002-06-13  10.437500  20.833333 13.1978663 17.770833\n5644 chic  61.0  55.70000 2002-06-14   7.100000  15.500000 15.7533853 24.066667\n5645 chic  67.0  54.10000 2002-06-15   7.600000  13.000000 26.5277778 16.358333\n5646 chic  66.0  48.40000 2002-06-16   6.485714  12.500000 24.9296875 17.316667\n5647 chic  67.0  53.50000 2002-06-17  12.400000  27.500000 18.0872962 32.582971\n5648 chic  70.0  55.70000 2002-06-18  15.500000  42.000000 38.2849327 26.000181\n5649 chic  75.0  60.60000 2002-06-19  24.962500  47.666667 45.0124547 29.975000\n5650 chic  82.0  67.40000 2002-06-20  33.000000  80.500000 47.4267311 30.767029\n5651 chic  80.0  69.00000 2002-06-21  31.300000  67.500000 37.3514291 38.541667\n5652 chic  80.0  65.40000 2002-06-22  35.400000  75.500000 46.6250000 35.158333\n5653 chic  82.0  63.50000 2002-06-23  42.500000  65.000000 54.8804348 30.039130\n5654 chic  78.0  63.90000 2002-06-24  34.200000  88.000000 54.4484127 37.985145\n5655 chic  81.0  70.30000 2002-06-25  23.987500  39.833333 19.8884680 33.735985\n5656 chic  79.0  66.40000 2002-06-26   9.900000  26.500000 34.3665459 20.915422\n5657 chic  74.0  64.30000 2002-06-27   8.200000  18.000000 23.5150966 16.556522\n5658 chic  74.0  60.30000 2002-06-28  13.662500  29.000000 17.3104871 25.416667\n5659 chic  74.0  63.60000 2002-06-29  21.800000  37.000000 30.5509259 27.616667\n5660 chic  81.0  73.10000 2002-06-30  20.950000  38.500000 39.4557292 18.516667\n5661 chic  84.0  70.60000 2002-07-01  20.042857  65.000000 23.1740137 19.308333\n5662 chic  84.0  65.80000 2002-07-02  21.600000  69.500000 22.7783816 20.235507\n5663 chic  84.0  70.00000 2002-07-03  28.700000  95.000000 36.3783967 31.369163\n5664 chic  80.0  68.30000 2002-07-04  16.637500  35.500000 33.3776042 14.675000\n5665 chic  75.0  60.70000 2002-07-05   6.700000  16.500000 30.5648148 10.800000\n5666 chic  75.0  61.00000 2002-07-06  17.100000  24.500000 36.3194444 23.908333\n5667 chic  77.0  64.60000 2002-07-07  25.412500  44.600000 51.1435185 27.779167\n5668 chic  81.0  70.40000 2002-07-08  33.100000  64.000000 45.3496926 27.678571\n5669 chic  74.0  70.20000 2002-07-09  12.300000  32.000000 31.5613929 16.886594\n5670 chic  74.0  60.10000 2002-07-10   9.942857  19.000000 31.3040459 10.902355\n5671 chic  69.0  52.90000 2002-07-11   7.300000  17.000000 32.1349638 12.659091\n5672 chic  68.0  53.50000 2002-07-12  10.900000  24.500000 38.7951540 19.794565\n5673 chic  70.0  53.40000 2002-07-13  12.271429  23.800000 44.4687500 21.508333\n5674 chic  72.0  53.00000 2002-07-14  17.100000  27.500000 45.1197917 30.616667\n5675 chic  76.0  60.40000 2002-07-15  26.300000  51.000000 42.8390313 44.934524\n5676 chic  79.0  62.70000 2002-07-16  25.528571  63.000000 42.0976248 36.008333\n5677 chic  78.0  66.30000 2002-07-17  40.900000  91.500000 40.2255435 40.655698\n5678 chic  82.0  66.20000 2002-07-18  38.850000  72.500000 44.9804549 26.069048\n5679 chic  74.0  65.10000 2002-07-19  20.375000  34.833333 27.3751006 18.212500\n5680 chic  76.0  66.70000 2002-07-20  21.900000  39.000000 39.7106481 18.587500\n5681 chic  87.0  74.90000 2002-07-21  21.000000  35.000000 42.1782407 15.108333\n5682 chic  83.0  70.30000 2002-07-22  15.587500  44.000000 33.6712963 22.933333\n5683 chic  70.0  57.40000 2002-07-23   3.000000   7.500000 27.9461554 11.184964\n5684 chic  71.0  52.60000 2002-07-24   5.700000  18.500000 34.0045290 16.287121\n5685 chic  73.0  64.80000 2002-07-25  18.800000  30.200000 27.4955717 30.750000\n5686 chic  79.0  71.70000 2002-07-26  32.400000  51.500000 36.8382649 28.791667\n5687 chic  80.0  73.80000 2002-07-27  17.400000  28.000000 28.9166667 21.358333\n5688 chic  81.0  74.60000 2002-07-28  16.057143  23.500000 28.4930556 17.158333\n5689 chic  77.0  71.40000 2002-07-29  12.300000  24.500000 20.6176347 21.608333\n5690 chic  80.0  68.90000 2002-07-30  13.500000  27.500000 33.5359300 33.966238\n5691 chic  82.0  68.10000 2002-07-31  17.987500  30.833333 34.3534622 34.478220\n5692 chic  85.0  74.00000 2002-08-01  21.300000  56.500000 39.9837963 26.822917\n5693 chic  72.0  62.20000 2002-08-02   6.000000  11.500000 31.2453704 17.518386\n5694 chic  75.0  66.90000 2002-08-03  16.412500  38.500000 40.9305556 23.583333\n5695 chic  82.0  72.10000 2002-08-04  22.900000  47.500000 43.5416667 18.641667\n5696 chic  77.0  68.40000 2002-08-05  12.300000  17.000000 35.7106481 17.929167\n5697 chic  69.0  56.60000 2002-08-06   3.637500  11.000000 23.5653363  9.554167\n5698 chic  67.0  54.90000 2002-08-07   6.200000  12.000000 25.4704106 14.487500\n5699 chic  69.0  58.10000 2002-08-08   8.900000  20.500000 29.1932916 19.005736\n5700 chic  70.0  58.40000 2002-08-09  16.537500  33.500000 39.4067824 27.920000\n5701 chic  74.0  62.60000 2002-08-10  27.850000  41.500000 47.8935185 29.908333\n5702 chic  80.0  67.40000 2002-08-11  30.800000  46.000000 51.0833333 20.691667\n5703 chic  79.0  68.60000 2002-08-12  23.050000  40.000000 41.8330680 19.642857\n5704 chic  76.0  70.00000 2002-08-13  12.700000  29.500000 29.8009259 19.897134\n5705 chic  70.0  63.80000 2002-08-14   9.400000  24.500000 15.8346417 19.519264\n5706 chic  74.0  68.00000 2002-08-15  13.912500  39.500000 25.5449605 19.225379\n5707 chic  75.0  69.00000 2002-08-16  12.000000  24.000000 14.0427632 22.983333\n5708 chic  76.0  69.30000 2002-08-17  12.900000  32.000000 23.5138889 12.491667\n5709 chic  66.0  53.40000 2002-08-18   7.700000  19.166667 24.5069444 17.883333\n5710 chic  66.0  61.30000 2002-08-19   9.200000  12.000000 19.3902778 19.079167\n5711 chic  66.0  58.00000 2002-08-20  10.400000  22.500000 19.7077295 25.419565\n5712 chic  75.0  70.00000 2002-08-21  23.075000  41.000000 31.3570670 21.029167\n5713 chic  74.0  69.90000 2002-08-22  10.700000  16.000000 25.5067432 26.300000\n5714 chic  73.0  70.20000 2002-08-23  18.350000  18.000000 20.3838567 22.961730\n5715 chic  74.0  67.80000 2002-08-24  16.687500  27.833333 21.3865741 22.867301\n5716 chic  74.0  67.70000 2002-08-25  17.100000  22.500000 28.1782407 21.572917\n5717 chic  74.0  65.60000 2002-08-26  11.400000  17.000000 25.0231481 15.755208\n5718 chic  74.0  68.00000 2002-08-27  14.112500  23.000000 32.8172303 16.119792\n5719 chic  72.0  64.70000 2002-08-28  10.800000  20.000000 27.6018519 13.652273\n5720 chic  70.0  62.70000 2002-08-29  13.600000  24.000000 38.2792874 19.507246\n5721 chic  73.0  63.30000 2002-08-30  20.528571  35.400000 42.2069243 22.629167\n5722 chic  73.0  63.50000 2002-08-31  24.300000  36.000000 45.9976852 21.391667\n5723 chic  74.0  66.20000 2002-09-01  31.400000  45.000000 37.7870370 24.566667\n5724 chic  74.0  68.80000 2002-09-02  22.171429  46.500000 43.8009259 14.370833\n5725 chic  72.0  57.30000 2002-09-03   8.900000  17.500000 25.3721820 20.189394\n5726 chic  72.0  57.00000 2002-09-04   8.600000  34.500000 21.1584138 27.596196\n5727 chic  72.0  60.50000 2002-09-05   7.900000  24.000000 25.2396062 18.859601\n5728 chic  71.0  61.00000 2002-09-06  21.000000  33.000000 31.6829710 37.279167\n5729 chic  74.0  61.80000 2002-09-07  31.950000  59.500000 38.8203704 40.058333\n5730 chic  76.0  66.00000 2002-09-08  44.042857  65.000000 42.8842593 39.625000\n5731 chic  78.0  69.50000 2002-09-09  39.400000  70.500000 29.0620974 45.258333\n5732 chic  76.0  64.90000 2002-09-10  25.400000  75.500000 27.1868961 29.116667\n5733 chic  64.0  50.80000 2002-09-11   7.157143  15.500000 22.8497383 19.510417\n5734 chic  64.0  52.60000 2002-09-12  13.550000  47.000000 16.9884900 34.601490\n5735 chic  64.0  55.00000 2002-09-13  15.800000  51.000000 25.6544686 38.203804\n5736 chic  68.0  57.30000 2002-09-14  23.814286  41.000000 37.4768519 32.927083\n5737 chic  63.0  56.40000 2002-09-15   5.950000   9.000000 26.9467593 11.072917\n5738 chic  62.0  51.90000 2002-09-16   9.200000  34.000000 14.7258454 32.937500\n5739 chic  65.0  56.20000 2002-09-17  20.562500  41.333333 24.5718142 39.238095\n5740 chic  71.0  66.10000 2002-09-18  21.300000  31.000000 25.0585017 28.683053\n5741 chic  76.0  71.50000 2002-09-19  12.450000  42.000000 14.3146410 20.989583\n5742 chic  67.0  66.60000 2002-09-20   5.714286  40.000000  9.6382850 17.916667\n5743 chic  69.0  56.70000 2002-09-21   8.600000  18.000000 24.0755208 19.031250\n5744 chic  56.0  45.20000 2002-09-22   5.250000  12.500000 17.8177083 18.916667\n5745 chic  54.0  41.60000 2002-09-23   7.600000  21.000000 17.3287879 26.805060\n5746 chic  52.0  41.50000 2002-09-24   5.250000  15.000000 18.2843196 22.677083\n5747 chic  59.0  47.60000 2002-09-25  10.450000  37.000000 18.4154772 27.525856\n5748 chic  62.0  53.80000 2002-09-26  29.914286  53.000000 21.4684103 36.554924\n5749 chic  60.0  55.20000 2002-09-27  13.500000  21.500000 27.1701766 20.881250\n5750 chic  62.0  57.00000 2002-09-28  29.400000  38.000000 28.3880208 21.833333\n5751 chic  72.0  63.70000 2002-09-29  26.957143  40.333333 36.2760417 16.843750\n5752 chic  77.0  56.90000 2002-09-30  19.500000  56.500000 36.5648292 22.575893\n5753 chic  75.0  64.80000 2002-10-01  23.700000  45.000000 25.5442708 31.870265\n5754 chic  66.0  62.70000 2002-10-02  15.212500  23.000000 16.9766757 23.604167\n5755 chic  61.0  58.50000 2002-10-03  13.300000  23.500000 14.3696784 17.208333\n5756 chic  63.0  59.30000 2002-10-04  11.900000  19.000000 15.1571558 17.416667\n5757 chic  55.0  44.20000 2002-10-05   8.162500  17.666667 13.2708333 20.364583\n5758 chic  58.0  45.70000 2002-10-06   7.500000  14.000000 23.1484375 15.562500\n5759 chic  48.0  33.40000 2002-10-07   7.100000  14.500000 13.9973958 24.884770\n5760 chic  56.0  37.40000 2002-10-08   9.375000  35.500000  9.5892857 30.895833\n5761 chic  57.0  48.50000 2002-10-09  15.600000  44.500000  9.5737401 31.078598\n5762 chic  62.0  51.10000 2002-10-10  22.400000  51.500000 10.5729167 33.760417\n5763 chic  61.0  50.60000 2002-10-11  30.485714  54.833333 10.7070879 34.666667\n5764 chic  61.0  54.10000 2002-10-12  25.700000  28.500000 14.2187500 21.472222\n5765 chic  42.0  27.50000 2002-10-13   5.200000   9.500000 15.5598958 17.416667\n5766 chic  44.0  27.10000 2002-10-14  10.114286  27.500000 10.1692708 29.166667\n5767 chic  50.0  33.50000 2002-10-15  11.600000  30.000000 11.1271513 29.270202\n5768 chic  42.0  30.90000 2002-10-16   8.600000  12.500000 14.8320879 26.602092\n5769 chic  41.0  35.80000 2002-10-17  11.700000  20.500000  6.2156929 28.222222\n5770 chic  49.0  42.00000 2002-10-18  15.200000  42.000000  7.1250000 25.638889\n5771 chic  42.0  32.40000 2002-10-19   7.600000  10.000000 14.8229167 19.902778\n5772 chic  41.0  31.20000 2002-10-20  16.280000  19.000000 11.8776042 24.736111\n5773 chic  45.0  35.30000 2002-10-21  18.150000  42.000000 11.3255208 32.502525\n5774 chic  44.0  34.80000 2002-10-22  14.400000  21.000000  8.6073370 23.838164\n5775 chic  43.0  37.80000 2002-10-23   8.012500  14.333333 12.7129917 20.195652\n5776 chic  44.0  38.30000 2002-10-24   7.500000  11.000000 11.5936853 21.319444\n5777 chic  45.0  43.20000 2002-10-25  19.900000  29.000000  5.3697917 21.634964\n5778 chic  43.0  39.80000 2002-10-26  15.862500  14.500000  4.1953125 20.114583\n5779 chic  42.0  31.00000 2002-10-27   9.300000   9.000000 14.0076122 16.802083\n5780 chic  44.0  36.30000 2002-10-28   8.800000  11.000000 18.0496894 16.812500\n5781 chic  44.0  34.50000 2002-10-29   7.875000  12.333333 18.1488095 16.257440\n5782 chic  45.0  35.00000 2002-10-30   7.433333   9.000000 20.1616848 20.138134\n5783 chic  40.0  32.10000 2002-10-31  15.900000  16.000000  8.9827899 26.125000\n5784 chic  33.0  19.90000 2002-11-01  11.475000  18.500000 11.7893939 21.934783\n5785 chic  38.0  22.60000 2002-11-02  10.800000  21.000000 11.0416667 21.822917\n5786 chic  36.0  27.90000 2002-11-03  19.200000  20.000000  6.9083333 22.687500\n5787 chic  39.0  30.00000 2002-11-04  25.485714  36.666667  6.9447826 28.349702\n5788 chic  38.0  35.40000 2002-11-05  26.900000  29.500000  2.3854167 28.740036\n5789 chic  40.0  33.70000 2002-11-06  26.600000  27.000000  8.3451087 23.375000\n5790 chic  44.0  35.60000 2002-11-07  19.614286  51.500000 11.0317029 26.480461\n5791 chic  56.0  36.70000 2002-11-08   7.500000  39.000000 22.3645833 21.979167\n5792 chic  58.0  52.70000 2002-11-09  15.300000  37.000000 23.3333333 14.083333\n5793 chic  51.0  53.10000 2002-11-10  18.062500  26.500000 14.7291667 12.468750\n5794 chic  39.0  34.50000 2002-11-11  10.800000  24.000000  4.1770833 16.593750\n5795 chic  40.0  30.50000 2002-11-12  17.150000  21.000000  6.0406785 22.958333\n5796 chic  46.0  34.20000 2002-11-13  15.500000  36.500000  6.7798913 23.461310\n5797 chic  47.0  37.90000 2002-11-14   9.200000  17.500000 12.1979167 21.439764\n5798 chic  38.0  28.60000 2002-11-15   4.650000   4.000000 29.1041667 14.250000\n5799 chic  34.0  25.80000 2002-11-16   4.100000   7.166667 27.3645833 14.447917\n5800 chic  32.0  25.80000 2002-11-17  10.900000  11.500000 14.6354167 25.072917\n5801 chic  35.0  30.40000 2002-11-18  27.650000  36.500000  2.8840580 33.195076\n5802 chic  44.0  33.50000 2002-11-19  17.885714  22.000000  5.4954710 24.177083\n5803 chic  44.0  34.00000 2002-11-20  13.800000  32.500000  3.3020833 30.406250\n5804 chic  39.0  32.80000 2002-11-21  13.200000  28.500000 11.1050725 24.449275\n5805 chic  31.0  24.90000 2002-11-22   8.487500  15.500000 12.4583333 28.350543\n5806 chic  39.0  28.50000 2002-11-23  14.600000  22.000000  8.0833333 25.093750\n5807 chic  32.0  24.40000 2002-11-24   7.100000  10.500000 10.6979167 19.364583\n5808 chic  26.0  18.10000 2002-11-25   9.585714  19.500000  6.8645833 29.489583\n5809 chic  25.0  21.60000 2002-11-26  22.350000  25.500000  2.7930254 37.534226\n5810 chic  22.0  16.80000 2002-11-27  21.400000  23.000000  6.0040761 35.473214\n5811 chic  24.0  20.20000 2002-11-28  24.814286  32.500000  7.9479167 23.614583\n5812 chic  40.0  29.40000 2002-11-29   6.200000  17.000000 12.4479167 15.114583\n5813 chic  29.0  15.30000 2002-11-30   4.700000  15.000000 22.6458333 11.906250\n5814 chic  25.0   9.80000 2002-12-01   6.550000  18.000000 14.9583333 17.291667\n5815 chic  29.0  22.20000 2002-12-02   7.800000  14.500000 13.8854167 26.875947\n5816 chic  19.0  14.60000 2002-12-03  11.400000  24.000000 11.8786232 36.635417\n5817 chic  19.0  12.80000 2002-12-04  18.462500  35.666667  5.1250000 44.468297\n5818 chic  20.0  12.60000 2002-12-05  20.000000  24.000000  9.3229167 30.135417\n5819 chic  21.0  13.60000 2002-12-06  19.800000  41.000000  5.5018939 25.827899\n5820 chic  35.0  25.80000 2002-12-07  20.528571  25.500000  7.3958333 21.479167\n5821 chic  22.0  10.90000 2002-12-08   8.800000  18.500000 14.1250000 24.552083\n5822 chic  20.0  10.30000 2002-12-09  19.900000  51.000000  6.1512681 40.920002\n5823 chic  34.0  18.80000 2002-12-10  20.800000  43.500000  3.8750000 38.218750\n5824 chic  32.0  17.40000 2002-12-11  27.300000  75.000000  3.2432065 47.760417\n5825 chic  34.0  30.00000 2002-12-12  28.650000  30.000000  2.0964674 28.335038\n5826 chic  36.0  33.30000 2002-12-13  37.937500  35.000000  3.4207428 26.013393\n5827 chic  35.0  30.10000 2002-12-14  30.400000  34.500000  6.2187500 20.145833\n5828 chic  38.0  30.00000 2002-12-15  13.800000  19.500000 12.2395833 16.458333\n5829 chic  32.0  22.30000 2002-12-16   6.314286  14.000000 23.2187500 16.713315\n5830 chic  34.0  27.10000 2002-12-17  16.600000  27.500000  8.8532609 22.354167\n5831 chic  46.0  47.50000 2002-12-18  15.100000  23.000000 11.8161232 22.385417\n5832 chic  45.0  36.10000 2002-12-19  13.687500  17.000000  7.0144928 15.375000\n5833 chic  32.0  26.00000 2002-12-20   6.800000  12.000000 11.0312500 12.614583\n5834 chic  31.0  24.10000 2002-12-21   8.500000  13.000000 14.7187500 14.343750\n5835 chic  28.0  20.40000 2002-12-22   9.057143  15.000000 15.1145833 11.552083\n5836 chic  28.0  16.60000 2002-12-23   9.700000  13.500000 12.6770833 17.906250\n5837 chic  26.0  21.10000 2002-12-24  13.700000  15.000000 11.3541667 25.531250\n5838 chic  26.0  22.40000 2002-12-25   7.675000  10.000000 18.2916667 12.510417\n5839 chic  24.0  18.50000 2002-12-26  18.700000  21.500000  9.1666667 19.743371\n5840 chic  26.0  22.70000 2002-12-27  25.900000  32.500000  4.8111413 28.260417\n5841 chic  31.0  28.20000 2002-12-28  33.342857  36.666667  5.1250000 25.718750\n5842 chic  31.0  29.30000 2002-12-29  42.300000  39.000000  6.6354167 25.750000\n5843 chic  49.0  43.50000 2002-12-30  16.300000  23.000000 10.4166667 19.907197\n5844 chic  35.0  20.70000 2002-12-31  11.575000  15.000000 10.2395833 24.395833\n5845 chic  30.0  22.50000 2003-01-01   4.200000   7.000000 26.3020833 10.916667\n5846 chic  30.0  25.00000 2003-01-02   9.400000   7.500000 22.6743659 19.367424\n5847 chic  27.0  20.90000 2003-01-03  12.657143  21.800000 10.0579710 32.669192\n5848 chic  25.0  21.60000 2003-01-04  25.400000  25.500000  5.7500000 33.611111\n5849 chic  31.0  30.20000 2003-01-05  32.900000  24.500000  2.5000000 26.027778\n5850 chic  30.0  21.50000 2003-01-06  11.042857  15.000000 13.6875000 27.599206\n5851 chic  37.0  27.70000 2003-01-07  16.300000  21.500000  8.6354167 18.958333\n5852 chic  46.0  30.60000 2003-01-08  11.400000  21.500000  9.1229167 20.402778\n5853 chic  37.0  23.80000 2003-01-09   6.657143  14.800000 17.5851449 20.958333\n5854 chic  21.0   9.10000 2003-01-10   9.600000  18.000000 20.0394022 19.430556\n5855 chic  14.0   2.30000 2003-01-11   6.200000  13.000000 20.3229167 15.875000\n5856 chic  21.0   8.10000 2003-01-12   8.957143  20.500000 14.3958333 22.638889\n5857 chic  24.0   5.70000 2003-01-13  11.700000  18.500000 17.4184783 24.160714\n5858 chic  14.0   5.80000 2003-01-14         NA  22.000000 14.6666667 24.472222\n5859 chic  13.0   1.30000 2003-01-15  15.600000  29.800000 11.5937500 31.722222\n5860 chic  22.0   4.60000 2003-01-16         NA  37.000000  9.3020833 38.550000\n5861 chic  17.0   1.90000 2003-01-17  10.200000  29.000000 17.8093297 29.425505\n5862 chic  15.0   6.60000 2003-01-18  15.650000  22.000000 16.8854167 22.791667\n5863 chic  16.0   8.90000 2003-01-19  11.700000  27.000000 16.1250000 21.166667\n5864 chic  17.0  -0.70000 2003-01-20  10.900000  42.500000 20.2500000 25.722222\n5865 chic  12.0  -5.20000 2003-01-21  11.785714  29.600000 17.4796196 27.956349\n5866 chic   9.0  -5.30000 2003-01-22  12.500000  20.000000 18.8607955 23.402778\n5867 chic   4.0  -9.30000 2003-01-23  11.100000  22.000000 18.7291667 24.932971\n5868 chic   9.0  -4.00000 2003-01-24  16.887500  31.000000 10.3745471 29.252193\n5869 chic  25.0  11.50000 2003-01-25         NA  30.000000 13.2708333 21.736111\n5870 chic  10.0  -2.50000 2003-01-26   9.000000  32.000000 24.5833333 20.180556\n5871 chic   7.0   0.10000 2003-01-27  19.242857  37.250000  9.7056159 40.458333\n5872 chic  26.0  20.50000 2003-01-28  29.400000  53.000000  4.6109601 36.902778\n5873 chic  21.0  17.10000 2003-01-29  19.800000  19.000000 11.4904891 33.513889\n5874 chic  25.0  20.30000 2003-01-30  22.800000  30.000000  8.2291667 35.247475\n5875 chic  34.0  30.40000 2003-01-31  24.500000  40.000000  3.4479167 26.958333\n5876 chic  33.0  29.50000 2003-02-01  30.300000  29.000000  6.6770833 22.605556\n5877 chic  37.0  33.90000 2003-02-02  35.228571  44.750000  6.5833333 20.458333\n5878 chic  39.0  37.00000 2003-02-03  30.400000  46.000000  3.6417572 29.334596\n5879 chic  21.0  12.50000 2003-02-04   8.900000  15.000000 20.5240036 16.513889\n5880 chic  18.0   4.50000 2003-02-05  11.650000  27.000000 13.5416667 27.375000\n5881 chic  24.0  13.90000 2003-02-06         NA  19.000000 14.2635870 26.486111\n5882 chic  13.0   1.80000 2003-02-07   9.300000  19.000000 18.0312500 23.324275\n5883 chic  20.0   9.50000 2003-02-08  12.937500  22.666667 19.0208333 18.555556\n5884 chic  15.0   0.00000 2003-02-09         NA  18.000000 21.1562500 22.083333\n5885 chic  18.0   9.80000 2003-02-10         NA  17.000000 15.3740942 25.119949\n5886 chic  19.0   4.90000 2003-02-11  11.171429  39.000000 19.3333333 21.458333\n5887 chic  13.0   0.30000 2003-02-12  13.100000  34.000000 22.4687500 21.388889\n5888 chic  22.0   7.40000 2003-02-13  18.500000  38.000000 12.4583333 35.694444\n5889 chic  25.0  19.90000 2003-02-14  27.628571  60.500000 12.7653986 47.140873\n5890 chic  24.0  15.10000 2003-02-15   5.300000   9.500000 34.0833333 12.833333\n5891 chic  23.0  12.90000 2003-02-16   3.800000   9.000000 34.7812500 12.444444\n5892 chic  27.0  21.80000 2003-02-17  14.350000  20.500000 22.3645833 27.625000\n5893 chic  31.0  27.40000 2003-02-18  27.500000  28.000000 10.5480072 30.867063\n5894 chic  33.0  19.60000 2003-02-19  15.500000  31.500000 13.0000000 33.180556\n5895 chic  39.0  23.80000 2003-02-20  15.400000  24.000000 11.1096014 35.527778\n5896 chic  37.0  24.80000 2003-02-21  28.600000  45.500000  5.1666667 40.597222\n5897 chic  28.0  24.20000 2003-02-22  13.900000  19.000000 21.0729167 21.027778\n5898 chic  20.0   7.10000 2003-02-23   6.737500  15.500000 29.8958333 17.125000\n5899 chic  15.0   8.80000 2003-02-24  16.100000  21.500000 19.4823370 28.444444\n5900 chic   8.0  -2.50000 2003-02-25  30.900000  35.500000 11.5366848 37.708333\n5901 chic  18.0   9.40000 2003-02-26  28.912500  37.200000 11.6553030 41.869048\n5902 chic  21.0  12.90000 2003-02-27         NA  37.000000 13.8750000 43.369565\n5903 chic  27.0  15.40000 2003-02-28  46.200000  62.500000  8.7753623 57.564394\n5904 chic    NA  22.90000 2003-03-01  47.737500  47.500000  9.4166667 37.444444\n5905 chic  21.0  15.00000 2003-03-02  18.800000  19.500000 21.1458333 17.694444\n5906 chic  20.0  14.60000 2003-03-03  15.200000  24.500000 13.5018116 33.263889\n5907 chic  25.0  23.30000 2003-03-04  20.257143  26.600000 13.2672101 32.972222\n5908 chic  22.0  15.60000 2003-03-05  14.100000  12.500000 30.4089674 22.583333\n5909 chic  20.0  16.80000 2003-03-06  21.300000  20.000000 25.5208333 33.638889\n5910 chic  29.0  25.50000 2003-03-07  27.562500  34.000000 10.9433877 30.042730\n5911 chic  28.0  22.30000 2003-03-08  28.200000  27.000000 13.6979167 28.694444\n5912 chic  10.0  -4.20000 2003-03-09   7.800000  11.500000 31.7395833 13.208333\n5913 chic  11.0   0.90000 2003-03-10  12.714286  27.600000 20.8777174 28.769841\n5914 chic  31.0  18.40000 2003-03-11  22.900000  47.000000 15.5979084 29.527778\n5915 chic  36.0  30.50000 2003-03-12  32.100000  42.000000 15.7395833 29.500000\n5916 chic  31.0  24.40000 2003-03-13  14.000000  13.000000 30.0729167 24.380435\n5917 chic  39.0  23.60000 2003-03-14         NA  44.000000 12.8645833 41.394444\n5918 chic  45.0  37.30000 2003-03-15  22.050000  33.500000  6.9895833 36.263889\n5919 chic  55.0  47.00000 2003-03-16  36.428571  43.000000 18.1770833 29.361111\n5920 chic  57.0  45.60000 2003-03-17  33.700000  33.500000 13.6064312 40.319115\n5921 chic  41.0  38.20000 2003-03-18  37.200000  44.500000 28.5828804 27.538889\n5922 chic  43.0  36.40000 2003-03-19  28.062500  30.500000 21.2187500 27.791667\n5923 chic  54.0  47.60000 2003-03-20         NA  39.500000  7.9062500 33.767857\n5924 chic  44.0  35.00000 2003-03-21   8.300000  15.500000 16.9017210 20.399471\n5925 chic  43.0  35.20000 2003-03-22  15.600000  22.400000 17.2916667 18.831349\n5926 chic  52.0  34.70000 2003-03-23  20.650000  36.000000 17.9479167 26.626389\n5927 chic  58.0  41.00000 2003-03-24  15.100000  49.000000 26.7753623 32.416667\n5928 chic  49.0  33.50000 2003-03-25   8.800000  23.000000 19.5416667 31.594444\n5929 chic  45.0  28.70000 2003-03-26         NA  45.500000 19.1622024 38.326087\n5930 chic  54.0  33.80000 2003-03-27  14.500000  29.500000 22.1562500 31.236111\n5931 chic  49.0  42.70000 2003-03-28  11.800000  18.000000 18.4737319 19.111111\n5932 chic  32.0  22.30000 2003-03-29         NA   8.000000 30.5000000 15.625000\n5933 chic  33.0  20.90000 2003-03-30         NA  13.000000 19.4791667 28.138889\n5934 chic  40.0  26.70000 2003-03-31  13.475000  30.000000 20.3677536 27.674242\n5935 chic  60.0  40.00000 2003-04-01  25.300000  50.500000 27.0535714 28.413462\n5936 chic  54.0  38.40000 2003-04-02  29.800000  51.000000 19.7172619 31.817029\n5937 chic  42.0  37.90000 2003-04-03  38.962500  57.000000  7.4135611 23.548309\n5938 chic  36.0  35.10000 2003-04-04         NA  10.000000  7.5367495 20.597222\n5939 chic  29.0  20.40000 2003-04-05   6.000000   8.500000 32.1994048 12.263889\n5940 chic  34.0  23.20000 2003-04-06   6.557143   8.000000 37.8095238  8.888889\n5941 chic  32.0  30.30000 2003-04-07   9.600000  12.000000 25.4076087 16.944444\n5942 chic  32.0  28.20000 2003-04-08  13.000000  10.000000 31.8095238 19.248188\n5943 chic  36.0  25.70000 2003-04-09   7.557143  15.000000 34.4690735 30.013889\n5944 chic  42.0  21.80000 2003-04-10   8.900000  28.000000 23.0714286 43.258838\n5945 chic  51.0  26.00000 2003-04-11  16.900000  58.500000 22.9523810 43.437500\n5946 chic  43.0  29.00000 2003-04-12   3.985714   6.500000 36.9047619 14.108333\n5947 chic  48.0  32.90000 2003-04-13  11.700000  22.000000 30.1458333 26.166667\n5948 chic  67.0  39.30000 2003-04-14  16.800000  66.500000 39.6344893 19.797348\n5949 chic  75.0  42.90000 2003-04-15  12.214286  61.400000 40.4689441 20.404971\n5950 chic  55.0  36.80000 2003-04-16  10.700000  35.000000 27.4642857 21.914141\n5951 chic  42.0  33.50000 2003-04-17  12.650000  22.000000 23.3203463 23.222222\n5952 chic  43.0  35.10000 2003-04-18  17.325000  17.000000 22.4111025 23.611111\n5953 chic  60.0  50.00000 2003-04-19  16.700000  39.000000 25.7113095 23.888889\n5954 chic  59.0  49.50000 2003-04-20   8.100000  12.500000 33.8035714 12.083333\n5955 chic  47.0  37.60000 2003-04-21   6.612500  11.200000 20.0781574 17.208937\n5956 chic  46.0  27.50000 2003-04-22   6.600000  13.500000 31.7797619 28.569444\n5957 chic  43.0  23.00000 2003-04-23         NA  16.500000 32.1250000 35.204545\n5958 chic  49.0  28.40000 2003-04-24  13.542857  37.000000 27.2886905 34.722222\n5959 chic  50.0  28.50000 2003-04-25   7.850000  29.500000 34.2573052 28.483333\n5960 chic  48.0  24.00000 2003-04-26   5.800000  15.500000 36.1101190 26.569444\n5961 chic  56.0  28.00000 2003-04-27  13.512500  34.800000 39.6428571 33.333333\n5962 chic  66.0  39.50000 2003-04-28  16.800000  59.000000 28.0705228 41.678571\n5963 chic  54.0  38.40000 2003-04-29  10.300000  22.000000 27.8341097 35.761111\n5964 chic  57.0  48.00000 2003-04-30  19.114286  24.500000 14.1309524 37.592172\n5965 chic  50.0  47.40000 2003-05-01         NA  10.500000 15.9464286 27.552083\n5966 chic  45.0  27.40000 2003-05-02   7.200000  12.000000 37.4107143 18.473958\n5967 chic  46.0  26.30000 2003-05-03   7.642857  16.600000 31.5267857 23.312500\n5968 chic  48.0  35.00000 2003-05-04  12.400000  19.500000 29.5476190 21.041667\n5969 chic  61.0  51.90000 2003-05-05  11.300000  18.000000 30.9406056 18.686282\n5970 chic  60.0  47.10000 2003-05-06   8.928571  20.500000 28.9900362 24.781703\n5971 chic  53.0  46.60000 2003-05-07  14.300000  19.000000 26.8660553 24.005208\n5972 chic  55.0  47.80000 2003-05-08         NA  23.000000 23.4713615 25.093750\n5973 chic  69.0  56.80000 2003-05-09  15.075000  34.800000 25.7233922 32.510417\n5974 chic  65.0  57.90000 2003-05-10  15.700000  21.500000 26.4479167 30.072917\n5975 chic  60.0  44.50000 2003-05-11         NA   8.500000 22.8995536  7.947917\n5976 chic  59.0  38.30000 2003-05-12   5.657143  30.500000 31.2971735 20.700758\n5977 chic  61.0  35.80000 2003-05-13  13.750000  22.000000 26.2274359 29.148551\n5978 chic  53.0  44.20000 2003-05-14  16.200000  25.000000 17.0272871 38.218750\n5979 chic  52.0  45.40000 2003-05-15  13.000000  19.400000 35.5729167 22.359375\n5980 chic  55.0  45.60000 2003-05-16  19.100000  21.000000 30.4505208 28.972335\n5981 chic  59.0  50.30000 2003-05-17  26.400000  21.500000 35.6744792 17.593750\n5982 chic  60.0  52.30000 2003-05-18  22.628571  22.000000 30.7109375 15.364583\n5983 chic  66.0  61.40000 2003-05-19  37.300000  40.500000 13.2149004 22.588542\n5984 chic  58.0  45.30000 2003-05-20  11.300000  14.000000 24.9531250 17.765625\n5985 chic  51.0  36.00000 2003-05-21   4.750000  12.000000 20.9437274 14.843750\n5986 chic  50.0  33.60000 2003-05-22         NA  17.500000 31.2442255 23.499256\n5987 chic  53.0  35.20000 2003-05-23  10.800000  24.500000 31.3932292 33.082927\n5988 chic  57.0  38.70000 2003-05-24   9.700000  20.000000 33.8645833 23.000000\n5989 chic  57.0  42.80000 2003-05-25   6.800000  10.000000 32.7187500 14.510417\n5990 chic  59.0  44.80000 2003-05-26   8.300000  12.500000 28.1302083 18.411458\n5991 chic  62.0  46.30000 2003-05-27  10.214286  25.000000 21.1617671 28.245739\n5992 chic  65.0  52.00000 2003-05-28  20.700000  50.500000 16.2210557 36.030438\n5993 chic  58.0  46.80000 2003-05-29  10.100000  17.000000 15.8651495 26.005208\n5994 chic  58.0  51.80000 2003-05-30  17.512500  46.500000 17.7474267 36.156250\n5995 chic  48.0  42.70000 2003-05-31   6.200000   9.500000 28.4244792 15.333333\n5996 chic  51.0  34.40000 2003-06-01   4.800000  13.000000 26.3750000 22.500000\n5997 chic  53.0  42.80000 2003-06-02  16.800000  31.000000 19.2054924 37.637784\n5998 chic  57.0  46.90000 2003-06-03  24.700000  18.500000 38.9730525 30.192708\n5999 chic  58.0  41.80000 2003-06-04  11.300000  25.000000 31.8437500 30.609375\n6000 chic  63.0  44.90000 2003-06-05  16.714286  39.000000 27.7083333 41.505952\n6001 chic  61.0  51.70000 2003-06-06  25.500000  55.000000 22.7812500 45.916667\n6002 chic  66.0  53.30000 2003-06-07  19.400000  28.000000 38.8932292 26.937500\n6003 chic  62.0  56.10000 2003-06-08  10.271429  16.000000 26.2005208 20.364583\n6004 chic  65.0  53.20000 2003-06-09   9.100000  22.500000 32.8044508 21.875000\n6005 chic  66.0  60.30000 2003-06-10  15.100000  36.000000 30.4322917 31.833333\n6006 chic  61.0  52.60000 2003-06-11   9.742857  11.500000 31.1901042 16.726935\n6007 chic  61.0  55.10000 2003-06-12  17.500000  22.000000 28.4665061 24.690476\n6008 chic  64.0  58.30000 2003-06-13         NA  21.000000 21.9270833 28.598958\n6009 chic  65.0  54.70000 2003-06-14  10.125000  19.800000 33.9166667 21.807292\n6010 chic  66.0  54.40000 2003-06-15   8.600000  13.500000 31.0468750 13.447917\n6011 chic  66.0  48.90000 2003-06-16  11.600000  22.000000 34.0840127 24.354455\n6012 chic  67.0  47.20000 2003-06-17  15.750000  38.500000 42.6547060 38.439538\n6013 chic  74.0  58.70000 2003-06-18  25.600000  75.000000 32.9677413 43.714583\n6014 chic  60.0  39.80000 2003-06-19   5.600000   9.000000 33.1667696 11.375000\n6015 chic  59.0  40.90000 2003-06-20   6.728571  22.400000 27.3307292 22.447917\n6016 chic  64.0  46.90000 2003-06-21  12.900000  28.000000 25.5260417 30.083333\n6017 chic  70.0  51.70000 2003-06-22  20.000000  38.000000 40.0078125 32.541667\n6018 chic  75.0  55.40000 2003-06-23  22.162500  52.500000 43.3460145 32.510890\n6019 chic  79.0  62.40000 2003-06-24         NA  68.500000 56.1660800 26.864583\n6020 chic  82.0  65.10000 2003-06-25  33.900000  66.000000 56.1366621 22.949337\n6021 chic  68.0  56.00000 2003-06-26   6.742857  18.600000 25.4809783 15.625000\n6022 chic  70.0  51.60000 2003-06-27  11.500000  34.000000 33.4479167 20.927083\n6023 chic  73.0  60.60000 2003-06-28  11.300000  25.000000 35.2682292 20.687500\n6024 chic  74.0  56.60000 2003-06-29   9.775000  22.500000 29.3541667 21.447917\n6025 chic  72.0  53.90000 2003-06-30  12.700000  50.000000 28.2216938 32.926178\n6026 chic  73.0  53.40000 2003-07-01  19.850000  40.500000 42.0933589 31.552083\n6027 chic  75.0  55.50000 2003-07-02  22.385714  45.600000 50.2056159 34.748835\n6028 chic  79.0  65.40000 2003-07-03  24.050000  71.500000 35.3435236 34.723958\n6029 chic  84.0  68.40000 2003-07-04  32.900000  47.500000 45.6614583 21.343750\n6030 chic  78.0  66.20000 2003-07-05  18.271429  24.500000 50.8619792 18.713542\n6031 chic  78.0  68.60000 2003-07-06  13.900000  26.500000 40.9322917 16.411458\n6032 chic  79.0  70.80000 2003-07-07  12.750000  42.000000 25.2511322 23.828125\n6033 chic  72.0  64.60000 2003-07-08   8.612500  18.500000 24.0963542 22.442482\n6034 chic  69.0  61.20000 2003-07-09   7.600000  16.500000 30.0947176 17.816288\n6035 chic  73.0  63.50000 2003-07-10   6.800000  14.500000 26.0141531 15.661458\n6036 chic  69.0  56.50000 2003-07-11   5.662500  18.000000 22.3973652 15.741395\n6037 chic  71.0  54.50000 2003-07-12   8.400000  18.000000 22.9479167 21.812500\n6038 chic  70.0  56.30000 2003-07-13  15.200000  27.500000 31.3958333 28.354167\n6039 chic  70.0  58.90000 2003-07-14  22.912500  35.800000 31.4403306 31.786458\n6040 chic  77.0  64.40000 2003-07-15         NA  25.000000 39.3020833 17.843750\n6041 chic  72.0  57.10000 2003-07-16   8.700000  19.000000 21.1764040 26.128170\n6042 chic  75.0  65.10000 2003-07-17  14.985714  35.500000 29.9040987 29.155844\n6043 chic  66.0  53.20000 2003-07-18   6.200000  11.500000 26.1203578 16.070076\n6044 chic  68.0  53.20000 2003-07-19   9.000000  22.000000 31.1354167 24.395833\n6045 chic  76.0  65.40000 2003-07-20  14.485714  26.750000 30.7213542 20.666667\n6046 chic  75.0  64.40000 2003-07-21  10.000000  18.000000 35.6677989 18.290179\n6047 chic  68.0  58.20000 2003-07-22   5.800000   9.500000 21.2785326  9.916193\n6048 chic  67.0  53.10000 2003-07-23   4.412500   8.500000 19.4765625 11.947917\n6049 chic  67.0  47.80000 2003-07-24   6.400000  25.000000 15.7974411 21.166214\n6050 chic  71.0  57.70000 2003-07-25  17.500000  52.500000 32.2813632 24.875000\n6051 chic  77.0  63.20000 2003-07-26  23.900000  37.800000 49.0651042 14.270833\n6052 chic  74.0  63.10000 2003-07-27  14.700000  21.000000 32.1171875 11.802083\n6053 chic  65.0  58.00000 2003-07-28  10.200000  22.000000 22.1599864 16.447043\n6054 chic  68.0  51.40000 2003-07-29  15.250000  36.500000 24.3081975 25.951993\n6055 chic  69.0  55.90000 2003-07-30  20.100000  45.500000 28.6813859 36.993454\n6056 chic  75.0  63.00000 2003-07-31  27.300000  54.000000 34.6500947 28.065341\n6057 chic  75.0  64.40000 2003-08-01  23.862500  37.000000 32.3828125 30.554924\n6058 chic  72.0  62.40000 2003-08-02  10.500000  25.500000 24.6067708 21.479167\n6059 chic  71.0  64.10000 2003-08-03  14.500000  20.500000 20.7604167 24.833333\n6060 chic  69.0  62.40000 2003-08-04  17.900000  20.500000 29.5211730 22.208333\n6061 chic  71.0  62.60000 2003-08-05  19.800000  35.500000 25.6478714 31.870018\n6062 chic  74.0  65.60000 2003-08-06  23.200000  47.500000 15.6801816 42.187500\n6063 chic  73.0  64.60000 2003-08-07  11.714286  23.000000 22.6413661 19.453218\n6064 chic  69.0  64.30000 2003-08-08   6.900000  10.000000 18.9322917 10.735507\n6065 chic  70.0  60.80000 2003-08-09   6.200000  11.000000 22.1588542 13.395833\n6066 chic  73.0  59.40000 2003-08-10  11.637500  18.500000 24.0651042 16.385417\n6067 chic  69.0  64.00000 2003-08-11   9.800000  18.500000 17.3695652 17.275000\n6068 chic  71.0  64.40000 2003-08-12  11.300000  13.500000 24.6491477 11.213542\n6069 chic  72.0  66.60000 2003-08-13  17.337500  28.600000 29.7570199 14.641304\n6070 chic  77.0  71.40000 2003-08-14  33.500000  50.500000 37.6861737 26.687500\n6071 chic  79.0  71.60000 2003-08-15  36.800000  55.000000 24.8846241 28.830492\n6072 chic  83.0  69.10000 2003-08-16  23.587500  41.500000 41.1093750 16.718750\n6073 chic  78.0  63.40000 2003-08-17  14.600000  19.000000 33.0078125 10.442708\n6074 chic  73.0  60.00000 2003-08-18  12.600000  26.500000 25.1699811 23.383152\n6075 chic  71.0  60.40000 2003-08-19  17.185714  30.250000 25.8825861 31.502717\n6076 chic  77.0  67.70000 2003-08-20  37.300000  59.000000 40.3432971 31.072443\n6077 chic  84.0  70.40000 2003-08-21  27.400000  63.000000 46.7235054 24.227679\n6078 chic  71.0  57.20000 2003-08-22  10.471429  17.000000 24.0101902 14.886837\n6079 chic  69.0  55.90000 2003-08-23   6.600000  14.000000 19.7421875 14.557292\n6080 chic  72.0  62.30000 2003-08-24  15.000000  25.000000 33.2291667 18.322917\n6081 chic  83.0  67.10000 2003-08-25  26.814286  52.400000 47.6337183 26.278986\n6082 chic  82.0  69.10000 2003-08-26  19.700000  50.500000 40.3125000 34.075758\n6083 chic  74.0  62.60000 2003-08-27  15.300000  20.000000 30.2971014 24.380208\n6084 chic  76.0  65.70000 2003-08-28  18.157143  44.500000 37.0817482 26.234375\n6085 chic  76.0  63.40000 2003-08-29  13.500000  25.000000 31.0357143 21.333333\n6086 chic  68.0  51.30000 2003-08-30   2.500000   7.000000 27.4523810  9.614583\n6087 chic  66.0  57.50000 2003-08-31   8.650000  18.000000 26.1696429 13.828125\n6088 chic  63.0  61.40000 2003-09-01   6.800000   7.000000 32.9285714  7.697917\n6089 chic  67.0  59.90000 2003-09-02  12.500000  21.000000 31.8237578 21.859375\n6090 chic  72.0  58.80000 2003-09-03  14.250000  30.500000 22.0120018 25.463768\n6091 chic  62.0  51.70000 2003-09-04   5.300000  11.500000 18.6111866 19.200149\n6092 chic  62.0  50.90000 2003-09-05  11.400000  32.500000 14.1831975 28.833333\n6093 chic  66.0  53.30000 2003-09-06  13.575000  25.500000 24.4531250 32.682292\n6094 chic  73.0  60.30000 2003-09-07  16.700000  30.500000 31.0052083 30.739583\n6095 chic  72.0  61.70000 2003-09-08  23.300000  68.000000 22.0443841 43.843750\n6096 chic  72.0  63.10000 2003-09-09  26.500000  45.000000 29.4544837 30.966856\n6097 chic  72.0  63.30000 2003-09-10  37.900000  51.500000 32.3343009 29.671649\n6098 chic  74.0  60.60000 2003-09-11  37.800000  58.500000 39.2262228 26.863225\n6099 chic  72.0  60.70000 2003-09-12  32.612500  46.250000 29.9504076 29.620833\n6100 chic  75.0  63.00000 2003-09-13  35.700000  47.500000 39.8593750 21.885417\n6101 chic  67.0  61.20000 2003-09-14  15.900000  17.000000 24.9114583 16.572917\n6102 chic  63.0  47.50000 2003-09-15   9.325000  27.500000 13.0118371 26.427083\n6103 chic  66.0  50.00000 2003-09-16   9.500000  58.500000 17.4811224 35.979167\n6104 chic  68.0  52.70000 2003-09-17  17.600000  41.500000 28.6822917 35.315341\n6105 chic  68.0  54.20000 2003-09-18  24.900000  40.200000 37.3906250 31.468750\n6106 chic  58.0  47.20000 2003-09-19  16.800000  25.000000 15.9130435 18.270833\n6107 chic  56.0  43.00000 2003-09-20   8.700000  26.000000 16.7135417 19.989583\n6108 chic  62.0  50.50000 2003-09-21  15.700000  30.000000 32.3906250 19.541667\n6109 chic  62.0  54.50000 2003-09-22   6.500000  24.500000 19.1060606 20.427083\n6110 chic  59.0  42.60000 2003-09-23  12.200000  29.000000 15.2348279 22.937500\n6111 chic  62.0  50.10000 2003-09-24  10.362500  25.000000 17.1460598 24.104167\n6112 chic  53.0  38.60000 2003-09-25  12.300000  28.000000 11.9778080 19.780303\n6113 chic  57.0  48.70000 2003-09-26   6.700000  28.000000  7.3779438 28.884470\n6114 chic  54.0  42.60000 2003-09-27   5.600000  14.500000 12.7083333 12.989583\n6115 chic  52.0  41.60000 2003-09-28   7.900000  11.500000 12.4341299 11.270833\n6116 chic  50.0  36.60000 2003-09-29  12.700000  23.000000 10.5416667 19.209239\n6117 chic  48.0  32.20000 2003-09-30   5.271429  21.000000 11.6161685 19.489583\n6118 chic  44.0  26.00000 2003-10-01   6.600000  29.500000 10.7976190 22.444444\n6119 chic  42.0  22.20000 2003-10-02   7.700000  34.500000  7.5178571 25.945268\n6120 chic  48.0  37.70000 2003-10-03  12.162500  71.000000  7.7864907 31.291667\n6121 chic  49.0  36.90000 2003-10-04  14.700000  25.000000 11.6071429 24.527778\n6122 chic  47.0  40.50000 2003-10-05   9.400000  23.500000 16.1250000 20.944444\n6123 chic  48.0  37.50000 2003-10-06   8.625000  22.600000 16.2424948 27.333333\n6124 chic  61.0  49.40000 2003-10-07   7.400000  54.000000 12.2624224 37.666667\n6125 chic  64.0  53.10000 2003-10-08  11.600000  68.000000 18.6891822 40.944444\n6126 chic  62.0  54.50000 2003-10-09  32.087500  65.000000  8.8245342 47.250000\n6127 chic  64.0  57.90000 2003-10-10  34.000000  58.500000 14.4702381 34.361111\n6128 chic  66.0  59.30000 2003-10-11  18.300000  33.000000 20.7738095 21.916667\n6129 chic  58.0  42.20000 2003-10-12   6.542857  20.000000 17.3630952 16.347222\n6130 chic  57.0  41.30000 2003-10-13  17.400000  60.500000 12.3095238 38.194444\n6131 chic  53.0  47.60000 2003-10-14  14.600000  10.500000 18.5274327 24.452020\n6132 chic  50.0  35.70000 2003-10-15   7.928571  23.500000 12.3690476 26.513889\n6133 chic  45.0  35.80000 2003-10-16   8.900000  21.500000 10.3902692 27.940053\n6134 chic  44.0  30.50000 2003-10-17   8.100000  30.000000  8.8035714 37.638889\n6135 chic  57.0  41.90000 2003-10-18  10.857143  28.000000 12.4285714 30.180556\n6136 chic  56.0  47.30000 2003-10-19  10.600000  20.500000 22.5000000 22.000000\n6137 chic  66.0  51.60000 2003-10-20   9.600000  58.000000 25.0119048 29.194444\n6138 chic  55.0  44.90000 2003-10-21  14.112500  38.500000 17.6322464 25.541667\n6139 chic  48.0  38.50000 2003-10-22  12.900000  12.500000 17.4906832 20.638889\n6140 chic  46.0  40.80000 2003-10-23   6.800000  28.500000 12.4017653 27.168470\n6141 chic  48.0  42.80000 2003-10-24  16.687500  37.400000 10.7559524 29.486111\n6142 chic  52.0  45.30000 2003-10-25  17.100000  24.000000  4.6904762 26.361111\n6143 chic  40.0  33.50000 2003-10-26  10.000000   8.500000  6.8065476 12.680556\n6144 chic  38.0  32.30000 2003-10-27  14.512500  22.000000  4.7494824 19.444444\n6145 chic  48.0  38.70000 2003-10-28   8.000000  27.500000  8.2989130 15.993056\n6146 chic  44.0  35.70000 2003-10-29         NA  18.500000  7.2603654 16.541035\n6147 chic  55.0  49.00000 2003-10-30  10.925000  25.400000 19.2331781 24.240404\n6148 chic  58.0  52.60000 2003-10-31         NA  35.500000 10.7559524 16.868056\n6149 chic  47.0  41.70000 2003-11-01         NA  15.000000  9.9895833 13.416667\n6150 chic  52.0  50.90000 2003-11-02  12.375000  13.500000  3.8645833 14.812500\n6151 chic  49.0  49.10000 2003-11-03   9.600000  11.000000  6.5181159 12.000000\n6152 chic  59.0  57.00000 2003-11-04   4.700000  28.500000  8.6173007 21.097222\n6153 chic  42.0  34.20000 2003-11-05  11.587500  15.600000  8.2500000 17.993056\n6154 chic  38.0  22.00000 2003-11-06         NA  15.000000  8.9375000 25.557065\n6155 chic  35.0  17.30000 2003-11-07  19.000000  21.500000 14.4361413 26.876984\n6156 chic  27.0  18.10000 2003-11-08   7.685714  15.000000 13.1770833 26.347222\n6157 chic  31.0  16.90000 2003-11-09  15.000000  19.000000 10.9895833 31.986111\n6158 chic  38.0  30.20000 2003-11-10  25.600000  26.500000  6.2006341 33.666667\n6159 chic  50.0  50.10000 2003-11-11  21.462500  31.200000  3.3750000 17.194444\n6160 chic  48.0  39.90000 2003-11-12  12.500000  48.500000 12.5108696 15.527778\n6161 chic  35.0  15.80000 2003-11-13  16.700000  16.000000 14.8319746 23.153382\n6162 chic  36.0  23.10000 2003-11-14   9.825000  26.000000  6.2291667 28.135101\n6163 chic  40.0  39.80000 2003-11-15  14.200000  17.000000  4.8541667 19.569444\n6164 chic  45.0  43.70000 2003-11-16  14.300000  13.000000  2.9166667 18.305556\n6165 chic  44.0  44.70000 2003-11-17  22.875000  27.200000  6.6657197 25.152778\n6166 chic  55.0  55.10000 2003-11-18   9.100000  15.000000  7.6784420 22.284420\n6167 chic  47.0  34.70000 2003-11-19  14.000000  17.000000  9.3750000 27.166667\n6168 chic  50.0  40.40000 2003-11-20   7.785714  26.500000  9.4660326 28.031746\n6169 chic  46.0  36.50000 2003-11-21   7.700000  10.000000 15.4895833 19.250000\n6170 chic  53.0  48.00000 2003-11-22  24.200000  28.500000  5.3541667 23.361111\n6171 chic  48.0  47.10000 2003-11-23   8.112500  11.600000 17.7395833 10.819444\n6172 chic  25.0  14.00000 2003-11-24   7.400000  32.000000 17.1988225 14.674603\n6173 chic  33.0  21.60000 2003-11-25  16.000000  28.500000  8.2812500 26.284091\n6174 chic  40.0  28.30000 2003-11-26  15.087500  30.500000  5.5670290 29.805556\n6175 chic  41.0  37.40000 2003-11-27  19.500000  17.500000  6.0520833 24.888889\n6176 chic  33.0  22.50000 2003-11-28  15.800000  15.500000 17.1979167 19.111111\n6177 chic  31.0  21.30000 2003-11-29   9.512500  13.750000 16.1354167 18.819444\n6178 chic  46.0  27.40000 2003-11-30   5.600000  12.000000 16.2291667 19.097222\n6179 chic  35.0  14.40000 2003-12-01   6.500000  18.500000 18.6290761 23.013889\n6180 chic  30.0  13.00000 2003-12-02   6.457143  15.500000 10.5009058 34.828283\n6181 chic  34.0  22.30000 2003-12-03   9.000000  23.500000 11.6562500 29.888889\n6182 chic  37.0  29.70000 2003-12-04  15.800000  23.000000  3.9393116 28.062710\n6183 chic  37.0  30.90000 2003-12-05   8.012500  15.000000 16.1770833 24.500000\n6184 chic  34.0  26.90000 2003-12-06  11.800000  16.000000  6.0312500 28.194444\n6185 chic  34.0  28.50000 2003-12-07  21.100000  21.000000  4.5833333 24.625000\n6186 chic  40.0  33.90000 2003-12-08  21.950000  21.000000  3.0520833 28.868687\n6187 chic  45.0  41.90000 2003-12-09  26.800000  33.500000  1.0978261 27.239899\n6188 chic  41.0  40.40000 2003-12-10  12.000000  11.500000  6.7187500 23.569444\n6189 chic  22.0  14.30000 2003-12-11   7.728571  12.000000 12.1619730 21.533333\n6190 chic  17.0   6.40000 2003-12-12  18.800000  27.500000  6.8958333 34.990942\n6191 chic  21.0  16.70000 2003-12-13  18.300000  24.000000 10.1666667 35.729167\n6192 chic  28.0  23.80000 2003-12-14  17.825000  20.000000 10.6666667 29.062500\n6193 chic  31.0  27.70000 2003-12-15  22.500000  18.000000  7.0692935 28.779167\n6194 chic  34.0  26.50000 2003-12-16  13.300000  16.000000  9.4266304 19.708333\n6195 chic  23.0  18.50000 2003-12-17  15.000000  22.200000  9.1142540 24.166667\n6196 chic  23.0  19.70000 2003-12-18  36.300000  26.000000  5.2500000 29.566288\n6197 chic  25.0  15.40000 2003-12-19   9.000000  25.500000 15.1770833 22.833333\n6198 chic  20.0   8.20000 2003-12-20   7.928571  19.000000 11.1041667 26.458333\n6199 chic  37.0  25.90000 2003-12-21   8.500000  21.500000 16.8229167 21.895833\n6200 chic  42.0  33.10000 2003-12-22  22.500000  26.000000  4.8958333 25.130682\n6201 chic  32.0  27.60000 2003-12-23  14.314286  14.800000  4.6714674 24.708333\n6202 chic  22.0  14.50000 2003-12-24   9.600000  19.000000 13.7833333 22.625000\n6203 chic  27.0  15.40000 2003-12-25  12.400000  21.000000 10.5208333 27.854167\n6204 chic  30.0  22.50000 2003-12-26  17.362500  24.500000  2.8958333 39.687500\n6205 chic  39.0  23.90000 2003-12-27  11.300000  18.500000  7.5520833 27.979167\n6206 chic  45.0  32.90000 2003-12-28  10.500000  14.500000 13.1354167 20.500000\n6207 chic  39.0  26.70000 2003-12-29   8.660000  15.500000  8.5951087 21.208333\n6208 chic  34.0  22.70000 2003-12-30  10.000000  17.500000 10.9846014 19.533514\n6209 chic  32.0  20.30000 2003-12-31  17.500000  15.500000 12.3854167 24.910714\n6210 chic  35.0  30.40000 2004-01-01  14.385714  17.000000  6.8333333 26.520833\n6211 chic  49.0  47.50000 2004-01-02  18.400000  20.500000  5.8854167 20.750000\n6212 chic  41.0  28.80000 2004-01-03  10.000000   9.000000 10.0729167 20.625000\n6213 chic  31.0  25.80000 2004-01-04   4.650000   7.400000 23.0833333 10.687500\n6214 chic  17.0  12.40000 2004-01-05  11.000000  16.000000 15.2490942 23.439394\n6215 chic   3.0  -6.00000 2004-01-06  17.200000  24.000000 19.5886034 19.111111\n6216 chic  15.0   3.50000 2004-01-07  13.800000  24.500000 10.0978261 29.333333\n6217 chic  24.0  17.30000 2004-01-08  11.500000  25.000000  8.3125000 32.611111\n6218 chic  22.0  17.20000 2004-01-09  13.900000  17.000000 20.5416667 25.782609\n6219 chic  21.0  16.50000 2004-01-10  15.412500  24.200000  9.8750000 28.194444\n6220 chic  33.0  24.90000 2004-01-11         NA  12.000000 14.3958333 18.861111\n6221 chic  35.0  27.40000 2004-01-12  18.000000  14.000000  7.7409420 19.760101\n6222 chic  30.0  19.40000 2004-01-13  12.628571  18.000000 12.1229620 27.652778\n6223 chic  27.0  21.10000 2004-01-14  15.000000  31.500000 10.6541667 23.410354\n6224 chic  19.0   7.10000 2004-01-15   8.100000  29.000000 13.7812500 34.217172\n6225 chic  27.0  18.40000 2004-01-16  19.150000  30.400000  7.1746324 27.387681\n6226 chic  31.0  28.30000 2004-01-17  19.800000  20.000000  3.3437500 25.902778\n6227 chic  18.0   2.80000 2004-01-18   7.600000  14.000000 20.3854167 13.583333\n6228 chic  11.0   0.30000 2004-01-19   6.075000  18.000000 17.3437500 25.500000\n6229 chic  15.0   2.20000 2004-01-20  15.800000  24.000000  9.4057971 39.204365\n6230 chic  24.0  14.30000 2004-01-21  20.200000  26.000000 10.1734601 26.041667\n6231 chic  11.0  -7.20000 2004-01-22   5.944444  23.800000 20.8102355 18.307971\n6232 chic  15.0   8.60000 2004-01-23  12.800000  36.000000  8.3541667 27.150794\n6233 chic  15.0  10.90000 2004-01-24  12.100000  19.000000 13.7708333 29.375000\n6234 chic  18.0   7.50000 2004-01-25   7.885714  29.500000 26.7395833 18.166667\n6235 chic  22.0  18.30000 2004-01-26  15.000000  24.000000 19.0208333 24.397727\n6236 chic  17.0  12.90000 2004-01-27  16.400000  13.000000 13.9144022 29.606280\n6237 chic   7.0  -0.80000 2004-01-28  16.300000  30.000000 13.6145833 26.513889\n6238 chic   2.0  -6.80000 2004-01-29  18.300000  29.000000 10.7547348 33.500000\n6239 chic  -3.0 -12.70000 2004-01-30  18.300000  32.000000 13.2767210 28.497475\n6240 chic   4.0  -4.20000 2004-01-31  22.285714  50.000000  8.1562500 36.902778\n6241 chic  21.0  10.10000 2004-02-01  22.300000  45.000000 13.4166667 35.513889\n6242 chic  28.0  22.20000 2004-02-02  17.000000  49.000000  5.3683712 36.166667\n6243 chic  21.0  17.40000 2004-02-03  26.377778  35.000000  8.6077899 33.679293\n6244 chic  13.0   3.80000 2004-02-04  19.700000  55.000000 10.5179924 44.510823\n6245 chic  26.0  19.60000 2004-02-05   8.200000  24.000000 17.4375000 30.513889\n6246 chic  28.0  23.60000 2004-02-06  19.271429  21.500000  9.7604167 34.541667\n6247 chic  20.0  20.00000 2004-02-07  20.900000  14.500000 19.5138889 27.888889\n6248 chic  16.0  16.00000 2004-02-08  20.450000  19.000000 16.7083333 32.033333\n6249 chic  28.0  20.90000 2004-02-09  14.657143  20.600000 26.0027503 24.592947\n6250 chic  20.0  14.20000 2004-02-10  28.900000  22.500000 22.9424819 23.430556\n6251 chic  23.0  16.50000 2004-02-11  18.500000  31.000000 12.0113636 38.044686\n6252 chic  22.0  16.00000 2004-02-12  22.100000  30.000000 16.6666667 28.916667\n6253 chic  20.0  11.20000 2004-02-13  24.500000  17.500000 21.7708333 23.258816\n6254 chic  26.0  17.60000 2004-02-14   9.300000  26.500000 23.9791667 21.703704\n6255 chic  14.0  10.90000 2004-02-15   6.528571  13.750000 28.7291667 21.013889\n6256 chic  16.0   7.70000 2004-02-16         NA  31.000000 13.2708333 41.666667\n6257 chic  24.0  15.80000 2004-02-17  43.400000  49.000000  8.2780797 44.978175\n6258 chic  29.0  23.50000 2004-02-18  48.157143  61.000000  8.1621377 43.708333\n6259 chic  36.0  31.70000 2004-02-19  40.000000  41.000000  5.3229167 42.222222\n6260 chic  39.0  35.10000 2004-02-20  22.300000  22.000000 18.0416667 30.774758\n6261 chic  33.0  26.00000 2004-02-21   7.866667  14.400000 26.6562500 20.986111\n6262 chic  34.0  28.10000 2004-02-22  18.200000  22.500000 13.6562500 31.611111\n6263 chic  41.0  32.60000 2004-02-23  27.500000  25.000000 11.8971920 29.275966\n6264 chic  34.0  29.70000 2004-02-24  19.237500  17.500000 22.5375906 21.444444\n6265 chic  31.0  24.60000 2004-02-25  11.000000  19.000000 23.5937500 27.443237\n6266 chic  34.0  25.20000 2004-02-26  18.500000  25.000000 17.5520833 29.698413\n6267 chic  35.0  24.70000 2004-02-27  30.711111  50.800000 12.0208333 33.794444\n6268 chic  40.0  27.60000 2004-02-28  24.000000  37.000000 10.9895833 33.069444\n6269 chic  47.0  32.50000 2004-02-29  18.200000  21.000000 20.6689312 32.458333\n6270 chic  54.0  42.40000 2004-03-01  10.266667  13.500000 25.1250000 23.645833\n6271 chic  44.0  37.20000 2004-03-02  15.950000  17.500000 16.3165761 15.416667\n6272 chic  43.0  34.50000 2004-03-03  28.150000  33.000000 12.7007576 27.343434\n6273 chic  41.0  39.40000 2004-03-04  29.175000  37.200000  6.8953804 23.415936\n6274 chic  50.0  41.80000 2004-03-05   7.600000  19.000000 20.2916667 15.904287\n6275 chic  41.0  31.30000 2004-03-06  11.000000  13.500000 23.1979167 17.125000\n6276 chic  40.0  28.30000 2004-03-07   7.625000  12.000000 33.4687500 10.638889\n6277 chic  34.0  20.80000 2004-03-08  11.800000  20.000000 21.8546196 23.402778\n6278 chic  33.0  25.60000 2004-03-09  11.800000  12.500000 25.2249396 25.132850\n6279 chic  37.0  25.40000 2004-03-10  13.825000  26.400000 20.6458333 29.797619\n6280 chic  31.0  16.80000 2004-03-11  10.500000  47.500000 17.5312500 14.391215\n6281 chic  25.0   7.10000 2004-03-12  10.100000  22.500000 16.7291667 23.479167\n6282 chic  33.0  18.40000 2004-03-13  17.712500  24.500000 14.7500000 36.708333\n6283 chic  39.0  27.90000 2004-03-14  13.400000  17.500000 29.5625000 14.187500\n6284 chic  32.0  22.40000 2004-03-15   7.300000   9.500000 27.6956522 26.736842\n6285 chic  32.0  26.10000 2004-03-16  10.677778  17.750000 27.3083333 21.826389\n6286 chic  32.0  28.40000 2004-03-17  23.100000  22.500000  7.4927536 32.956522\n6287 chic  32.0  30.90000 2004-03-18  26.500000  21.000000  8.6941425 38.888889\n6288 chic  38.0  30.70000 2004-03-19  20.187500  23.500000 14.9722222 29.902778\n6289 chic  47.0  28.80000 2004-03-20  17.000000  24.000000 27.1875000 19.861111\n6290 chic  28.0  16.10000 2004-03-21   7.300000  11.500000 31.6875000 12.104167\n6291 chic  30.0  10.00000 2004-03-22  10.662500  23.400000 19.7216874 26.854167\n6292 chic  46.0  24.40000 2004-03-23  30.000000  43.000000 22.6553119 30.840278\n6293 chic  54.0  44.80000 2004-03-24  26.500000  28.000000 18.3515851 29.160024\n6294 chic  60.0  52.80000 2004-03-25  17.987500  29.000000 20.3279691 26.430556\n6295 chic  56.0  54.90000 2004-03-26  12.050000  23.000000 16.8519226 22.672619\n6296 chic  51.0  47.40000 2004-03-27  14.000000  20.500000 16.0119048 24.944444\n6297 chic  61.0  52.50000 2004-03-28  11.900000  18.200000 26.3273810 13.212302\n6298 chic  51.0  37.80000 2004-03-29  13.300000  18.500000 21.1582633 24.333333\n6299 chic  48.0  37.00000 2004-03-30  22.500000  54.500000 19.2109860 29.771135\n6300 chic  42.0  32.10000 2004-03-31   5.775000   8.500000 26.1709280 15.322222\n6301 chic  42.0  27.90000 2004-04-01  11.100000  11.000000 32.2261905 18.920635\n6302 chic  44.0  23.70000 2004-04-02  12.200000  16.000000 28.1730977 25.333333\n6303 chic  43.0  23.80000 2004-04-03   7.762500  24.800000 27.4817708 23.541667\n6304 chic  37.0  24.50000 2004-04-04   2.600000   6.000000 37.9166667 11.291667\n6305 chic  39.0  24.40000 2004-04-05  11.000000  32.500000 29.0331748 29.732323\n6306 chic  56.0  37.50000 2004-04-06  21.837500  55.500000 30.8113236 33.324074\n6307 chic  52.0  32.40000 2004-04-07  18.500000  31.000000 33.5844979 31.833333\n6308 chic  46.0  35.90000 2004-04-08  21.000000  32.000000 27.6816770 27.652778\n6309 chic  45.0  29.80000 2004-04-09  12.437500  28.200000 20.2470238 33.333333\n6310 chic  44.0  30.30000 2004-04-10  15.500000  25.000000 22.6279762 29.027778\n6311 chic  37.0  26.80000 2004-04-11   5.900000   6.500000 32.2857143 12.597222\n6312 chic  36.0  21.80000 2004-04-12   3.442857  16.000000 30.2516046 13.152778\n6313 chic  38.0  25.40000 2004-04-13   7.050000  15.000000 29.4583333 19.972222\n6314 chic  49.0  27.50000 2004-04-14  20.250000  61.000000 17.1102484 43.001984\n6315 chic  61.0  33.90000 2004-04-15  14.525000  59.800000 31.1369048 33.344309\n6316 chic  70.0  45.60000 2004-04-16  14.450000  40.000000 37.3329451 27.694444\n6317 chic  64.0  51.60000 2004-04-17  16.500000  25.000000 44.4761905 24.125000\n6318 chic  69.0  50.70000 2004-04-18  13.385714  59.500000 38.7797619 16.777778\n6319 chic  60.0  48.40000 2004-04-19   6.900000  54.000000 29.2954193 16.188665\n6320 chic  54.0  48.40000 2004-04-20  14.850000  30.500000 18.2650104 21.756643\n6321 chic  54.0  48.50000 2004-04-21   8.555556  17.800000 26.3344979 18.555556\n6322 chic  48.0  37.50000 2004-04-22   7.400000   9.500000 27.1350108 21.263889\n6323 chic  51.0  37.00000 2004-04-23  16.100000  23.500000 22.9702381 33.080918\n6324 chic  45.0  39.50000 2004-04-24  16.300000  33.500000 26.9404762 24.972222\n6325 chic  54.0  48.70000 2004-04-25   9.300000  13.000000 25.2500000 15.736111\n6326 chic  52.0  34.20000 2004-04-26  11.600000  27.000000 27.8839286 19.088854\n6327 chic  44.0  21.30000 2004-04-27   6.422222  17.200000 28.2068982 23.708333\n6328 chic  64.0  42.30000 2004-04-28  11.600000  82.000000 40.5089447 22.555556\n6329 chic  69.0  51.90000 2004-04-29  13.600000  44.500000 44.4824017 20.857488\n6330 chic  51.0  45.50000 2004-04-30  11.600000  17.000000 27.2005694 24.688492\n6331 chic  46.0  37.80000 2004-05-01   6.900000   7.000000 28.4088542 17.307292\n6332 chic  42.0  30.30000 2004-05-02   3.600000   6.500000 32.4062500 10.744792\n6333 chic  42.0  28.10000 2004-05-03   6.971429  24.800000 21.7543025 26.640625\n6334 chic  55.0  44.30000 2004-05-04  11.100000  44.500000 27.5114357 25.489583\n6335 chic  53.0  36.50000 2004-05-05  10.500000  26.000000 25.2940444 25.510349\n6336 chic  69.0  57.10000 2004-05-06  18.012500  59.000000 31.4808239 33.784601\n6337 chic  51.0  36.40000 2004-05-07   7.450000  17.000000 33.9575408 15.942708\n6338 chic  67.0  50.40000 2004-05-08  17.800000  30.000000 29.6197917 24.828125\n6339 chic  70.0  60.30000 2004-05-09  15.144444  34.250000 34.1276042 20.083333\n6340 chic  70.0  61.60000 2004-05-10  16.150000  52.500000 29.3055933 23.500000\n6341 chic  68.0  61.30000 2004-05-11  19.100000  41.500000 33.9370471 24.990489\n6342 chic  76.0  65.40000 2004-05-12  14.500000  39.500000 28.9651783 22.052083\n6343 chic  72.0  67.30000 2004-05-13  12.700000  13.000000 17.9727355 24.125659\n6344 chic  59.0  54.10000 2004-05-14   8.000000   8.000000 11.3244048 19.505208\n6345 chic  47.0  38.90000 2004-05-15   3.262500   9.000000 20.5059524 12.364583\n6346 chic  54.0  45.80000 2004-05-16  13.000000  20.000000 24.6636905 23.932292\n6347 chic  70.0  62.60000 2004-05-17  18.400000  29.000000 29.5905797 22.353070\n6348 chic  57.0  47.20000 2004-05-18   6.728571  10.000000 34.0166440 20.200181\n6349 chic  58.0  55.60000 2004-05-19  12.800000  19.000000 23.9432745 26.520833\n6350 chic  74.0  71.10000 2004-05-20  17.800000  35.000000 23.7651515 22.504735\n6351 chic  63.0  58.10000 2004-05-21  11.966667  33.600000 28.0937500 22.401042\n6352 chic  65.0  61.60000 2004-05-22  11.750000  25.000000 25.4921875 18.250000\n6353 chic  68.0  61.70000 2004-05-23   9.600000  31.500000 28.4635417 13.989583\n6354 chic  56.0  47.50000 2004-05-24   5.028571  14.000000 26.7687953 12.229167\n6355 chic  59.0  53.60000 2004-05-25  11.300000  29.500000 23.0067832 23.028450\n6356 chic  57.0  46.20000 2004-05-26   8.400000  23.500000 17.0275136 23.411458\n6357 chic  64.0  55.20000 2004-05-27  12.955556  31.250000 23.2566803 25.471241\n6358 chic  53.0  39.40000 2004-05-28         NA  11.500000 25.6718750 17.072917\n6359 chic  57.0  47.70000 2004-05-29   8.700000  27.500000 25.7473958 23.182292\n6360 chic  66.0  61.00000 2004-05-30  15.787500  25.000000 30.5208333 18.380208\n6361 chic  62.0        NA 2004-05-31   5.500000  12.500000 27.0286458 16.609375\n6362 chic  65.0  50.40000 2004-06-01   4.300000  33.000000 26.9616168 18.375000\n6363 chic  59.0  50.70000 2004-06-02   6.633333  15.800000 21.7192029 18.796875\n6364 chic  59.0  40.70000 2004-06-03   4.500000  14.500000 28.8520154 18.412202\n6365 chic  58.0  43.70000 2004-06-04   9.500000  23.500000 29.3635643 29.869048\n6366 chic  61.0  47.60000 2004-06-05  19.412500  43.000000 38.9479167 29.614583\n6367 chic  72.0  58.80000 2004-06-06  22.200000  38.000000 40.7812500 24.156250\n6368 chic  74.0  64.60000 2004-06-07  19.800000  68.000000 39.7838542 22.979167\n6369 chic  83.0  69.00000 2004-06-08  19.344444  42.000000 30.2193161 21.779891\n6370 chic  73.0  67.00000 2004-06-09  10.800000  47.500000 20.7479620 16.417614\n6371 chic  64.0  60.50000 2004-06-10   6.600000  21.000000 10.6363225 17.571970\n6372 chic  73.0  67.20000 2004-06-11  14.814286  32.500000 14.9852190 19.046402\n6373 chic  71.0  64.70000 2004-06-12  10.000000  20.000000 31.0598958 16.702083\n6374 chic  72.0  64.50000 2004-06-13  10.600000  19.000000 35.9322917 13.472222\n6375 chic  75.0  64.10000 2004-06-14   9.028571  18.200000 31.1039299 20.972222\n6376 chic  71.0  57.40000 2004-06-15  11.700000  27.000000 30.5982790 25.656061\n6377 chic  72.0  65.40000 2004-06-16  16.900000  30.000000 21.8121603 26.362092\n6378 chic  72.0  60.40000 2004-06-17  16.028571  32.500000 26.6804801 22.415761\n6379 chic  71.0  58.10000 2004-06-18  13.866667  36.500000 25.6432292 26.708333\n6380 chic  56.0  39.70000 2004-06-19   3.800000   9.000000 26.7682292 12.281250\n6381 chic  61.0  45.10000 2004-06-20  10.944444  19.800000 26.6041667 22.458333\n6382 chic  63.0  57.30000 2004-06-21  14.100000  28.000000 13.2036911 31.862500\n6383 chic  65.0  49.70000 2004-06-22   7.200000  26.500000 20.8706975 21.418561\n6384 chic  70.0  54.00000 2004-06-23   8.612500  56.000000 28.4839530 23.562500\n6385 chic  62.0  47.50000 2004-06-24   5.700000  14.000000 21.8847373 22.839900\n6386 chic  61.0  44.20000 2004-06-25   8.500000  22.500000 19.3359375 26.375000\n6387 chic  64.0  47.80000 2004-06-26   7.887500  23.200000 23.1354167 21.583333\n6388 chic  67.0  51.30000 2004-06-27  12.000000  26.500000 26.0546875 23.229167\n6389 chic  65.0  52.80000 2004-06-28  14.500000  22.500000 23.1046196 23.664855\n6390 chic  69.0  52.10000 2004-06-29  11.285714  47.500000 22.6679121 26.729167\n6391 chic  73.0  56.20000 2004-06-30  15.900000  58.500000 26.4171196 33.661458\n6392 chic  71.0  57.00000 2004-07-01  14.700000  54.500000 37.7632576 27.879623\n6393 chic  71.0  58.50000 2004-07-02  14.977778  41.400000 40.9322917 18.505208\n6394 chic  73.0  67.20000 2004-07-03  18.200000  38.000000 31.7864583 17.406250\n6395 chic  76.0  66.60000 2004-07-04   7.300000  25.000000 31.1953125 11.045139\n6396 chic  68.0  60.70000 2004-07-05   9.137500  15.500000 31.6354167  7.604167\n6397 chic  73.0  64.90000 2004-07-06   4.900000  32.000000 30.9131567 19.381826\n6398 chic  64.0  57.60000 2004-07-07   8.000000  21.000000 14.9710145 13.536458\n6399 chic  65.0  52.00000 2004-07-08   6.857143  18.000000 28.4744318 15.697443\n6400 chic  68.0  58.20000 2004-07-09  13.700000  33.500000 26.4721201 14.822917\n6401 chic  73.0  62.70000 2004-07-10  17.400000  24.000000 35.7053571 13.031250\n6402 chic  74.0  67.30000 2004-07-11  17.357143  29.500000 38.7797619 14.489583\n6403 chic  78.0  67.40000 2004-07-12  15.800000  30.000000 33.0895298 18.640625\n6404 chic  78.0  67.10000 2004-07-13   6.400000  44.000000 26.2547554 23.698864\n6405 chic  72.0  58.20000 2004-07-14   9.111111  28.750000 32.2190897 18.125000\n6406 chic  72.0  56.30000 2004-07-15  15.550000  37.000000 25.0067935 24.601255\n6407 chic  73.0  62.80000 2004-07-16  13.100000  52.500000 28.7057292 22.958333\n6408 chic  70.0  60.70000 2004-07-17  15.000000  17.000000 32.4062500  7.880208\n6409 chic  71.0  59.00000 2004-07-18  17.300000  20.000000 24.9150095 11.734375\n6410 chic  71.0  60.00000 2004-07-19  24.200000  59.500000 26.7366395 23.958333\n6411 chic  80.0  67.60000 2004-07-20  25.375000  40.200000 35.6300951 25.843750\n6412 chic  79.0  72.80000 2004-07-21  20.000000  54.500000 27.0320955 26.237216\n6413 chic  79.0  68.40000 2004-07-22   4.800000  35.500000 25.1123188 18.865132\n6414 chic  65.0  50.80000 2004-07-23   4.112500   9.000000 26.9984149 10.161232\n6415 chic  63.0  51.00000 2004-07-24   6.800000  17.500000 28.1666667  9.156250\n6416 chic  67.0  53.20000 2004-07-25  11.700000  11.500000 35.9010417  7.552083\n6417 chic  67.0  53.60000 2004-07-26   9.750000  20.400000 29.4442935 21.580357\n6418 chic  70.0  52.80000 2004-07-27  18.050000  30.500000 29.4624094 31.315341\n6419 chic  70.0  56.10000 2004-07-28  25.900000  62.000000 28.0887681 38.317708\n6420 chic  72.0  60.20000 2004-07-29  23.742857  42.500000 33.5643116 27.454937\n6421 chic  68.0  62.70000 2004-07-30  25.350000  51.500000 22.4595788 33.963542\n6422 chic  74.0  60.20000 2004-07-31  17.200000  29.500000 28.9765625 22.218750\n6423 chic  77.0  62.50000 2004-08-01  17.244444  26.000000 30.1718750 26.359375\n6424 chic  78.0  67.70000 2004-08-02  15.300000  51.500000 34.9270833 26.135417\n6425 chic  78.0  67.70000 2004-08-03   7.700000  36.000000 40.1978446 26.883852\n6426 chic  70.0  61.40000 2004-08-04   6.887500  10.000000 27.2918931 11.709336\n6427 chic  65.0  51.00000 2004-08-05   8.500000   9.500000 28.5740489  8.208333\n6428 chic  65.0  49.20000 2004-08-06  11.400000  20.000000 19.6564764 16.786458\n6429 chic  65.0  52.20000 2004-08-07  12.077778  25.000000 26.6093750 21.651042\n6430 chic  70.0  57.00000 2004-08-08  19.500000  28.500000 31.4401042 19.890625\n6431 chic  75.0  61.30000 2004-08-09   8.300000  55.500000 31.4802989 17.765625\n6432 chic  64.0  54.70000 2004-08-10   6.237500  31.500000 12.1788949  9.912364\n6433 chic  58.0  49.00000 2004-08-11   5.700000  29.500000 11.7786458 10.807292\n6434 chic  56.0  48.20000 2004-08-12   6.700000  17.500000 13.0201231 15.928339\n6435 chic  61.0  50.30000 2004-08-13   7.533333  20.200000 16.8072917 19.661685\n6436 chic  60.0  48.40000 2004-08-14   8.500000  14.500000 19.0833333 15.197917\n6437 chic  62.0  49.00000 2004-08-15  17.700000  19.500000 23.7812500 17.875000\n6438 chic  63.0  51.30000 2004-08-16  15.887500  52.500000 26.7139946 28.075893\n6439 chic  72.0  62.30000 2004-08-17  19.400000  48.000000 33.6066782 25.429924\n6440 chic  70.0  64.40000 2004-08-18  20.000000  35.500000 20.1664402 25.572917\n6441 chic  64.0  50.90000 2004-08-19   7.111111  17.800000 20.4440670 14.424517\n6442 chic  66.0  50.70000 2004-08-20  11.800000  42.500000 10.9270833 28.000000\n6443 chic  63.0  51.20000 2004-08-21   9.800000  22.500000 24.0260417 19.229167\n6444 chic  65.0  56.20000 2004-08-22  16.175000  36.000000 30.6875000 20.916667\n6445 chic  72.0  63.70000 2004-08-23  17.400000  45.500000 27.4678442 18.958333\n6446 chic  73.0  67.40000 2004-08-24  10.000000  30.000000 15.4572237 23.750000\n6447 chic  72.0  66.50000 2004-08-25   7.400000  15.000000 12.4052310 20.527778\n6448 chic  75.0  70.20000 2004-08-26  16.100000  31.500000 21.2835145 19.215278\n6449 chic  78.0  69.50000 2004-08-27  16.500000  36.500000 22.6573822 22.550423\n6450 chic  68.0  61.90000 2004-08-28   6.012500   6.000000 22.5468750 10.625000\n6451 chic  61.0  53.90000 2004-08-29   5.900000   5.000000 19.6577381  8.993056\n6452 chic  64.0  57.20000 2004-08-30  16.400000  32.000000 14.6392663 24.213294\n6453 chic  67.0  58.30000 2004-08-31  15.342857  32.400000 19.2197896 27.467172\n6454 chic  70.0  60.30000 2004-09-01         NA  47.500000 25.5115489 31.686298\n6455 chic  73.0  62.00000 2004-09-02         NA  42.000000 33.8437500 30.298557\n6456 chic  73.0  64.30000 2004-09-03  37.285714  51.500000 26.0494792 33.260417\n6457 chic  73.0  63.20000 2004-09-04  38.800000  50.500000 29.4609375 31.145833\n6458 chic  76.0  66.50000 2004-09-05  41.500000  45.000000 34.2447917 22.406250\n6459 chic  68.0  63.20000 2004-09-06  20.762500  30.200000 29.9114583 13.052083\n6460 chic  66.0  51.30000 2004-09-07  14.700000  16.000000 21.2864583 15.635417\n6461 chic  65.0  53.90000 2004-09-08   5.600000  10.000000 23.7921196  9.661458\n6462 chic  64.0  54.50000 2004-09-09   7.171429  17.000000 17.3255208 16.787879\n6463 chic  66.0  54.40000 2004-09-10  17.800000  54.000000 19.0677083 30.213542\n6464 chic  70.0  57.00000 2004-09-11  19.300000  37.000000 31.7031250 34.473958\n6465 chic  71.0  57.90000 2004-09-12  28.528571  42.750000 40.9010417 27.973958\n6466 chic  71.0  60.70000 2004-09-13         NA  48.500000 32.2578228 30.426760\n6467 chic  75.0  64.70000 2004-09-14  22.750000  46.500000 31.7319252 20.566576\n6468 chic  77.0  65.90000 2004-09-15  16.957143  59.000000 25.9983016 19.359375\n6469 chic  66.0  53.60000 2004-09-16   9.000000  18.000000 23.8258282 19.984375\n6470 chic  62.0  49.10000 2004-09-17   7.300000  13.500000 26.6287879 17.966856\n6471 chic  64.0  52.20000 2004-09-18  10.212500  24.200000 24.6309524 23.057292\n6472 chic  68.0  49.30000 2004-09-19  10.700000  16.500000 28.2678571 18.854167\n6473 chic  64.0  47.50000 2004-09-20         NA  31.000000 26.5124224 28.529665\n6474 chic  67.0  50.50000 2004-09-21  17.487500  61.000000 30.2075569 38.338315\n6475 chic  66.0  52.40000 2004-09-22  26.000000  71.500000 30.6868530 39.449405\n6476 chic  70.0  53.30000 2004-09-23  27.900000  60.500000 33.0178571 39.614583\n6477 chic  69.0  50.70000 2004-09-24  12.911111  35.000000 23.2172619 31.166667\n6478 chic  62.0  49.90000 2004-09-25   9.800000  15.500000 20.7678571 19.000000\n6479 chic  59.0  47.60000 2004-09-26         NA  18.000000 19.1428571 20.406250\n6480 chic  61.0  48.20000 2004-09-27  18.471429  42.500000 15.6788302 40.854167\n6481 chic  59.0  47.10000 2004-09-28         NA  15.500000 22.4704969 15.342708\n6482 chic  54.0  44.90000 2004-09-29   9.600000  12.500000 19.3408385 24.945707\n6483 chic  54.0  41.20000 2004-09-30  17.811111  41.600000 12.9523810 35.821429\n6484 chic  62.0  49.20000 2004-10-01         NA  51.500000 25.0676407 31.444444\n6485 chic  48.0  30.90000 2004-10-02   7.800000  11.500000 17.2500000 17.041667\n6486 chic  53.0  32.50000 2004-10-03   7.737500  21.500000 18.9880952 21.444444\n6487 chic  47.0  30.30000 2004-10-04   9.300000  14.000000 16.5468074 19.777778\n6488 chic  46.0  29.00000 2004-10-05  11.900000  37.500000  7.8039596 32.114734\n6489 chic  61.0  35.90000 2004-10-06  11.437500  41.000000  9.5587121 36.541667\n6490 chic  60.0  41.70000 2004-10-07  18.800000  46.500000 20.4133023 38.617754\n6491 chic  64.0  61.20000 2004-10-08  24.550000  34.000000 16.5148810 22.555556\n6492 chic  57.0  41.00000 2004-10-09  10.350000  18.500000 16.2916667 26.555556\n6493 chic  52.0  42.90000 2004-10-10   9.900000  14.500000 18.8095238 19.444444\n6494 chic  53.0  43.60000 2004-10-11  13.100000  19.000000 20.7440476 23.472222\n6495 chic  51.0  44.40000 2004-10-12  13.200000  29.200000 16.0815217 23.393720\n6496 chic  58.0  47.80000 2004-10-13  24.800000  29.000000 13.8779762 28.666667\n6497 chic  52.0  46.60000 2004-10-14  12.350000  17.000000 11.2648810 23.138889\n6498 chic  49.0  41.10000 2004-10-15   8.600000  11.500000  9.2735507 17.283213\n6499 chic  43.0  29.50000 2004-10-16   4.200000  17.000000 17.6488095  8.250000\n6500 chic  43.0  28.90000 2004-10-17   8.300000  14.000000 14.8422619 19.319444\n6501 chic  45.0  39.30000 2004-10-18  12.387500  18.000000 13.3469085 22.140097\n6502 chic  51.0  46.50000 2004-10-19  13.100000  17.000000 11.6206004 17.584541\n6503 chic  52.0  48.00000 2004-10-20  14.750000  12.500000 14.2859731 18.794591\n6504 chic  53.0  46.10000 2004-10-21  11.687500  19.500000 14.9702381 20.388889\n6505 chic  54.0  49.30000 2004-10-22  25.600000  34.000000 10.1962992 24.833333\n6506 chic  66.0  54.80000 2004-10-23  13.800000  21.000000 13.4761905 15.055556\n6507 chic  55.0  43.40000 2004-10-24   8.233333  14.200000 14.4375000 21.569444\n6508 chic  57.0  44.90000 2004-10-25  18.600000  42.000000 13.5813923 36.084541\n6509 chic  57.0  52.10000 2004-10-26  27.300000  31.000000 12.5618530 26.680210\n6510 chic  58.0  52.10000 2004-10-27  31.612500  28.000000 14.4720262 26.301768\n6511 chic  54.0  52.30000 2004-10-28  43.600000  41.500000  6.2078804 26.347222\n6512 chic  69.0  65.90000 2004-10-29  18.100000  36.500000 10.0980525 19.333333\n6513 chic  61.0  44.20000 2004-10-30   6.000000  18.600000 17.6744792 10.138889\n6514 chic  51.0  41.20000 2004-10-31   5.900000  14.000000 14.3671875 12.305556\n6515 chic  50.0  46.10000 2004-11-01  10.100000  15.000000 10.1145833 19.172222\n6516 chic  47.0  41.60000 2004-11-02   4.850000   9.500000  9.9479167 23.388889\n6517 chic  49.0  38.10000 2004-11-03   8.400000  16.500000 16.4393116 21.950397\n6518 chic  46.0  38.80000 2004-11-04  11.900000  14.000000 12.2404891 25.417863\n6519 chic  45.0  27.50000 2004-11-05   6.975000  16.000000 15.9895833 24.583333\n6520 chic  54.0  36.70000 2004-11-06  10.300000  26.500000 12.5833333 22.500000\n6521 chic  47.0  27.90000 2004-11-07   6.500000  15.000000 20.0833333 16.208333\n6522 chic  39.0  18.90000 2004-11-08   7.000000  25.500000  9.5842391 33.062500\n6523 chic  45.0  24.30000 2004-11-09  13.200000  38.500000  7.6911232 29.916667\n6524 chic  55.0  38.30000 2004-11-10  22.500000  60.500000 10.6612319 32.045290\n6525 chic  44.0  30.80000 2004-11-11   5.650000  11.500000 25.1145833 13.208333\n6526 chic  39.0  26.90000 2004-11-12   8.600000   6.000000 25.0312500 17.277174\n6527 chic  36.0  26.90000 2004-11-13   8.950000  23.000000 17.8437500 24.375000\n6528 chic  38.0  26.40000 2004-11-14  16.887500  27.000000  7.8333333 31.625000\n6529 chic  40.0  33.10000 2004-11-15         NA  46.500000  2.1965580 34.597222\n6530 chic  51.0  47.80000 2004-11-16  29.600000  42.000000  2.7463768 25.602657\n6531 chic  59.0  55.80000 2004-11-17  28.166667  35.000000  2.7306548 20.152778\n6532 chic  55.0  54.30000 2004-11-18  28.000000  28.000000  4.1041667 20.347222\n6533 chic  52.0  51.00000 2004-11-19  21.400000  20.500000  8.6961051 23.472222\n6534 chic  49.0  42.80000 2004-11-20  10.525000  11.500000 11.1666667 14.277778\n6535 chic  38.0  29.00000 2004-11-21  11.600000  16.500000 11.2395833 19.333333\n6536 chic  42.0  33.20000 2004-11-22  22.600000  39.000000  3.5081522 29.274892\n6537 chic  45.0  38.60000 2004-11-23  18.388889  24.800000  7.6562500 19.539855\n6538 chic  37.0  30.70000 2004-11-24  12.000000   8.000000 25.2291667 14.638889\n6539 chic  27.0  21.10000 2004-11-25  11.600000  12.500000 12.9166667 25.111111\n6540 chic  37.0  33.00000 2004-11-26  11.657143  17.500000  4.9583333 25.208333\n6541 chic  42.0  39.70000 2004-11-27   6.250000   8.000000 14.6527778 16.958333\n6542 chic  39.0  24.90000 2004-11-28   7.100000  14.000000 13.9166667 18.854167\n6543 chic  35.0  32.80000 2004-11-29  15.512500  17.200000  3.7577341 33.988248\n6544 chic  36.0  33.40000 2004-11-30  17.400000  17.500000  5.3750000 25.095411\n6545 chic  29.0  23.90000 2004-12-01  20.100000  20.500000  7.9461051 21.958333\n6546 chic  31.0  25.00000 2004-12-02  21.525000  31.500000  4.1496212 28.890873\n6547 chic  30.0  21.80000 2004-12-03  21.000000  28.000000  6.9166667 27.263889\n6548 chic  36.0  30.40000 2004-12-04  14.400000  28.000000  7.5729167 22.750000\n6549 chic  37.0  34.90000 2004-12-05  23.575000  28.200000  5.6458333 20.152778\n6550 chic  45.0  43.90000 2004-12-06  21.900000  23.000000  4.0208333 23.650362\n6551 chic  46.0  43.40000 2004-12-07  11.800000  12.000000  4.4293478 20.458333\n6552 chic  39.0  34.20000 2004-12-08  13.942857  27.000000  7.5144928 22.034420\n6553 chic  44.0  40.20000 2004-12-09  21.900000  25.500000  3.5000000 26.375000\n6554 chic  41.0  39.50000 2004-12-10  23.100000  25.000000  5.0833333 20.125000\n6555 chic  35.0  26.60000 2004-12-11   5.850000   8.600000 18.1666667 15.291667\n6556 chic  37.0  27.30000 2004-12-12   8.750000  15.500000 18.6439394 10.361111\n6557 chic  25.0  13.00000 2004-12-13  10.000000  20.000000 18.6354167 15.743357\n6558 chic  22.0   9.40000 2004-12-14   7.912500  17.000000 10.6961051 23.875000\n6559 chic  28.0  15.10000 2004-12-15  19.400000  47.000000  6.9008152 24.457729\n6560 chic  36.0  20.40000 2004-12-16  10.500000  32.500000  9.8958333 21.525253\n6561 chic  26.0  16.10000 2004-12-17  14.242857  24.333333  6.1041667 32.402778\n6562 chic  28.0  24.50000 2004-12-18  16.400000  30.500000  8.9166667 18.319444\n6563 chic  11.0  -4.50000 2004-12-19   5.000000  47.000000 21.3854167 17.013889\n6564 chic  20.0   3.80000 2004-12-20   7.728571  50.000000 10.7794384 25.609783\n6565 chic  25.0  13.80000 2004-12-21  17.100000  44.500000 10.4990942 17.045290\n6566 chic  11.0  -0.50000 2004-12-22  12.800000  23.000000 12.2187500 23.486111\n6567 chic  12.0  -0.10000 2004-12-23   7.675000  26.500000 17.0416667 21.625000\n6568 chic   5.0  -7.40000 2004-12-24  11.400000  15.000000 16.5937500 23.250000\n6569 chic  15.0   6.70000 2004-12-25  19.000000  27.500000 10.4791667 21.597222\n6570 chic  18.0  12.10000 2004-12-26  21.850000  27.500000  8.4895833 24.416667\n6571 chic  17.0  12.00000 2004-12-27  37.100000  34.500000  6.5317029 36.505556\n6572 chic  33.0  22.70000 2004-12-28  25.500000  41.000000  4.1363225 29.609903\n6573 chic  33.0  29.10000 2004-12-29  41.322222  51.750000  3.3333333 27.550505\n6574 chic  44.0  41.20000 2004-12-30  35.500000  28.000000  7.0520833 24.847222\n6575 chic  43.0  36.10000 2004-12-31  11.300000  14.000000 16.8437500 15.333333\n6576 chic  33.0  24.80000 2005-01-01  10.525000  16.500000  9.2083333 14.152778\n6577 chic  44.0  39.60000 2005-01-02         NA  16.000000  6.4479167 16.069444\n6578 chic  34.0  31.50000 2005-01-03  17.500000  11.500000 12.6875000 18.625845\n6579 chic  33.0  29.00000 2005-01-04   8.837500  11.600000 17.5484601 19.315217\n6580 chic  29.0  25.50000 2005-01-05   3.300000   9.000000 27.7604167 13.753788\n6581 chic  20.0  18.60000 2005-01-06  21.400000  14.000000 15.4583333 28.305556\n6582 chic  18.0  16.70000 2005-01-07  15.566667  19.500000  8.3600543 31.041667\n6583 chic  26.0  21.40000 2005-01-08  26.700000  24.500000  5.2291667 26.319444\n6584 chic  30.0  27.60000 2005-01-09  19.100000  17.000000 11.4270833 19.027778\n6585 chic  32.0  26.10000 2005-01-10  16.471429  21.000000  8.1761364 25.319444\n6586 chic  33.0  33.40000 2005-01-11  16.200000  20.500000  4.1277174 21.704106\n6587 chic  48.0  45.60000 2005-01-12   9.800000  27.500000  8.1875000 24.899155\n6588 chic  31.0  25.50000 2005-01-13  10.100000   9.500000  9.2305254 22.939010\n6589 chic  10.0  -3.40000 2005-01-14  10.500000  20.500000 17.2062500 26.555556\n6590 chic  10.0  -6.40000 2005-01-15   8.800000  14.000000 18.2708333 25.583333\n6591 chic   9.0  -5.60000 2005-01-16   8.966667  13.400000 23.8645833 18.375000\n6592 chic   7.0  -7.80000 2005-01-17  10.100000  16.000000 16.3333333 28.180556\n6593 chic  12.0   1.70000 2005-01-18  19.300000  44.000000 11.4279891 33.094203\n6594 chic  29.0  22.30000 2005-01-19  15.042857  25.500000 13.1145833 26.924242\n6595 chic  26.0  20.90000 2005-01-20  22.000000  27.500000 13.7708333 26.949495\n6596 chic  21.0  13.50000 2005-01-21  16.800000  25.000000 19.2042572 25.194444\n6597 chic  17.0  12.20000 2005-01-22  11.285714  19.600000 19.3333333 23.944444\n6598 chic  16.0   7.20000 2005-01-23  10.500000  18.500000 19.0729167 31.472222\n6599 chic  26.0  17.30000 2005-01-24  18.600000  26.500000 12.2798913 29.763505\n6600 chic  33.0  27.10000 2005-01-25  32.771429  38.500000  5.7042572 36.403986\n6601 chic  26.0  19.40000 2005-01-26  12.500000  20.000000 19.2812500 26.568182\n6602 chic  13.0   9.30000 2005-01-27  10.800000  22.000000 20.7083333 27.344697\n6603 chic  15.0   5.10000 2005-01-28  24.500000  35.600000  7.5384964 40.425000\n6604 chic  28.0  17.20000 2005-01-29  32.700000  37.500000  3.7604167 39.000000\n6605 chic  30.0  26.20000 2005-01-30         NA  23.000000 12.4062500 23.388889\n6606 chic  28.0  22.00000 2005-01-31  45.528571  54.000000  7.0833333 43.585317\n6607 chic  28.0  23.80000 2005-02-01  26.650000  28.500000 12.8002717 35.041667\n6608 chic  26.0  20.00000 2005-02-02  52.000000  50.500000  6.2414773 46.361111\n6609 chic  30.0  25.00000 2005-02-03  47.450000  53.600000  7.2690217 48.597222\n6610 chic  36.0  32.10000 2005-02-04  61.500000  57.500000  4.8125000 41.527778\n6611 chic  46.0  35.50000 2005-02-05  39.500000  40.500000  8.9062500 29.055556\n6612 chic  43.0  35.40000 2005-02-06  26.342857  27.000000  6.9375000 28.555556\n6613 chic  39.0  39.30000 2005-02-07  19.700000  18.000000  8.9791667 26.331349\n6614 chic  29.0  23.00000 2005-02-08  12.900000   5.000000 19.2323370 18.000000\n6615 chic  28.0  20.00000 2005-02-09  12.014286  17.800000 12.6979167 28.722222\n6616 chic  27.0  16.30000 2005-02-10  22.100000  28.500000 19.1875000 24.347222\n6617 chic  33.0  23.50000 2005-02-11  21.800000  33.500000 14.7187500 23.541667\n6618 chic  42.0  28.60000 2005-02-12  20.914286  29.000000 13.6770833 27.486111\n6619 chic  38.0  34.70000 2005-02-13  23.400000  28.000000 13.4583333 21.208333\n6620 chic  43.0  37.50000 2005-02-14         NA  17.000000 11.2083333 19.458333\n6621 chic  38.0  34.00000 2005-02-15  20.587500  25.000000  5.0697464 32.763889\n6622 chic  30.0  18.20000 2005-02-16  12.800000  27.500000 19.0625000 19.937500\n6623 chic  22.0   8.40000 2005-02-17  10.150000  29.500000 24.0932971 18.655303\n6624 chic  19.0   2.80000 2005-02-18   7.825000  24.500000 17.9895833 24.933575\n6625 chic  32.0  18.00000 2005-02-19  12.000000  23.000000 14.9479167 23.263889\n6626 chic  34.0  32.60000 2005-02-20  14.600000  15.000000 11.8854167 24.791667\n6627 chic  35.0  28.70000 2005-02-21  17.471429  21.600000  8.7083333 22.291667\n6628 chic  29.0  23.10000 2005-02-22  22.800000  28.000000 11.6354167 32.110939\n6629 chic  28.0  19.60000 2005-02-23  23.900000  45.500000 10.8066123 43.166667\n6630 chic  32.0  24.10000 2005-02-24  27.350000  35.500000 10.8691123 40.518939\n6631 chic  34.0  26.00000 2005-02-25  28.600000  40.000000 13.9270833 26.125000\n6632 chic  29.0  20.80000 2005-02-26  12.000000  15.500000 30.4791667 19.583333\n6633 chic  33.0  23.90000 2005-02-27  20.285714  24.200000 14.9687500 23.930556\n6634 chic  31.0  27.40000 2005-02-28  24.200000  21.000000 11.9809783 27.554831\n6635 chic  23.0  12.50000 2005-03-01   7.600000  23.000000 27.9814312 22.055556\n6636 chic  20.0   5.90000 2005-03-02   6.362500  20.500000 24.0321970 25.666667\n6637 chic  24.0  12.70000 2005-03-03  18.000000  38.500000 12.4479167 42.187198\n6638 chic  32.0  26.60000 2005-03-04  36.900000  54.500000  5.3958333 46.569444\n6639 chic  38.0  30.50000 2005-03-05  28.225000  34.200000 17.8125000 24.194444\n6640 chic  50.0  33.60000 2005-03-06  14.700000  26.000000 29.5625000 16.194444\n6641 chic  42.0  29.30000 2005-03-07   9.600000  20.500000 26.7187500 18.561508\n6642 chic  24.0   7.00000 2005-03-08   7.325000  25.000000 25.7038043 22.078502\n6643 chic  24.0   3.90000 2005-03-09   9.700000  24.500000 19.5625000 30.791667\n6644 chic  29.0  22.40000 2005-03-10  16.600000  32.000000  9.2187500 33.347222\n6645 chic  30.0  22.70000 2005-03-11  11.985714  20.500000 23.0937500 19.944444\n6646 chic  26.0  10.70000 2005-03-12   5.500000  24.500000 30.3020833 18.180556\n6647 chic  23.0   7.60000 2005-03-13   8.600000  20.500000 23.9479167 26.319444\n6648 chic  29.0  19.60000 2005-03-14  19.612500  51.000000  9.9343297 39.874569\n6649 chic  31.0  17.40000 2005-03-15  20.800000  49.000000 15.5457428 30.777174\n6650 chic  37.0  21.10000 2005-03-16  19.700000  53.500000 16.8201993 30.944444\n6651 chic  32.0  26.80000 2005-03-17  13.062500  22.400000 26.1041667 25.958333\n6652 chic  39.0  30.90000 2005-03-18  28.700000  43.500000 21.0000000 26.506148\n6653 chic  42.0  36.10000 2005-03-19  26.950000  27.500000 19.1458333 18.458333\n6654 chic  34.0  25.00000 2005-03-20  12.900000  15.500000 32.5208333 17.486111\n6655 chic  32.0  26.50000 2005-03-21  16.700000  19.000000 23.1245471 27.134058\n6656 chic  37.0  26.80000 2005-03-22         NA  19.500000 33.7391304 18.411836\n6657 chic  34.0  26.20000 2005-03-23   6.385714  12.000000 32.4062500 19.861111\n6658 chic  36.0  25.60000 2005-03-24  21.400000  45.000000 12.1562500 45.944444\n6659 chic  36.0  31.00000 2005-03-25  16.100000  14.000000 29.6770833 23.152778\n6660 chic  37.0  30.80000 2005-03-26  17.685714  22.500000 24.2812500 25.500000\n6661 chic  38.0  28.10000 2005-03-27         NA  34.000000 16.2500000 37.069444\n6662 chic  44.0  27.20000 2005-03-28         NA  37.500000 22.6884058 41.097826\n6663 chic  52.0  31.00000 2005-03-29  18.557143  36.800000 22.3772645 39.629227\n6664 chic  66.0  44.30000 2005-03-30  13.850000  56.500000 32.8922101 23.069444\n6665 chic  49.0  38.10000 2005-03-31   5.400000  20.500000 24.3125000 21.222222\n6666 chic  45.0  35.50000 2005-04-01  10.800000  24.000000 18.5600414 32.443182\n6667 chic  43.0  30.90000 2005-04-02   6.050000  15.000000 32.2916667 18.125000\n6668 chic  48.0  27.30000 2005-04-03   7.500000  24.000000 22.4404762 31.261473\n6669 chic  52.0  33.70000 2005-04-04  18.100000  47.500000 25.7428830 38.083333\n6670 chic  62.0  48.80000 2005-04-05  16.700000  40.000000 36.1071429 23.625000\n6671 chic  63.0  50.30000 2005-04-06         NA  37.000000 25.3867754 23.602843\n6672 chic  48.0  35.50000 2005-04-07   5.871429  11.500000 40.7797619 13.401042\n6673 chic  49.0  31.10000 2005-04-08   5.400000  17.500000 33.9821429 26.531250\n6674 chic  52.0  32.50000 2005-04-09  12.400000  26.500000 30.5952381 25.838542\n6675 chic  62.0  42.30000 2005-04-10  22.385714  46.500000 41.0327381 22.729167\n6676 chic  65.0  32.60000 2005-04-11  13.300000  67.000000 45.9948240 17.824728\n6677 chic  48.0  34.60000 2005-04-12   8.100000  21.000000 28.4838839 22.328869\n6678 chic  47.0  24.90000 2005-04-13   5.150000  16.000000 36.8510611 14.748958\n6679 chic  47.0  23.40000 2005-04-14   6.600000  17.500000 35.6881470 23.557292\n6680 chic  48.0  28.00000 2005-04-15   7.300000  32.500000 27.3555195 35.395833\n6681 chic  56.0  34.40000 2005-04-16  18.550000  47.200000 26.8988095 36.296875\n6682 chic  62.0  44.50000 2005-04-17  29.600000  40.000000 37.1994048 32.687500\n6683 chic  64.0  44.90000 2005-04-18  25.800000  76.500000 34.6884058 47.922554\n6684 chic  71.0  48.00000 2005-04-19  19.085714  69.000000 38.1790890 24.727582\n6685 chic  57.0  46.80000 2005-04-20   9.400000  22.500000 27.4782609 12.957386\n6686 chic  50.0  30.60000 2005-04-21   3.700000  19.500000 31.1130952 16.072917\n6687 chic  42.0  38.40000 2005-04-22   7.512500  14.200000 29.8476967 18.593750\n6688 chic  39.0  26.00000 2005-04-23   3.500000  11.000000 37.9523810 10.739583\n6689 chic  44.0  24.10000 2005-04-24   1.700000  14.000000 37.4404762 10.864583\n6690 chic  53.0  29.40000 2005-04-25   4.842857  40.000000 32.4101967 18.989583\n6691 chic  50.0  35.30000 2005-04-26   5.800000  28.500000 25.3174172 15.274521\n6692 chic  48.0  29.80000 2005-04-27   6.350000  37.500000 27.2850303 15.958333\n6693 chic  48.0  29.70000 2005-04-28  10.312500  28.800000 27.4316770 19.990327\n6694 chic  46.0  25.70000 2005-04-29   8.700000  24.500000 31.0238095 19.807292\n6695 chic  46.0  26.10000 2005-04-30  13.300000  31.500000 26.7619048 25.010417\n6696 chic  42.0  26.60000 2005-05-01   6.185714  25.500000 20.6726190 14.843750\n6697 chic  40.0  25.10000 2005-05-02   8.000000  24.000000 17.0119048 15.359649\n6698 chic  43.0  24.10000 2005-05-03  10.600000  25.500000 22.4749646 22.623868\n6699 chic  48.0  24.00000 2005-05-04  15.900000  44.800000 26.3588509 32.659564\n6700 chic  54.0  29.20000 2005-05-05  20.300000  61.500000 34.8928571 34.344882\n6701 chic  63.0  43.10000 2005-05-06  19.800000  65.500000 34.5589356 36.904762\n6702 chic  53.0  44.00000 2005-05-07  14.050000  25.500000 34.2083333 22.020833\n6703 chic  64.0  47.30000 2005-05-08  17.100000  42.000000 43.6130952 23.390625\n6704 chic  70.0  56.10000 2005-05-09  16.400000  62.500000 31.9255952 23.296875\n6705 chic  71.0  51.70000 2005-05-10   7.662500  33.250000 31.1218944 22.877264\n6706 chic  54.0  44.40000 2005-05-11         NA  17.000000 26.6130952 11.953125\n6707 chic  49.0  36.70000 2005-05-12   5.100000  17.000000 24.4017857 12.135417\n6708 chic  61.0  49.80000 2005-05-13  17.000000  36.000000 18.1696429 25.385417\n6709 chic  56.0  43.60000 2005-05-14   6.900000  14.000000 28.8601190 11.166667\n6710 chic  48.0  37.50000 2005-05-15   2.400000  10.000000 19.6934524 11.750000\n6711 chic  52.0  35.10000 2005-05-16   4.828571  20.750000 24.1470567 17.042120\n6712 chic  60.0  42.80000 2005-05-17  13.350000  37.000000 32.8034420 24.450893\n6713 chic  66.0  46.30000 2005-05-18  16.800000  48.000000 42.0059524 22.502841\n6714 chic  62.0  56.70000 2005-05-19  31.528571  43.500000 21.0605590 27.229167\n6715 chic  58.0  44.90000 2005-05-20  13.950000  24.500000 37.5744048 17.197917\n6716 chic  58.0  44.00000 2005-05-21  13.800000  42.000000 32.7410714 31.776042\n6717 chic  69.0  47.80000 2005-05-22  11.050000  28.000000 34.1250000 22.437500\n6718 chic  61.0  48.30000 2005-05-23   9.800000  18.500000 32.4136905 13.956975\n6719 chic  57.0  45.50000 2005-05-24   8.700000  13.000000 27.0428313 16.393116\n6720 chic  58.0  44.70000 2005-05-25   7.050000  19.000000 25.4633799 20.021307\n6721 chic  66.0  43.90000 2005-05-26  10.800000  39.500000 22.0000000 29.894928\n6722 chic  59.0  44.00000 2005-05-27   8.700000  37.500000 22.6885352 22.392663\n6723 chic  58.0  44.80000 2005-05-28   7.214286  16.400000 21.1845238 21.645833\n6724 chic  57.0  44.40000 2005-05-29         NA  17.500000 23.1309524 24.260417\n6725 chic  60.0  45.90000 2005-05-30         NA  19.500000 32.2500000 21.713542\n6726 chic  59.0  49.00000 2005-05-31   8.328571  14.000000 22.8907867 20.819067\n6727 chic  65.0  49.80000 2005-06-01  15.400000  27.500000 37.2199852 21.838542\n6728 chic  66.0  54.40000 2005-06-02  19.000000  35.500000 34.7954031 23.166667\n6729 chic  67.0  60.90000 2005-06-03  27.112500  39.000000 29.1041667 19.209177\n6730 chic  72.0  63.50000 2005-06-04  21.400000  35.500000 36.0989583 21.994792\n6731 chic  78.0  62.40000 2005-06-05  16.000000  23.500000 44.1796875 11.968750\n6732 chic  78.0  57.60000 2005-06-06   7.228571  33.000000 35.6354167 19.890399\n6733 chic  77.0  62.40000 2005-06-07  16.800000  39.500000 39.2944973 27.984828\n6734 chic  78.0  65.10000 2005-06-08  19.200000  37.000000 33.4615036 30.131793\n6735 chic  77.0  63.40000 2005-06-09  13.771429  29.600000 25.1966712 33.192708\n6736 chic  78.0  68.10000 2005-06-10  20.100000  38.000000 32.7043705 25.255208\n6737 chic  80.0  67.50000 2005-06-11  14.500000  27.000000 33.7109375 14.291667\n6738 chic  75.0  66.50000 2005-06-12  13.185714  18.000000 26.9322917 13.510417\n6739 chic  78.0  64.20000 2005-06-13  19.400000  31.000000 37.5447958 19.735863\n6740 chic  74.0  60.10000 2005-06-14   6.800000  30.000000 35.2216115 14.392437\n6741 chic  64.0  57.30000 2005-06-15   6.187500  17.400000 18.7296196 14.727273\n6742 chic  66.0  46.80000 2005-06-16   6.800000  19.500000 26.0099432 19.927083\n6743 chic  61.0  49.00000 2005-06-17   5.600000   9.500000 20.9997736 13.807292\n6744 chic  62.0  50.70000 2005-06-18   4.200000   8.500000 19.0364583 13.859375\n6745 chic  65.0  53.50000 2005-06-19   7.000000  19.000000 26.5885417 14.027778\n6746 chic  69.0  54.50000 2005-06-20  16.600000  42.500000 34.6831975 33.992788\n6747 chic  75.0  58.00000 2005-06-21  16.471429  41.000000 40.0652174 25.500000\n6748 chic  72.0  44.60000 2005-06-22  11.300000  19.000000 31.8234107 20.155838\n6749 chic  77.0  60.80000 2005-06-23  23.300000  62.500000 44.3263134 26.838542\n6750 chic  86.0  63.40000 2005-06-24  31.857143  74.000000 50.9664855 23.750000\n6751 chic  80.0  66.00000 2005-06-25  28.100000  48.000000 46.3988095 22.791667\n6752 chic  82.0  66.10000 2005-06-26  23.000000  42.500000 55.2202381 17.197917\n6753 chic  82.0  64.60000 2005-06-27  51.537500  79.000000 55.2358572 28.549366\n6754 chic  85.0  64.10000 2005-06-28  31.200000  57.500000 50.2914402 26.553977\n6755 chic  82.0  67.50000 2005-06-29  22.200000  47.000000 43.0280797 25.859400\n6756 chic  82.0  63.40000 2005-06-30  15.885714  38.000000 45.1177536 19.437500\n6757 chic  69.0  51.60000 2005-07-01   6.300000  16.000000 30.0364583  9.322917\n6758 chic  65.0  50.20000 2005-07-02   4.200000  13.000000 30.7916667  9.277778\n6759 chic  70.0  55.80000 2005-07-03  16.112500  26.800000 38.4010417 15.659873\n6760 chic  77.0  64.40000 2005-07-04  23.200000  32.500000 36.6041667 12.968750\n6761 chic  75.0  61.60000 2005-07-05         NA  22.500000 30.2861187 13.370652\n6762 chic  72.0  61.90000 2005-07-06  12.685714  16.000000 33.8668067 10.326389\n6763 chic  73.0  58.00000 2005-07-07   9.900000  21.500000 36.0953471 11.253623\n6764 chic  73.0  54.10000 2005-07-08   9.300000  18.000000 37.2552083 18.062274\n6765 chic  72.0  52.50000 2005-07-09  16.350000  37.500000 42.1927083 21.729167\n6766 chic  76.0  53.20000 2005-07-10  15.400000  28.000000 57.9062500 23.958333\n6767 chic  76.0  58.80000 2005-07-11  19.100000  38.000000 57.6451540 19.708333\n6768 chic  79.0  65.50000 2005-07-12  26.187500  35.000000 58.8412591 14.816220\n6769 chic  80.0  66.00000 2005-07-13  19.100000  25.000000 39.3333333 10.162202\n6770 chic  79.0  67.00000 2005-07-14  19.600000  31.500000 34.5258152 12.506114\n6771 chic  79.0  65.60000 2005-07-15  15.757143  28.400000 27.3966259 16.098958\n6772 chic  81.0  63.80000 2005-07-16  19.600000  29.000000 38.0885417 16.593750\n6773 chic  84.0  67.00000 2005-07-17  32.700000  42.500000 44.6432292 16.270833\n6774 chic  83.0  64.60000 2005-07-18  12.837500  37.500000 36.4478034 13.018957\n6775 chic  79.0  57.60000 2005-07-19  10.900000  35.000000 36.9130111 19.398810\n6776 chic  78.0  67.80000 2005-07-20  15.600000  37.500000 26.1204298 27.680871\n6777 chic  79.0  68.90000 2005-07-21  12.375000  23.800000 35.3736413 22.459541\n6778 chic  75.0  65.30000 2005-07-22  10.000000  14.500000 36.3177083 16.033482\n6779 chic  74.0  68.30000 2005-07-23         NA  26.000000 28.3958333 19.750000\n6780 chic  90.0  70.90000 2005-07-24  22.050000  44.000000 47.6041667 11.963542\n6781 chic  81.0  71.40000 2005-07-25         NA  32.500000 30.8409194 27.977679\n6782 chic  75.0  66.80000 2005-07-26         NA  23.000000 29.2653061 15.864583\n6783 chic  65.0  53.30000 2005-07-27   7.675000  15.400000 21.3832654 14.501637\n6784 chic  66.0  52.10000 2005-07-28  14.800000  29.000000 23.0859375 25.852808\n6785 chic  72.0  58.20000 2005-07-29         NA  32.500000 26.4765625 22.359375\n6786 chic  73.0  59.70000 2005-07-30  12.837500  22.000000 32.4348958 18.911458\n6787 chic  79.0  64.60000 2005-07-31  20.800000  29.500000 40.8489583 20.166667\n6788 chic  81.0  65.00000 2005-08-01  28.700000  56.500000 41.9490489 26.831101\n6789 chic  79.0  66.10000 2005-08-02  44.487500  60.000000 40.6713089 29.280344\n6790 chic  84.0  69.00000 2005-08-03  37.900000  64.000000 39.3211051 23.619318\n6791 chic  82.0  66.10000 2005-08-04  21.600000  45.500000 37.2974411 18.677083\n6792 chic  73.0  56.50000 2005-08-05   7.428571  27.500000 28.0364583 17.817708\n6793 chic  72.0  55.90000 2005-08-06  11.000000  20.500000 33.3958333 19.552083\n6794 chic  74.0  57.80000 2005-08-07  25.900000  40.000000 44.9947917 28.375000\n6795 chic  78.0  57.80000 2005-08-08  31.662500  55.400000 39.6128850 38.869730\n6796 chic  80.0  63.50000 2005-08-09  33.000000  65.500000 43.2863451 28.884511\n6797 chic  79.0  65.90000 2005-08-10  16.000000  33.500000 42.8753059 19.588636\n6798 chic  72.0  67.00000 2005-08-11  14.785714  24.000000 21.5434783 31.854167\n6799 chic  79.0  68.90000 2005-08-12         NA  27.000000 30.7906476 23.987500\n6800 chic  72.0  61.00000 2005-08-13  10.100000  14.000000 27.4088542 15.125000\n6801 chic  69.0  57.50000 2005-08-14   7.600000  15.000000 22.7447917 15.861111\n6802 chic  71.0  62.40000 2005-08-15  16.400000  34.500000 27.3875679 29.006944\n6803 chic  74.0  62.00000 2005-08-16  21.400000  36.500000 34.1218297 26.802083\n6804 chic  71.0  60.80000 2005-08-17  20.762500  41.000000 39.4198370 23.953125\n6805 chic  77.0  68.90000 2005-08-18         NA  41.000000 26.4531250 24.411458\n6806 chic  79.0  66.90000 2005-08-19  14.500000  28.000000 35.8140625 17.685974\n6807 chic  78.0  67.70000 2005-08-20   9.885714  18.600000 27.2734375 15.791667\n6808 chic  74.0  54.40000 2005-08-21   7.900000  12.000000 24.3802083 13.834239\n6809 chic  67.0  52.70000 2005-08-22   4.000000   8.000000 22.7417346 10.161458\n6810 chic  66.0  52.70000 2005-08-23   5.085714   9.000000 27.1679121 12.967618\n6811 chic  67.0  56.00000 2005-08-24         NA  28.500000 28.0146060 15.166667\n6812 chic  72.0  58.50000 2005-08-25  18.500000  46.500000 35.5610119 22.131629\n6813 chic  75.0  64.30000 2005-08-26  31.300000  49.400000 37.4564394 30.952178\n6814 chic  76.0  59.60000 2005-08-27  18.600000  30.000000 31.6562500 19.656250\n6815 chic  75.0  57.60000 2005-08-28  12.000000  19.000000 35.0052083 16.755208\n6816 chic  74.0  59.00000 2005-08-29  13.357143  26.500000 33.4200634 23.711277\n6817 chic  71.0  61.30000 2005-08-30  15.900000  22.000000 32.3285779 19.275815\n6818 chic  71.0  58.90000 2005-08-31   8.100000  18.500000 17.5076993 19.365057\n6819 chic  76.0  51.40000 2005-09-01   9.800000  33.000000 21.3223505 28.192613\n6820 chic  72.0  46.10000 2005-09-02   8.600000  37.500000 22.6129982 26.791667\n6821 chic  69.0  54.60000 2005-09-03  10.250000  17.500000 21.4479167 19.250000\n6822 chic  70.0  55.80000 2005-09-04  12.285714  24.000000 25.5625000 18.166667\n6823 chic  73.0  57.60000 2005-09-05  17.400000  25.000000 39.2343750 17.921875\n6824 chic  74.0  56.80000 2005-09-06  28.900000  50.000000 41.5176630 27.641304\n6825 chic  78.0  60.30000 2005-09-07  32.371429  53.800000 39.4282156 34.723214\n6826 chic  72.0  64.70000 2005-09-08  17.100000  23.000000 41.0919178 16.609375\n6827 chic  74.0  62.80000 2005-09-09  20.100000  39.000000 36.5815217 21.598958\n6828 chic  80.0  62.90000 2005-09-10  37.887500  55.000000 47.5781250 19.385417\n6829 chic  80.0  61.80000 2005-09-11  56.500000  65.000000 51.7395833 18.875000\n6830 chic  79.0  57.70000 2005-09-12  44.300000  78.500000 44.5423460 28.048363\n6831 chic  83.0  59.80000 2005-09-13  28.675000  59.000000 39.3420105 25.748106\n6832 chic  67.0  57.90000 2005-09-14   8.500000  18.000000 23.8689236 14.678504\n6833 chic  62.0  52.90000 2005-09-15   6.600000  12.000000 23.1953125 14.093750\n6834 chic  62.0  55.40000 2005-09-16   7.428571  12.000000 23.9739583 16.250000\n6835 chic  65.0  54.40000 2005-09-17   9.700000  21.500000 20.1093750 22.572917\n6836 chic  68.0  55.80000 2005-09-18  15.000000  22.000000 25.2031250 24.380208\n6837 chic  75.0  64.70000 2005-09-19  19.685714  29.600000 25.5674819 19.968750\n6838 chic  69.0  55.90000 2005-09-20  13.200000  32.500000 20.1879529 35.925272\n6839 chic  70.0  54.70000 2005-09-21  18.200000  49.000000 29.0465839 33.177083\n6840 chic  75.0  64.50000 2005-09-22  22.542857  42.500000 34.2026915 18.883929\n6841 chic  65.0  52.90000 2005-09-23   4.800000   9.500000 25.5205628 11.125000\n6842 chic  67.0  59.20000 2005-09-24  18.400000  25.500000 14.2261905 22.736111\n6843 chic  71.0  67.40000 2005-09-25  21.428571  26.000000 13.5267857 18.347222\n6844 chic  60.0  58.60000 2005-09-26   7.600000  14.500000 12.5278209 19.916667\n6845 chic  61.0  51.20000 2005-09-27  14.900000  32.500000 13.3602955 30.055556\n6846 chic  62.0  53.20000 2005-09-28   9.916667  28.500000 18.4133023 24.750000\n6847 chic  53.0  34.90000 2005-09-29   5.300000  14.500000 12.3236284 19.402778\n6848 chic  58.0  38.00000 2005-09-30   7.900000  33.500000 15.5639234 26.986111\n6849 chic  65.0  48.40000 2005-10-01  16.400000  29.200000 25.9523810 28.277778\n6850 chic  69.0  62.00000 2005-10-02  21.700000  28.000000 29.4523810 19.569444\n6851 chic  78.0  67.30000 2005-10-03  23.000000  43.000000 25.2397774 21.164683\n6852 chic  79.0  66.30000 2005-10-04  23.150000  46.500000 27.5251035 22.652778\n6853 chic  77.0  63.20000 2005-10-05         NA  47.000000 30.5253623 24.917874\n6854 chic  58.0  38.80000 2005-10-06   6.300000  16.500000 13.3207816 11.680556\n6855 chic  49.0  37.60000 2005-10-07   4.271429  10.750000 15.1458333 14.422222\n6856 chic  48.0  38.90000 2005-10-08   4.500000   6.500000 26.0000000 11.486111\n6857 chic  53.0  43.10000 2005-10-09   4.400000   7.500000 27.7738095 10.736111\n6858 chic  54.0  47.20000 2005-10-10   7.871429  12.500000 18.5476190 17.375000\n6859 chic  58.0  52.00000 2005-10-11   7.600000  13.500000 11.9583333 15.555556\n6860 chic  59.0  54.40000 2005-10-12  18.700000  24.500000  3.0437371 20.986111\n6861 chic  61.0  53.20000 2005-10-13  29.800000  48.200000  8.9943064 29.387077\n6862 chic  62.0  48.20000 2005-10-14  16.100000  38.500000 15.1458333 28.152778\n6863 chic  58.0  34.90000 2005-10-15   5.400000  20.500000 23.7529762 23.222222\n6864 chic  52.0  39.50000 2005-10-16   7.900000  12.500000 16.9464286 20.055556\n6865 chic  58.0  44.80000 2005-10-17  11.650000  29.500000 14.6687371 28.013889\n6866 chic  58.0  42.10000 2005-10-18  11.200000  36.000000 12.8161232 31.493357\n6867 chic  56.0  41.30000 2005-10-19   5.612500  16.400000 23.3097591 17.518759\n6868 chic  51.0  40.30000 2005-10-20   6.800000  17.000000 18.7500000 17.146135\n6869 chic  53.0  41.30000 2005-10-21   9.600000  12.500000 22.2452307 19.839286\n6870 chic  46.0  39.90000 2005-10-22  13.337500  18.000000  8.2708333 23.500000\n6871 chic  40.0  36.70000 2005-10-23   8.500000  10.000000 11.6428571 18.083333\n6872 chic  46.0  37.90000 2005-10-24   5.000000   7.000000 11.7351190 15.404589\n6873 chic  45.0  37.70000 2005-10-25   4.487500   8.250000 14.6273292 18.137077\n6874 chic  44.0  33.50000 2005-10-26   7.600000  14.000000 10.0982143 25.128968\n6875 chic  44.0  35.90000 2005-10-27  10.800000  19.000000 10.0357143 27.666667\n6876 chic  44.0  35.10000 2005-10-28  16.925000  25.500000 10.2067805 33.180556\n6877 chic  45.0  34.30000 2005-10-29  22.600000  37.000000 11.4910714 27.875000\n6878 chic  54.0  37.00000 2005-10-30  20.700000  25.000000 26.1607143 18.041667\n6879 chic  54.0  49.40000 2005-10-31  31.925000  39.200000 11.4257952 21.577899\n6880 chic  48.0  37.50000 2005-11-01  16.000000  27.000000  6.9360507 22.728535\n6881 chic  52.0  35.40000 2005-11-02   8.500000  28.500000 11.8916667 23.010266\n6882 chic  62.0  40.70000 2005-11-03   9.675000  34.500000 24.8771739 22.569444\n6883 chic  60.0  38.00000 2005-11-04  14.800000  47.500000 18.9062500 24.791667\n6884 chic  54.0  50.60000 2005-11-05  27.200000  32.000000 11.4722222 18.208333\n6885 chic  51.0  42.00000 2005-11-06   5.987500  10.400000 15.1250000 13.986111\n6886 chic  49.0  43.20000 2005-11-07  17.400000  31.000000  7.3707428 25.064182\n6887 chic  55.0  49.80000 2005-11-08  40.000000  36.500000  4.1005435 27.222222\n6888 chic  54.0  37.80000 2005-11-09   8.437500  25.000000 17.8958333 11.916667\n6889 chic  39.0  25.60000 2005-11-10         NA  24.000000  9.5625000 23.805556\n6890 chic  47.0  30.50000 2005-11-11  14.800000  41.500000  8.1979167 33.944444\n6891 chic  54.0  38.70000 2005-11-12  13.842857  27.500000 20.5520833 22.527778\n6892 chic  49.0  35.70000 2005-11-13   5.700000  17.500000 24.9270833  9.763889\n6893 chic  39.0  33.60000 2005-11-14   8.300000  17.000000 10.4687500 24.719807\n6894 chic  46.0  42.50000 2005-11-15   9.300000  10.500000  8.4510870 16.597222\n6895 chic  29.0  19.20000 2005-11-16   4.700000  27.500000 16.9687500 10.347222\n6896 chic  22.0   7.80000 2005-11-17   8.800000  20.500000 12.8229167 20.638889\n6897 chic  30.0  21.10000 2005-11-18  11.714286  22.400000  4.5277778 24.958333\n6898 chic  43.0  28.10000 2005-11-19  15.800000  25.500000 11.3888889 26.729167\n6899 chic  39.0  33.00000 2005-11-20  19.100000  17.000000  9.8194444 19.041667\n6900 chic  42.0  31.50000 2005-11-21  12.850000  21.000000 11.7083333 14.860870\n6901 chic  32.0  19.30000 2005-11-22         NA  19.000000 12.9873188 26.166667\n6902 chic  37.0  29.60000 2005-11-23         NA  13.500000  6.8121981 21.854167\n6903 chic  29.0  -0.60000 2005-11-24   3.275000  12.500000 26.6944444  8.833333\n6904 chic  20.0   5.30000 2005-11-25   5.500000  16.000000 11.5416667 22.687500\n6905 chic  32.0  20.40000 2005-11-26  17.900000  21.000000  6.6805556 27.104167\n6906 chic  48.0  46.00000 2005-11-27  19.166667  16.000000 11.6666667 20.958333\n6907 chic  50.0  44.70000 2005-11-28  12.400000  18.500000 15.2364130 16.075092\n6908 chic  33.0  22.90000 2005-11-29   7.900000  14.000000 11.5910326 13.094203\n6909 chic  24.0  17.20000 2005-11-30  12.614286  17.800000  9.1902174 21.888889\n6910 chic  25.0  18.00000 2005-12-01  18.400000  18.500000  7.0312500 24.444444\n6911 chic  19.0   8.50000 2005-12-02         NA  19.500000  9.1562500 23.291667\n6912 chic  25.0  19.00000 2005-12-03  13.342857  20.000000 10.3333333 25.194444\n6913 chic  20.0  15.80000 2005-12-04  15.300000  15.500000 13.1770833 21.708333\n6914 chic  11.0   2.80000 2005-12-05         NA  30.000000  6.4479167 28.388889\n6915 chic  11.0   3.20000 2005-12-06  24.616667  33.000000  4.7015399 29.083333\n6916 chic   8.0  -1.80000 2005-12-07  37.800000  39.000000  3.9162138 34.309524\n6917 chic  16.0  15.60000 2005-12-08  24.300000  31.000000  5.9952652 34.222222\n6918 chic  20.0  10.90000 2005-12-09  25.450000  22.000000  5.9583333 31.416667\n6919 chic  22.0  16.20000 2005-12-10  18.200000  30.000000  9.1354167 28.708333\n6920 chic  20.0  17.20000 2005-12-11  10.600000  14.000000 11.3333333 22.555556\n6921 chic  19.0  11.60000 2005-12-12  19.225000  28.750000  5.0312500 39.746212\n6922 chic  26.0  19.80000 2005-12-13  26.500000  21.000000  6.6286232 29.569444\n6923 chic  32.0  27.40000 2005-12-14  26.900000  16.000000  3.8020833 30.633838\n6924 chic  30.0  27.90000 2005-12-15  14.400000  16.500000  4.8958333 25.430556\n6925 chic  21.0  14.70000 2005-12-16  11.000000  22.000000 11.1666667 16.875000\n6926 chic  16.0   7.30000 2005-12-17  13.800000  20.000000  8.5937500 20.736111\n6927 chic  10.0   1.90000 2005-12-18  12.200000  17.500000 13.5520833 19.111111\n6928 chic   5.0  -0.30000 2005-12-19  21.150000  21.000000  8.0588768 31.791667\n6929 chic  13.0   7.70000 2005-12-20  25.750000  32.000000  3.8491848 32.897727\n6930 chic  12.0   7.70000 2005-12-21  37.928571  59.500000  3.6639493 34.861111\n6931 chic  22.0  23.30000 2005-12-22  36.650000  42.500000  5.3854167 33.730263\n6932 chic  41.0  32.60000 2005-12-23  32.900000  34.500000  6.9062500 29.083333\n6933 chic  37.0  35.20000 2005-12-24  30.771429  25.200000  1.7708333 31.986111\n6934 chic  35.0  32.10000 2005-12-25   6.700000   8.000000 14.3541667 13.791667\n6935 chic  35.0  29.60000 2005-12-26   8.400000   8.500000 14.0416667 16.819444\n6936 chic  40.0  33.60000 2005-12-27  23.560000  27.000000  4.4687500 23.500000\n6937 chic  37.0  34.50000 2005-12-28  17.750000  27.500000  3.2604167 19.285628\n6938 chic  35.0  29.40000 2005-12-29   7.450000  23.500000  6.7948370 19.972222\n6939 chic  36.0  31.00000 2005-12-30  15.057143  19.200000  3.0344203 22.805556\n6940 chic  35.0  30.10000 2005-12-31  15.000000  23.500000  2.5312500 13.250000"
  },
  {
    "objectID": "modules/m12/m12-intro.html#topics",
    "href": "modules/m12/m12-intro.html#topics",
    "title": "M12 Visualization",
    "section": "Topics",
    "text": "Topics\n\nR’s basic visualization tools\nGGPlot2\nRMarkown"
  },
  {
    "objectID": "modules/m12/m12-intro.html#readings",
    "href": "modules/m12/m12-intro.html#readings",
    "title": "M12 Visualization",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nW3Schools R Graphics\n\n\nRFDS Explore 3 Data Visualization (ggplot2)\n\n\nRDFS Communicate 27 R Markdown\n\n\nRDFS Communicate 28 Graphics for Communication\n\n\n\n\nOptional\n\n\nggplot2 (Tidyverse)\n\n\nThe Complete ggplot2 Tutorial (r-statitics.co)\n\n\nR Markdown (RStudio)\n\n\nOverview (RStudio)\n\n\nIndex of Pages (RStudio)\n\n\nknitr (Yihui Xie)  \n\n\nR Markdown: the Definitive Guide (Yihui Xie, J. J. Allaire, Garrett Grolemund)\n\n\nR Markdown Cookbook (Yihui Xie, Christophe Dervieux, Emily Riederer)\n\n\nGetting Started with R Markdown — Guide and Cheatsheet (Dataquest)\n\n\nGallery (RStudio)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "title": "NB: GGPlot2",
    "section": "",
    "text": "Examples\nLet look at how to build out graphics using the built-in diamonds data.\nHere’s another way to construct a graphic. By assigning it a variable, we can keep adding to it and showing out work.\nstroke controls the thickness of point boundary\nLet’s map the variables carat, cut and color to various aesthetics in our geometry function:\nFilled time series can be plotted using geom_ribbon(). It takes two compulsory arguments ymin and ymax.\nThe oulier points are controlled by the following aesthetics:\nIf the notch is turned on (by setting it TRUE), the below boxplot is produced. Else, you would get the standard rectangular boxplots."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#introduction",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#introduction",
    "title": "NB: GGPlot2",
    "section": "Introduction",
    "text": "Introduction\nToday we’ll look at GGPlot2, the graphics package associated with the Tidyverse."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "title": "NB: GGPlot2",
    "section": "Learning Goal",
    "text": "Learning Goal\nYou will be introduced into how and why to use visualizations in DS 6001.\n\nVisualizations in EDA\nVisualization in creating data products that communicate results, such as scientific publications, infographics, and interactive visualizations.\n\nThese things come at the end of the data science pipeline.\nToday, I just want to introduce you to the thinking and design logic behind the package, so you can be confident in learning more as you need to."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "title": "NB: GGPlot2",
    "section": "The Grammar of Graphics",
    "text": "The Grammar of Graphics\nAs with Dplyr, GGPlot2 is a an entirely new system that supplants the older graph functions that are built into R.\nAnd just as with Dplyr, it is founded on a principled analysis of its domain and approaches code design through developing a basic grammar which can then be expressed in R.\nIn effect, Dplyr is built on a grammar of data by defining a set of verbs that can be used to build phrases that are put together into larger constructs.\nThese verbs correspond to a process of data transformation.\nGGPlot2 is built on a grammar of graphics that defines a set of nouns that correspond to the architecture of a graphic (aka plot).\nThe phrase “grammar of graphics” actually comes from the book by that name written by statistician and computer scientist Leland Wilkinson in 1999 and later revised:\n\n\n\nThe Second Edition\n\n\nIt’s worth reading if you want to get a solid grounding in visualization, which belongs to the design area of data science."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "title": "NB: GGPlot2",
    "section": "A Layered Model",
    "text": "A Layered Model\nWilkinson takes an object-oriented approach to visualization and formalizes two main principles:\n\nGraphics are built out of distinct layers of grammatical elements.\nIn each layer, meaningful plots are constructed through mappings of data onto aesthetics.\n\nThe essential grammatical elements to create any visualization are:\n\nAccording to Wickham, who adopted these principles and applied them to R,\n\nA grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g., the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics (Wickham 2012).\n\nWickham takes this idea and develops it into this:\n\nSource (see also ScienceCraft).\nYou can see that everything starts with data.\nThen data are mapped on aesthetics within geometries.\n\nGeometries are geometric things like points, lines, and bars.\nAesthetics are visual things like position, size, color and shape.\n\nYou can see how the latter are properties of the former.\nAlso note that aesthetics make use of visual channels to signify\n\nSize can means greater than, which is good for numeric scale but not categories\nColor can signify things like value, e.g. via red : dangerous : : green : safe.\n\nThese are the primary layers. The other layers apply downstream modifications that add more information and style to the graph."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "title": "NB: GGPlot2",
    "section": "The Bare Minimum",
    "text": "The Bare Minimum\nEverything starts with ggplot() which is part of the Tidyverse.\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.5     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.1\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nHere is a basic graph – a scatterplot comparing two features in the iris dataset. I’ve broken out the functions and arguments so you can see how the grammar is implemented:\n\niris %>%\nggplot(\n  mapping = aes(\n    x = Sepal.Length, \n    y = Sepal.Width)\n  ) + \n  geom_point(size=3, aes(color=Species))\n\n\n\n\nggplot() starts by creating a coordinate system that you can add layers to.\n\nThe coordinate system can be changed after the graph is initiated.\n\nThese layers are created by geometry functions.\n\nFor example, geom_point creates a point-based visualization.\nThere are many geom_ functions, and they can be layered on top of each other:\n\ngeom_point()\ngeom_bar()\ngeom_histogram()\ngeom_boxplot()\netc.\n\n\nHere we have a plot with two layers. The second layer is created by a stat function, which is similar to geom, but applies a statistical transformation to the data.\n\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nThe core the process is that each layer maps data onto what are called aesthetics (aes).\nAesthetics are visual objects and properties that can used to represent numeric and categorical values\n\nx and y positions (in a two-dimensional system)\nColor\nSize\nShape\nText\n\nIn addition to these elements, ggplot also provides faceting, which is the visual equivalent of grouping by. Just as with group by, a data feature is used to divide the visualization into groups, each taking the same form but showing a different subset of data.\n\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm) +\n  facet_wrap(facets = vars(Species))\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\nBy the way, this is an example of Simpson’s Paradox. The overall trend is downward, but each group trend upward.\n\n\niris %>%\n  ggplot(aes(\n    x = Sepal.Length, \n    y = Sepal.Width)) + \n    geom_point(size=3, aes(color=Species)) + \n    stat_smooth(method = lm) +\n    stat_smooth(method = lm, se=FALSE, aes(color=Species))\n\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nAnyway, the general structure of a ggplot statement is the following:\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(\n     mapping = aes(<MAPPINGS>),\n     stat = <STAT>, \n     position = <POSITION>\n  ) +\n  <COORDINATE_FUNCTION> +\n  <FACET_FUNCTION>"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "title": "NB: GGPlot2",
    "section": "The + operator",
    "text": "The + operator\nYou will notice the use of the + operator to connect ggplot functions together to produce a final product. Theses are not quite the same as pipes %>%.\nThe difference is that pipes feed data from one function to another, whereas the + operation combines elements to produce an increasingly developed visualization.\nAnother thing to keep in mind: the + always goes at the end of a line, not at the beginning."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "title": "NB: GGPlot2",
    "section": "Add Title, X and Y axis labels with labs()",
    "text": "Add Title, X and Y axis labels with labs()\n\ngg1 <- gg + geom_point(aes(color=color))\ngg2 <- gg1 + labs(title=\"Diamonds\", x=\"Carat\", y=\"Price\") \ngg2"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "title": "NB: GGPlot2",
    "section": "Change color of all text with theme()",
    "text": "Change color of all text with theme()\n\ngg2 + theme(text=element_text(color=\"blue\"))  # all text turns blue."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "title": "NB: GGPlot2",
    "section": "Change title, X and Y axis label and text size",
    "text": "Change title, X and Y axis label and text size\n\nplot.title: Controls plot title.\naxis.title.x: Controls X axis title\naxis.title.y: Controls Y axis title\naxis.text.x: Controls X axis text\naxis.text.y: Controls y axis text\n\n\ngg3 <- gg2 + \n  theme(plot.title=element_text(size=25), \n        axis.title.x=element_text(size=20),\n        axis.title.y=element_text(size=20),\n        axis.text.x=element_text(size=15),\n        axis.text.y=element_text(size=15)\n        )\ngg3"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "title": "NB: GGPlot2",
    "section": "Change title face, color, line height",
    "text": "Change title face, color, line height\n\ngg3 + \n  labs(title = \"Plot Title\\nSecond Line of Plot Title\") +\n  theme(plot.title = element_text(\n    face=\"bold\", \n    color=\"steelblue\", \n    lineheight=1.2)\n  )"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "title": "NB: GGPlot2",
    "section": "Change point color",
    "text": "Change point color\n\ngg3 + scale_colour_manual(\n  name='Legend', \n  values=c('D'='grey', \n           'E'='red', \n           'F'='blue', \n           'G'='yellow', \n           'H'='black', \n           'I'='green', \n           'J'='firebrick'))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "title": "NB: GGPlot2",
    "section": "Adjust X and Y axis limits",
    "text": "Adjust X and Y axis limits\nMethod 1: Zoom in\n\ngg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nMethod 2: Deletes the points outside limits\n\ngg3 + \n  xlim(c(0,3)) + \n  ylim(c(0, 5000)) + \n  geom_smooth()  # deletes the points \n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 14714 rows containing missing values (geom_point).\n\n\n\n\n\nMethod 3: Deletes the points outside limits\n\ngg3 + scale_x_continuous(limits=c(0,3)) + \n  scale_y_continuous(limits=c(0, 5000)) +\n  geom_smooth()  # deletes the points outside limits\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 14714 rows containing missing values (geom_point).\n\n\n\n\n\nNotice the change in smoothing line because of deleted points. This could sometimes be misleading in your analysis."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "title": "NB: GGPlot2",
    "section": "Change X and Y axis labels",
    "text": "Change X and Y axis labels\n\ngg3 + scale_x_continuous(\n  labels=c(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\")) \n\n\n\n  scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor\n\n<ScaleContinuousPosition>\n Range:  \n Limits:    0 --    1\n\n\nUse scale_x_discrete instead, if X variable is a factor.\nRotate axis text\n\ngg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "title": "NB: GGPlot2",
    "section": "Flip X and Y Axis",
    "text": "Flip X and Y Axis\n\ngg3 + coord_flip()  # flips X and Y axis."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "title": "NB: GGPlot2",
    "section": "Grid lines and panel background",
    "text": "Grid lines and panel background\n\ngg3 + theme(panel.background = element_rect(fill = 'springgreen'),\n  panel.grid.major = element_line(colour = \"firebrick\", size=3),\n  panel.grid.minor = element_line(colour = \"blue\", size=1))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "title": "NB: GGPlot2",
    "section": "Plot margin and background",
    "text": "Plot margin and background\n\ngg3 + theme(plot.background=element_rect(fill=\"yellowgreen\"), plot.margin = unit(c(2, 4, 1, 3), \"cm\")) # top, right, bottom, left"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "title": "NB: GGPlot2",
    "section": "Hide legend",
    "text": "Hide legend\n\ngg3 + theme(legend.position=\"none\")  # hides the legend"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "title": "NB: GGPlot2",
    "section": "Change legend title",
    "text": "Change legend title\n\ngg3 + scale_color_discrete(name=\"\")  # Remove legend title (method1)\n\n\n\n# Remove legend title (method)\np1 <- gg3 + theme(legend.title=element_blank())  \n\n# Change legend title\np2 <- gg3 + scale_color_discrete(name=\"Diamonds\")  \n\n\n# install.packages(\"gridExtra\")\n\n\nlibrary(gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\ngrid.arrange(p1, p2, ncol=2)  # arrange"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "title": "NB: GGPlot2",
    "section": "Change legend and point color",
    "text": "Change legend and point color\n\ngg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "title": "NB: GGPlot2",
    "section": "Change legend position",
    "text": "Change legend position\nOutside plot\n\np1 <- gg3 + theme(legend.position=\"top\")  # top / bottom / left / right\n\nInside plot\n\np2 <- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)\ngridExtra::grid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "title": "NB: GGPlot2",
    "section": "Change order of legend items",
    "text": "Change order of legend items\n\n#df$newLegendColumn <- factor(df$legendcolumn, levels=c(new_order_of_legend_items), ordered = TRUE) \n\nCreate a new factor variable used in the legend, ordered as you need. Then use this variable instead in the plot."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "title": "NB: GGPlot2",
    "section": "Legend title, text, box, symbol",
    "text": "Legend title, text, box, symbol\n\nlegend.title - Change legend title\nlegend.text - Change legend text\nlegend.key - Change legend box\nguides - Change legend symbols\n\n\ngg3 + theme(legend.title = element_text(size=20, color = \"firebrick\"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))  # legend title color and size, box color, symbol color, size and shape."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "title": "NB: GGPlot2",
    "section": "Add text in chart",
    "text": "Add text in chart\n\n# Not Run: gg + geom_text(aes(xcol, ycol, label=round(labelCol), size=3)) \n# general format \ngg + geom_text(aes(label=color, color=color), size=4)\n\n\n\n\n##Annotation\n\nlibrary(grid) \nmy_grob = grobTree(textGrob(\"My Custom Text\", x=0.8, y=0.2, \n                            gp=gpar(col=\"firebrick\", fontsize=25, fontface=\"bold\"))) \n\ngg3 + annotation_custom(my_grob)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "title": "NB: GGPlot2",
    "section": "Multiple chart panels",
    "text": "Multiple chart panels\n\np1 <- gg1 + facet_grid(color ~ cut) # arrange in a grid. More space for plots. Free X and Y axis scales\n\nBy setting scales=‘free’, the scales of both X and Y axis is freed. Use scales=‘free_x’ to free only X-axis and scales=‘free_y’ to free only Y-axis.\n\np2 <- gg1 + facet_wrap(color ~ cut, scales=\"free\") # free the x and yaxis scales."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "title": "NB: GGPlot2",
    "section": "Arrange multiple plots",
    "text": "Arrange multiple plots\n\nlibrary(gridExtra) \ngrid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "title": "NB: GGPlot2",
    "section": "Add smoothing line",
    "text": "Add smoothing line\n\ngg3 + geom_smooth(aes(color=color)) # method could be - 'lm', 'loess', 'gam'\n\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "title": "NB: GGPlot2",
    "section": "Add horizontal / vertical line",
    "text": "Add horizontal / vertical line\n\np1 <- gg3 + geom_hline(yintercept=5000, size=2, linetype=\"dotted\", color=\"blue\") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash \np2 <- gg3 + geom_vline(xintercept=4, size=2, color=\"firebrick\") \np3 <- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend=\"round\")) \n\nWarning: Ignoring unknown aesthetics: lineend\n\np4 <- gg3 + geom_segment(aes(x=carat, y=price,\nxend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5)) # x, y: start points. xend, yend: endpoints \ngridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "title": "NB: GGPlot2",
    "section": "Add bar chart",
    "text": "Add bar chart\n\n# Frequency bar chart: Specify only X axis. \ngg <- ggplot(mtcars, aes(x=cyl)) \ngg + geom_bar() # frequency table\n\n\n\n\n\ngg <- ggplot(mtcars, aes(x=cyl)) \np1 <- gg + geom_bar(position=\"dodge\", aes(fill=factor(vs))) # side-by-side \np2 <- gg + geom_bar(aes(fill=factor(vs))) # stacked \ngridExtra::grid.arrange(p1, p2, ncol=2)\n\n\n\n\n\n# Absolute bar chart: Specify both X adn Y axis. Set stat=\"identity\"\ndf <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'\nnames(df) <- c(\"cyl\", \"mpg\")\nhead(df)\n\n  cyl      mpg\n1   4 26.66364\n2   6 19.74286\n3   8 15.10000\n\n#>   cyl    mpg\n#> 1   4  26.66\n#> 2   6  19.74\n#> 3   8  15.10\n\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\")  # Y axis is explicit. 'stat=identity'\nprint(gg_bar)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "title": "NB: GGPlot2",
    "section": "Distinct color for bars",
    "text": "Distinct color for bars\n\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl))\nprint(gg_bar)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "title": "NB: GGPlot2",
    "section": "Change color and width of bars",
    "text": "Change color and width of bars\n\ndf$cyl <- as.factor(df$cyl)\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl), width = 0.25)\ngg_bar + scale_fill_manual(values=c(\"4\"=\"steelblue\", \"6\"=\"firebrick\", \"8\"=\"darkgreen\"))"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "title": "NB: GGPlot2",
    "section": "Change color palette",
    "text": "Change color palette\n\nlibrary(RColorBrewer)\n\nWarning: package 'RColorBrewer' was built under R version 4.0.5\n\ndisplay.brewer.all(n=20, exact.n=FALSE)  # display available color palettes\n\n\n\nggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat=\"identity\") + scale_fill_brewer(palette=\"Reds\")  # \"Reds\" is palette name"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "title": "NB: GGPlot2",
    "section": "Line chart from timeseries",
    "text": "Line chart from timeseries\n\n# One step method.\n# install.packages(\"ggfortify\")\nlibrary(ggfortify)\n\nWarning: package 'ggfortify' was built under R version 4.0.5\n\nautoplot(AirPassengers, size=2) + labs(title=\"AirPassengers\")"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "title": "NB: GGPlot2",
    "section": "Area",
    "text": "Area\ngeom_area is similar to geom_ribbon, except that the ymin is set to 0. If you want to make overlapping area plot, use the alpha aesthetic to make the top layer translucent.\n\n# Method1: Non-Overlapping Area\ndf <- reshape2::melt(economics[, c(\"date\", \"psavert\", \"uempmed\")], id=\"date\")\nhead(df, 3)\n\n        date variable value\n1 1967-07-01  psavert  12.6\n2 1967-08-01  psavert  12.6\n3 1967-09-01  psavert  11.9\n\n#>         date variable value\n#> 1 1967-07-01  psavert  12.5\n#> 2 1967-08-01  psavert  12.5\n#> 3 1967-09-01  psavert  11.7\np1 <- ggplot(df, aes(x=date)) + geom_area(aes(y=value, fill=variable)) + labs(title=\"Non-Overlapping - psavert and uempmed\")\n\n# Method2: Overlapping Area\np2 <- ggplot(economics, aes(x=date)) + geom_area(aes(y=psavert), fill=\"yellowgreen\", color=\"yellowgreen\") + geom_area(aes(y=uempmed), fill=\"dodgerblue\", alpha=0.7, linetype=\"dotted\") + labs(title=\"Overlapping - psavert and uempmed\")\ngridExtra::grid.arrange(p1, p2, ncol=2)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "title": "NB: R Markdown",
    "section": "Introduction",
    "text": "Introduction\nR provides a notebook style coding environment similar to Jupyter.\n\nIt follows the literate programming paradigm of inter-leaving text and code.\nIt uses a version of Markdown to create the text components.\nIt allows executable code blocks.\nThey can be used interactively or as exported documents into standard formats.\n\nHow, the R approach differs in some important ways:\n\nRMarkdown is not visually rendered while your are editing.\n\nThe document has to be ‘knitted’ to see this.\nNewer versions of RStudio have a visual mode that does render Markdown, and also allows you to edit in this mode.\nThis differs from Jupyter’s cell-by-cell approach.\n\nRMarkdown allows several programming languages to be run in the same notebook. - RMarkdown files are meant to be published documents, not workspaces for coding.\nRMarkdown is written in markdown and uses YAMLto store configuration information.\n\nJupyter notebooks are written in JavaScript, which contains both configuration data and content data in the same structure.\nThis difference is what accounts for the different editing experiences. JavaScript is the native programming language of web browsers; the notebook format is executable code that can be integrated into a web application."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "title": "NB: R Markdown",
    "section": "Varieties of R Markdown outputs",
    "text": "Varieties of R Markdown outputs\nR Markdown is designed to be output to several formats:\n\nR Notebooks\n\nDesigned to previewed\nOr output to (html|pdf|doc)_notebook\nHave Preview in RStudio toolbar (but also Knit in menu)\n\nDocuments\n\nOutput to (html|pdf|doc)_document\nHas Knit in RStudio toolbar\n\nPresentations\n\nProduce slideshows from your source file, in ioslides, beamer, or powerpoint.\n\nShiny\n\nCreate interactive apps that can be published on the web."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "title": "NB: R Markdown",
    "section": "Knitting",
    "text": "Knitting\nKnitting is the process of compiling all the code and visual assets of an RMarkdown into a single file."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "title": "NB: R Markdown",
    "section": "Publishing",
    "text": "Publishing\nRMarkdown has publication in mind as an outcome. RStudio allows you to publish in these destinations:\n\nRPubs\nR Studio Connect"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "title": "NB: R Markdown",
    "section": "Outputting",
    "text": "Outputting\nThere are two ways to set the output of a document:\n\nPermanently, by modifying the YAML header:\ntitle: \"Viridis Demo\"\noutput: html_document\nTransiently, by calling rmarkdown::render() by hand:\n\nrmarkdown::render(\"diamond-sizes.Rmd\", output_format = \"word_document\")\n\nThis is useful if you want to programmatically produce multiple types of output.\n\nRStudio’s knit button renders a file to the first format listed in its output field.\nYou can also do it by code:\nknitr::include_graphics(\"screenshots/rmarkdown-knit.png\")\nEach output format is associated with an R function.\nYou can either write foo or pkg::foo.\nIf you omit pkg, the default is assumed to be rmarkdown.\nIt’s important to know the name of the function that makes the output because that’s where you get help.\nFor example, to figure out what parameters you can set with html_document, look at ?rmarkdown::html_document.\n\nOutput options\nTo override the default parameter values, you need to use an expanded output field. For example, if you wanted to render an html_document with a floating table of contents, you’d use:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\nYou can even render to multiple outputs by supplying a list of formats:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n  pdf_document: default\nNote the special syntax if you don’t want to override any of the default options."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "title": "NB: R Markdown",
    "section": "How It Works",
    "text": "How It Works"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "title": "NB: R Markdown",
    "section": "The RMarkdown Spec",
    "text": "The RMarkdown Spec\nSee The RMarkown Reference Guide and RStudio’s Guide."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "title": "NB: Loose Ends",
    "section": "qplot",
    "text": "qplot\nqplot creates quick and simple plots that use all of the ggplot2 defaults.\nIt let’s you define a plot in a single call that gives a set of aesthetics and a data set.\nIt infers a geom from your data and mappings if you don’t supply onw. Recall this is how plot worked.\n\n##| vscode: {languageId: r}\n## plot(select(iris, -Species))\n\n\n##| vscode: {languageId: r}\n## qplot(select(iris, -Species))\n\n\n##| vscode: {languageId: r}\nqplot(displ, hwy, data = mpg)\n\n\n##| vscode: {languageId: r}\nqplot(displ, hwy, color=class, data = mpg)\n\n\n##| vscode: {languageId: r}\nqplot(displ, data = mpg)\n\n\n##| vscode: {languageId: r}\nqplot(displ, data = mpg, geom = c('bar'))\n\n\nGotchas\nOddly, data is not the first argument, so it won’t work with %>%.\nThis will fail:\n\n##| vscode: {languageId: r}\n## mpg %>% qplot(displ, hwy)\n\nAlso, data has to be called by key, e.g. data = mpg.\nThis will fail, too:\n\n##| vscode: {languageId: r}\n## qplot(displ, hwy, mpg)\n\nHere’s a nice guide in PDF form: Getting started with qplot"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "title": "NB: Loose Ends",
    "section": "GGPlot in Python",
    "text": "GGPlot in Python\nThere are pygg plotnine and\nHard to replicate R syntax in Python.\nBut why should it? Should just implement to pattern Pythonically.\nSee example in M14-00a-Plotnine.ipynb."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "title": "NB: Loose Ends",
    "section": "Plotly in R",
    "text": "Plotly in R\n\n##| vscode: {languageId: r}\n## install.packages(\"plotly\")\n\n\n##| scrolled: true\n##| vscode: {languageId: r}\nlibrary(plotly)\n\n\n##| tags: []\n##| vscode: {languageId: r}\n## ?plot_ly\n\nTypes of plots\n'bar', 'barpolar', 'box', 'candlestick', 'carpet', 'choropleth', 'choroplethmapbox', 'cone', 'contour', 'contourcarpet', 'densitymapbox', 'funnel', 'funnelarea', 'heatmap', 'heatmapgl', 'histogram', 'histogram2d', 'histogram2dcontour', 'icicle', 'image', 'indicator', 'isosurface', 'mesh3d', 'ohlc', 'parcats', 'parcoords', 'pie', 'pointcloud', 'sankey', 'scatter', 'scatter3d', 'scattercarpet', 'scattergeo', 'scattergl', 'scattermapbox', 'scatterpolar', 'scatterpolargl', 'scatterternary', 'splom', 'streamtube', 'sunburst', 'surface', 'table', 'treemap', 'violin', 'volume', 'waterfall'\n\n##| tags: []\n##| vscode: {languageId: r}\nhead(mpg)\n\n\n##| vscode: {languageId: r}\nfig1 <- mpg %>%\n    plot_ly(\n        x         = ~hwy, \n        y         = ~cty, \n        size      = ~displ, \n        type      = 'scatter', \n        color     = ~class,\n        mode      = \"markers\",\n        hovertext = ~manufacturer,\n        height    = 500, width = 750)\n\n\n##| vscode: {languageId: r}\nfig1\n\n\n##| vscode: {languageId: r}\nfig2 <- iris %>%\n    plot_ly(\n        x         = ~Petal.Length, \n        y         = ~Petal.Width, \n        size      = ~Sepal.Length, \n        color     = ~Sepal.Width,\n        symbol    = ~Species,\n        type      = \"scatter\", \n        mode      = \"markers\",\n        height    = 500, width = 750)\n\n\n##| vscode: {languageId: r}\nfig2\n\n\n##| tags: []\n##| vscode: {languageId: r}\n## ?plot_ly\n\n\nGGPlotly\nBest of both worlds?\n\nPlotly ggplot2 Open Source Graphing Library With ggplotly() by Plotly, you can convert your ggplot2 figures into interactive ones powered by plotly.js, ready for embedding into Dash applications. ggplotly is free and open source and you can view the source, report issues or contribute on GitHub. Head over to the community forum to ask questions and get help.\n\nIf call ggplotly() with no argument, it will display your last ggplot as a plotly plot.\nPretty cool.\nYou also pass it a plot that was assigned to a variable.\nIn both cases, you can then add ploty features to your graph.\n\n##| vscode: {languageId: r}\nggplotly()\n\n\n##| vscode: {languageId: r}\nggplotly(height=200, width=350)\n\n>>> Learn more.\n\n##| vscode: {languageId: r}\n## ?ggplotly"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "title": "NB: Loose Ends",
    "section": "Using :: in R",
    "text": "Using :: in R\nWhen you load libraries in R that have the same function names, R resolves this by picking a default, and then letting you access the others using :: operator to specify the library from which the method comes.\nThe rule is that the package loaded last will hide, or mask, the function from earlier packages.\nIf you want to have a certain function be the default, make sure you load it last.\nFor example, when we load tidyverse, we get this message:\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nThis means that dplyr overrides the filter() and lag() methods associated with the stats library.\nSimilarly, when you load plotly, you’ll see this:\nAttaching package: ‘plotly’\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\nOne thing I have noticed is that even though the last library masks the other functions, the help operator ?<objectname> does not follow this.\nAlso, in this script, note that dplyr::filter is the default, even though plotly::filter loaded after dplyr. This is because Plotly’ filter function is not used in the normal way; it appears in the context of the transforms argument to plot_ly(). No need to get into this now, but just know that that’s why it does not mask dplyr.\nExamples\nHere, we call filter by itself and it uses the one from dplyr.\n\n##| vscode: {languageId: r}\nhead(filter(mpg, hwy > 0))\n\nBut if we ask for help, we’ll get the original stats version.\n\n##| vscode: {languageId: r}\n## ?filter\n\nAnd if we ask for help about Plotly’s version, we see this:\n\n##| vscode: {languageId: r}\n## ?plotly"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#ggplot-in-python",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#ggplot-in-python",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "GGPlot in Python",
    "text": "GGPlot in Python\nThere are two ports of GGPlot2 to Python: pygg and plotnine.\nThe first seems to have stopped development and is much less used.\nLet’s look at Plotnine.\n\n## ! conda install -c conda-forge plotnine -y\n\n\nimport pandas as pd\nimport numpy as np\nfrom pandas.api.types import CategoricalDtype\n\n\nfrom plotnine import *\nfrom plotnine.data import mpg\n\nOur old friend, mpg in Python:\n\nmpg"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "A Simple Bar Chart",
    "text": "A Simple Bar Chart\n\n(ggplot(mpg)            # defining what data to use\n    + aes(x='class')    # defining what variable to use\n    + geom_bar(size=20) # defining the type of plot to use\n)\n\nNotice that aes() is not a helper function (a function in the argument space).\nAlso, R dots become _ in the argument names.\nNote that we don’t have to use the syntax above, which groups the functions in a single expression with (...).\nWe can do this:\n\nggplot(mpg) + aes(x='class') + geom_bar(size=20)\n\nOr this:\n\nggplot(mpg) + \\\n    aes(x='class') + \\\n    geom_bar(size=20)\n\nNote that none of these are like R due to differing white space rules."
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "Faceting",
    "text": "Faceting\n\nggplot(mpg) + \\\n    aes(x = 'drv', y = 'cty', color = 'class', size='cyl') + \\\n    geom_point()\n\n\n(ggplot(mpg)         \n + aes(x='drv', y='cty', color='class', size='cyl')\n + geom_point()\n + facet_wrap('class')\n + theme(legend_position = \"none\")\n)"
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "The Pandas Way",
    "text": "The Pandas Way\nNote the GGPlot included the computation of counts in the geom_bar() function.\n\nmpg['class'].value_counts().sort_index().plot.bar(rot=45)\n\nHowever, sometomes Pandas does do internal calculations, as with .hist():\n\nmpg['cty'].hist()\n\nFor faceting in Pandas, see this: https://stackoverflow.com/questions/29786227/how-do-i-plot-facet-plots-in-pandas\nNotice that it is essentially the result of a .groupby() followed by .unstack().\nSo, Pandas expects you to do the data transformations upfront.\nGGPlot2 will handle these in the geometries and facets\nGGPlot2 is easier, but Pandas separates comcerns\nAs a rule, data operations should never take place in the visualization."
  },
  {
    "objectID": "modules/m13/m13-intro.html#topics",
    "href": "modules/m13/m13-intro.html#topics",
    "title": "M13 Agile",
    "section": "Topics",
    "text": "Topics\n\nGeneral concept of project management (PM)\nRationale for PM\nMain types of PM\nDeeper dive into Agile PM\nBasic artifacts, tools, and processes for PM"
  },
  {
    "objectID": "modules/m13/m13-intro.html#readings",
    "href": "modules/m13/m13-intro.html#readings",
    "title": "M13 Agile",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nManifesto for Agile Software Development (agilemanifesto.org)\n\n\nTwelve Principles of Agile Software (agilemanifesto.org)\n\n\nUser Stories: An Overview (Digité)\n\n\nProject Charters (Princeton)\n\n\nDataset Curation Template (Princeton)"
  },
  {
    "objectID": "topics/project-management.html",
    "href": "topics/project-management.html",
    "title": "Project Management",
    "section": "",
    "text": "Some basic facts\n\n\n\nProject management is an established field that is used for many activities.\n\n\nIt is a profession in which you can be certified as a  CPM.\n\n\nIt is a field with an established and large body of knowledge – PMBOK.\n\n\n\n\nBroadly speaking, it refers to a class of rational methods and protocols for organizing the labor of complex activities in order to achieve specific outcomes on time and on budget.\n\n\nThink NASA’s space program in the 1960s.\n\n\n\n\n\nIts history dates to the early 20th century but becomes highly developed in the 1950s and 60s.\n\n\n\nIt is closely associated with US military operations, e.g. Gantt Charts and PERT.\n\n\nIt was later adapted to software development, due to the complexity and importances of of this kind of work.\n\n\n\n\n\nSource\n\n\nSoftware is also mission critical\n\n\n\nFrom the beginning, it has been used to support critical operations: weapons systems, air traffic control, financial systems, health care, etc.\n\n\nOnly recently are we seeing the effects of software design – in the form of data products – fail on the basis of bias and other flaws that lead to social harm\n\n\n\nIn the 1960s, the US Department of Defenses study of software problems found that:\n\n\n\n47% of software delivered could not be used, as it usually didn’t meet requirements\n\n\n29% of funded software was never delivered, as it was usually canceled due to cost/schedule overruns\n\n\n19% of software was useful after extensive rework, and it usually cost 36 times more to fix problems after release\n\n\n\nBecause of this, software engineering was developed.\n\n\nBut Software development is hard for many reasons:\n\n\n\nHardware and software are inherently complex.\n\n\nCode is imperfect and error-prone.\n\n\nCode is always an interpretation of specifications that are always underspecified. → DEBUGGING THE SPEC\n\n\n\nUnderspecified in two senses:\n\n\n\nThe inherent inadequacy of language to represent reality.\n\n\n“The map is not the terrain”\n\n\n\n\nThe fact that people don’t know what they want even when they say they do.\n\n\nThat is, reality itself changes.\n\n\n\n\n\n \n\nSource\n\n\nMany paradigms of the software development life cycle (SDLC) have been introduced over the years to address these issues:\n\n\n\nWaterfall\n\n\nSpiral\n\n\nEtc. → See Tutorialspoint on SDLC.\n\n\n\nThe Waterfall Model\n\n\n\n\n\nWaterfall Methodology\n\n\nSource\n\nWhat they all have in is a faith in the power of planning and engineering to achieve results:\n\n\n\nPlanning as the ability to predict accurately how things will unfold\n\n\nand have people understand and follow rules.\n\n\n\n\nEngineering as the operationalization of labor processes\n\n\nThe ability to treat human behavior as a tractable variable. \n\n\nthe logic of the machine applied to the the organization of labor.\n\n\n\n\n\nThese assumptions are reflected in the relationship between client and developer\n\n\n\nNotice that absence of the client in the design, building, and validation\n\n\n\nThis is partly the result of mitigating the mission creep introduced by the client \n\n\nThe Iron Triangle\n\n \n\nThe Spiral Method\n\n\nThe Spiral Method recognizes the need to be more iterative, and introduces the client at points in an ongoing cycle. \n\n\n\nPresumably, clients are involved in objective identification and testing …\n\n\n\n\n\nSource\n\n\nThe methods have the virtue of being rational and comprehensive, defining all the things involved in software development\n\n\n\nBut they are very linear\n\n\n\nEven the Spiral method, which is really a 2D linear process, where phases are features and iterations are observations:\n\n\n\nPrimary sequence S = OI → AE → PD → NPP\n\n\nProcessP = S1 → S2 → S3 → … → SN"
  },
  {
    "objectID": "topics/agile-dev.html",
    "href": "topics/agile-dev.html",
    "title": "Agile Development",
    "section": "",
    "text": "Agile development is essentially a philosophy developed in response to bureaucratic software development processes.\n\n\nIt is an approach that focuses on the realities of software:\n\n\n\nIndividuals and interactions over processes and tools\n\n\nWorking software over comprehensive documentation\n\n\nCustomer collaboration over contract negotiation\n\n\nResponding to change over following a plan\n\n\n\nEssentially, it is based on a mistrust of machines, plans, contracts, documents, etc.\n\n\nThe Agile Manifesto  was written in 2001 after a number of lighter and more flexible approaches were developed in the 1990s\n\n\n\nSCRUM\n\n\nXP (Extreme Program) \n\n\nEtc.\n\n\n\nIt is also a collection of methods and tools\n\n\n\nUser stories\n\n\nScrum meetings\n\n\nSprints\n\n\nTask weighting with cards\n\n\nEtc.\n\n\n\nAgile is also counter-cultural, like many of the software movements that attended the rise of the web  \n\n\n\n\n\nSource\n\n\nHere are the 12 Principles of Agile SD:\n\n\n\nCustomer satisfaction by early and continuous delivery of valuable software. → The “early and often” of open source development.\n\n\nWelcome changing requirements, even in late development.\n\n\nDeliver working software frequently (weeks rather than months)\n\n\nClose, daily cooperation between business people and developers\n\n\nProjects are built around motivated individuals, who should be trusted\n\n\nFace-to-face conversation is the best form of communication (co-location)\n\n\nWorking software is the primary measure of progress\n\n\nSustainable development, able to maintain a constant pace\n\n\nContinuous attention to technical excellence and good design\n\n\nSimplicity—the art of maximizing the amount of work not done—is essential\n\n\nBest architectures, requirements, and designs emerge from self-organizing teams\n\n\nRegularly, the team reflects on how to become more effective, and adjusts accordingly\n\n\n\nAs you can see, it’s all about giving teams the freedom and trust to creatively respond to client needs and change.\n\n\nAs an aside, it’s worth noting the effect of the Web on these developments\n\n\n\nAgile was spurred by the affordances of the Web and open source software\n\n\nAnd for teams to organize organically, without the oversight of governmental bodies or corporations\n\n\nInfluenced by the success of Open Source tools like Linux\n\n\nConsistent with Git as a tool for organically organizing software development"
  },
  {
    "objectID": "topics/user-stories.html",
    "href": "topics/user-stories.html",
    "title": "User Stories",
    "section": "",
    "text": "User Stories are at the heart of Agile development.\n\n\nInstead of eliciting requirements through a formal process, teams ask clients to provide statements in verbal form:\n\n\n\nAs a [type of user],\n\n\nI want [an action]\n\n\nso that [a benefit/value]\n\n\n\nThese are written on index cards.\n\n\nThese are accompanied by conversation to clarify the meaning of the sentences.\n\n\nThese are then converted into requirements:\n\n\n\nFunctional – relating specifically to how the software will work, i.e. function.\n\n\nNon-functional (so-called) – relating to the broader purpose and context of usage.\n\n\nThese map roughly onto the second and third parts of the user story.\n\n\nThey also map on MACHINE and HUMAN.\n\n\nThis page shows some examples of stories mapping onto features (so-called acceptance criteria).\n\n\n\nThese requirements are then prioritized\n\n\n\nUsing MSCW – Must / Should / Can / Won’t\n\n\nWithin the context of a scope definition in a charter (not discussed here)\n\n\nSee this link for some guidance.\n\n\n\nAfter this, requirements are serialized into a rough schedule, grouped into milestones.\n\n\nIn executing the “plan,” teams meet regularly in brief, stand-up meetings called scrums.\n\n\n\nThese happen daily\n\n\nThese involve the development team\n\n\nStakeholder representatives, such as the product manager, may attend too\n\n\n\nAt regular intervals, clients are introduced to the process\n\n\n\nPrototypes, MVPs, etc. are presented\n\n\nFeedback is elicited early and often\n\n\n\nThe process is driven by a communication plan:\n\n\n\nFrequency of meeting\n\n\nMode of communication – F2F, Slack, Git\n\n\nTask management tools – Jira, Trello, Smartsheet, etc.\n\n\n\nOther artifacts are involved in this process:\n\n\n\nThe project charter\n\n\nThe project plan\n\n\nA Kan Ban board\n\n\n\nBut we will get into these later."
  },
  {
    "objectID": "topics/oreilly-accounts.html",
    "href": "topics/oreilly-accounts.html",
    "title": "Setting Up O’Reilly",
    "section": "",
    "text": "O’Reilly for Higher Education contains books on all aspects of computers, programming and the Web from such publishers as O’Reilly, Sams, New Riders, Adobe. Students can access content for free.\nFollow these instructions to set up your account:\nGo to https://www.oreilly.com/library/view/temporary-access/.\nYou should see this dialog box:\n\nClick on Institution not listed? This will produce the following dialog box:\n\nIf you are first time user, enter your UVA email address and clicl on the big red button.\nThis should produce the following message:\n\nNow you can access all the books in the collection. When you return, click on Already a user? in the second dialog box."
  },
  {
    "objectID": "topics/refreshing-the-course-repo.html",
    "href": "topics/refreshing-the-course-repo.html",
    "title": "Refreshing the Course Repo",
    "section": "",
    "text": "Each day you will want to update the forked version of the course repo you created for your homework in Module 01.\nHere are the steps to do that:\nFirst, if you have made any changes to the course notebooks and want to keep your changes, make copies of these files in your private repo.\nSecond, enter the command git stash within your local repo to hide the changes you’ve made to the current branch. To learn more about how to use stash, check out the docs on GitHub. For now, we are just using it clean up the repo so when you pull, you don’t run into a conflict between local and remote changes.\nThird, go to the forked version of the course repo on GitHub and issue a Sync Fork command to refresh the content of your repo with the new course content. The screenshot below shows where this command is located on your repo’s web page:\n\nFourth, go back to your local repo and run git pull. You should now have the most recent content from the course repo."
  }
]